
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT
 *  @generated
 *
 */

#pragma once

#include <thrift/lib/python/capi/constructor.h>
#include <thrift/lib/python/capi/extractor.h>

#include <thrift/compiler/test/fixtures/py3/gen-cpp2/module_types.h>

namespace module {

struct NamespaceTag {};

} // namespace module

namespace apache::thrift::python::capi {
template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::py3::simple::SimpleException, ::module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::py3::simple::SimpleException, ::module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::py3::simple::SimpleException> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::py3::simple::SimpleException, ::module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::py3::simple::SimpleException, ::module::NamespaceTag>> {
  ExtractorResult<::py3::simple::SimpleException> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::py3::simple::SimpleException, ::module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::py3::simple::SimpleException, ::module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::py3::simple::SimpleException& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::py3::simple::SimpleException, ::module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::py3::simple::SimpleException, ::module::NamespaceTag>> {
  PyObject* operator()(const ::py3::simple::SimpleException& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::py3::simple::OptionalRefStruct, ::module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::py3::simple::OptionalRefStruct, ::module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::py3::simple::OptionalRefStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::py3::simple::OptionalRefStruct, ::module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::py3::simple::OptionalRefStruct, ::module::NamespaceTag>> {
  ExtractorResult<::py3::simple::OptionalRefStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::py3::simple::OptionalRefStruct, ::module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::py3::simple::OptionalRefStruct, ::module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::py3::simple::OptionalRefStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::py3::simple::OptionalRefStruct, ::module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::py3::simple::OptionalRefStruct, ::module::NamespaceTag>> {
  PyObject* operator()(const ::py3::simple::OptionalRefStruct& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::py3::simple::SimpleStruct, ::module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::py3::simple::SimpleStruct, ::module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::py3::simple::SimpleStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::py3::simple::SimpleStruct, ::module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::py3::simple::SimpleStruct, ::module::NamespaceTag>> {
  ExtractorResult<::py3::simple::SimpleStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::py3::simple::SimpleStruct, ::module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::py3::simple::SimpleStruct, ::module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::py3::simple::SimpleStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::py3::simple::SimpleStruct, ::module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::py3::simple::SimpleStruct, ::module::NamespaceTag>> {
  PyObject* operator()(const ::py3::simple::SimpleStruct& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::py3::simple::HiddenTypeFieldsStruct, ::module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::py3::simple::HiddenTypeFieldsStruct, ::module::NamespaceTag>> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::py3::simple::HiddenTypeFieldsStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::py3::simple::HiddenTypeFieldsStruct, ::module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::py3::simple::HiddenTypeFieldsStruct, ::module::NamespaceTag>> {
  ExtractorResult<::py3::simple::HiddenTypeFieldsStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::py3::simple::HiddenTypeFieldsStruct, ::module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::py3::simple::HiddenTypeFieldsStruct, ::module::NamespaceTag>> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::py3::simple::HiddenTypeFieldsStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::py3::simple::HiddenTypeFieldsStruct, ::module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::py3::simple::HiddenTypeFieldsStruct, ::module::NamespaceTag>> {
  PyObject* operator()(const ::py3::simple::HiddenTypeFieldsStruct& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::py3::simple::detail::AdaptedUnion, ::module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::py3::simple::detail::AdaptedUnion, ::module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::py3::simple::detail::AdaptedUnion> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::py3::simple::detail::AdaptedUnion, ::module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::py3::simple::detail::AdaptedUnion, ::module::NamespaceTag>> {
  ExtractorResult<::py3::simple::detail::AdaptedUnion> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::py3::simple::detail::AdaptedUnion, ::module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::py3::simple::detail::AdaptedUnion, ::module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::py3::simple::detail::AdaptedUnion& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::py3::simple::detail::AdaptedUnion, ::module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::py3::simple::detail::AdaptedUnion, ::module::NamespaceTag>> {
  PyObject* operator()(const ::py3::simple::detail::AdaptedUnion& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::py3::simple::HiddenException, ::module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::py3::simple::HiddenException, ::module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::py3::simple::HiddenException> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::py3::simple::HiddenException, ::module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::py3::simple::HiddenException, ::module::NamespaceTag>> {
  ExtractorResult<::py3::simple::HiddenException> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::py3::simple::HiddenException, ::module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::py3::simple::HiddenException, ::module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::py3::simple::HiddenException& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::py3::simple::HiddenException, ::module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::py3::simple::HiddenException, ::module::NamespaceTag>> {
  PyObject* operator()(const ::py3::simple::HiddenException& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::py3::simple::ComplexStruct, ::module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::py3::simple::ComplexStruct, ::module::NamespaceTag>> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::py3::simple::ComplexStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::py3::simple::ComplexStruct, ::module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::py3::simple::ComplexStruct, ::module::NamespaceTag>> {
  ExtractorResult<::py3::simple::ComplexStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::py3::simple::ComplexStruct, ::module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::py3::simple::ComplexStruct, ::module::NamespaceTag>> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::py3::simple::ComplexStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::py3::simple::ComplexStruct, ::module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::py3::simple::ComplexStruct, ::module::NamespaceTag>> {
  PyObject* operator()(const ::py3::simple::ComplexStruct& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::py3::simple::BinaryUnion, ::module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::py3::simple::BinaryUnion, ::module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::py3::simple::BinaryUnion> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::py3::simple::BinaryUnion, ::module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::py3::simple::BinaryUnion, ::module::NamespaceTag>> {
  ExtractorResult<::py3::simple::BinaryUnion> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::py3::simple::BinaryUnion, ::module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::py3::simple::BinaryUnion, ::module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::py3::simple::BinaryUnion& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::py3::simple::BinaryUnion, ::module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::py3::simple::BinaryUnion, ::module::NamespaceTag>> {
  PyObject* operator()(const ::py3::simple::BinaryUnion& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::py3::simple::BinaryUnionStruct, ::module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::py3::simple::BinaryUnionStruct, ::module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::py3::simple::BinaryUnionStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::py3::simple::BinaryUnionStruct, ::module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::py3::simple::BinaryUnionStruct, ::module::NamespaceTag>> {
  ExtractorResult<::py3::simple::BinaryUnionStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::py3::simple::BinaryUnionStruct, ::module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::py3::simple::BinaryUnionStruct, ::module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::py3::simple::BinaryUnionStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::py3::simple::BinaryUnionStruct, ::module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::py3::simple::BinaryUnionStruct, ::module::NamespaceTag>> {
  PyObject* operator()(const ::py3::simple::BinaryUnionStruct& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::py3::simple::CustomFields, ::module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::py3::simple::CustomFields, ::module::NamespaceTag>> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::py3::simple::CustomFields> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::py3::simple::CustomFields, ::module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::py3::simple::CustomFields, ::module::NamespaceTag>> {
  ExtractorResult<::py3::simple::CustomFields> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::py3::simple::CustomFields, ::module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::py3::simple::CustomFields, ::module::NamespaceTag>> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::py3::simple::CustomFields& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::py3::simple::CustomFields, ::module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::py3::simple::CustomFields, ::module::NamespaceTag>> {
  PyObject* operator()(const ::py3::simple::CustomFields& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::py3::simple::CustomTypedefFields, ::module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::py3::simple::CustomTypedefFields, ::module::NamespaceTag>> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::py3::simple::CustomTypedefFields> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::py3::simple::CustomTypedefFields, ::module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::py3::simple::CustomTypedefFields, ::module::NamespaceTag>> {
  ExtractorResult<::py3::simple::CustomTypedefFields> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::py3::simple::CustomTypedefFields, ::module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::py3::simple::CustomTypedefFields, ::module::NamespaceTag>> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::py3::simple::CustomTypedefFields& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::py3::simple::CustomTypedefFields, ::module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::py3::simple::CustomTypedefFields, ::module::NamespaceTag>> {
  PyObject* operator()(const ::py3::simple::CustomTypedefFields& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::py3::simple::AdaptedTypedefFields, ::module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::py3::simple::AdaptedTypedefFields, ::module::NamespaceTag>> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::py3::simple::AdaptedTypedefFields> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::py3::simple::AdaptedTypedefFields, ::module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::py3::simple::AdaptedTypedefFields, ::module::NamespaceTag>> {
  ExtractorResult<::py3::simple::AdaptedTypedefFields> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::py3::simple::AdaptedTypedefFields, ::module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::py3::simple::AdaptedTypedefFields, ::module::NamespaceTag>> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::py3::simple::AdaptedTypedefFields& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::py3::simple::AdaptedTypedefFields, ::module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::py3::simple::AdaptedTypedefFields, ::module::NamespaceTag>> {
  PyObject* operator()(const ::py3::simple::AdaptedTypedefFields& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::py3::simple::AnEnum, ::module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::py3::simple::AnEnum, ::module::NamespaceTag>> {
  ExtractorResult<::py3::simple::AnEnum> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::py3::simple::AnEnum, ::module::NamespaceTag>> {
  PyObject* operator()(::py3::simple::AnEnum val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::py3::simple::AnEnumRenamed, ::module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::py3::simple::AnEnumRenamed, ::module::NamespaceTag>> {
  ExtractorResult<::py3::simple::AnEnumRenamed> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::py3::simple::AnEnumRenamed, ::module::NamespaceTag>> {
  PyObject* operator()(::py3::simple::AnEnumRenamed val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::py3::simple::Flags, ::module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::py3::simple::Flags, ::module::NamespaceTag>> {
  ExtractorResult<::py3::simple::Flags> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::py3::simple::Flags, ::module::NamespaceTag>> {
  PyObject* operator()(::py3::simple::Flags val);
};

} // namespace apache::thrift::python::capi
