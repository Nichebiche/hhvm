
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT
 *  @generated
 *
 */

#pragma once

#include <thrift/lib/python/capi/constructor.h>
#include <thrift/lib/python/capi/extractor.h>

#include <thrift/compiler/test/fixtures/basic/gen-cpp2/module_types.h>

namespace test__fixtures__basic__module {

struct NamespaceTag {};

} // namespace test__fixtures__basic__module

namespace apache::thrift::python::capi {
template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::basic::MyStruct, ::test__fixtures__basic__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::basic::MyStruct, ::test__fixtures__basic__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::test::fixtures::basic::MyStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic::MyStruct, ::test__fixtures__basic__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic::MyStruct, ::test__fixtures__basic__module::NamespaceTag>> {
  ExtractorResult<::test::fixtures::basic::MyStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::basic::MyStruct, ::test__fixtures__basic__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::basic::MyStruct, ::test__fixtures__basic__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::test::fixtures::basic::MyStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic::MyStruct, ::test__fixtures__basic__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic::MyStruct, ::test__fixtures__basic__module::NamespaceTag>> {
  PyObject* operator()(const ::test::fixtures::basic::MyStruct& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::basic::Containers, ::test__fixtures__basic__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::basic::Containers, ::test__fixtures__basic__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::test::fixtures::basic::Containers> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic::Containers, ::test__fixtures__basic__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic::Containers, ::test__fixtures__basic__module::NamespaceTag>> {
  ExtractorResult<::test::fixtures::basic::Containers> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::basic::Containers, ::test__fixtures__basic__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::basic::Containers, ::test__fixtures__basic__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::test::fixtures::basic::Containers& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic::Containers, ::test__fixtures__basic__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic::Containers, ::test__fixtures__basic__module::NamespaceTag>> {
  PyObject* operator()(const ::test::fixtures::basic::Containers& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::basic::MyDataItem, ::test__fixtures__basic__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::basic::MyDataItem, ::test__fixtures__basic__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::test::fixtures::basic::MyDataItem> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic::MyDataItem, ::test__fixtures__basic__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic::MyDataItem, ::test__fixtures__basic__module::NamespaceTag>> {
  ExtractorResult<::test::fixtures::basic::MyDataItem> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::basic::MyDataItem, ::test__fixtures__basic__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::basic::MyDataItem, ::test__fixtures__basic__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::test::fixtures::basic::MyDataItem& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic::MyDataItem, ::test__fixtures__basic__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic::MyDataItem, ::test__fixtures__basic__module::NamespaceTag>> {
  PyObject* operator()(const ::test::fixtures::basic::MyDataItem& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::basic::MyUnion, ::test__fixtures__basic__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::basic::MyUnion, ::test__fixtures__basic__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::test::fixtures::basic::MyUnion> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic::MyUnion, ::test__fixtures__basic__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic::MyUnion, ::test__fixtures__basic__module::NamespaceTag>> {
  ExtractorResult<::test::fixtures::basic::MyUnion> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::basic::MyUnion, ::test__fixtures__basic__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::basic::MyUnion, ::test__fixtures__basic__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::test::fixtures::basic::MyUnion& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic::MyUnion, ::test__fixtures__basic__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic::MyUnion, ::test__fixtures__basic__module::NamespaceTag>> {
  PyObject* operator()(const ::test::fixtures::basic::MyUnion& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::basic::MyException, ::test__fixtures__basic__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::basic::MyException, ::test__fixtures__basic__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::test::fixtures::basic::MyException> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic::MyException, ::test__fixtures__basic__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic::MyException, ::test__fixtures__basic__module::NamespaceTag>> {
  ExtractorResult<::test::fixtures::basic::MyException> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::basic::MyException, ::test__fixtures__basic__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::basic::MyException, ::test__fixtures__basic__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::test::fixtures::basic::MyException& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic::MyException, ::test__fixtures__basic__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic::MyException, ::test__fixtures__basic__module::NamespaceTag>> {
  PyObject* operator()(const ::test::fixtures::basic::MyException& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::basic::MyExceptionWithMessage, ::test__fixtures__basic__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::basic::MyExceptionWithMessage, ::test__fixtures__basic__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::test::fixtures::basic::MyExceptionWithMessage> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic::MyExceptionWithMessage, ::test__fixtures__basic__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic::MyExceptionWithMessage, ::test__fixtures__basic__module::NamespaceTag>> {
  ExtractorResult<::test::fixtures::basic::MyExceptionWithMessage> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::basic::MyExceptionWithMessage, ::test__fixtures__basic__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::basic::MyExceptionWithMessage, ::test__fixtures__basic__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::test::fixtures::basic::MyExceptionWithMessage& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic::MyExceptionWithMessage, ::test__fixtures__basic__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic::MyExceptionWithMessage, ::test__fixtures__basic__module::NamespaceTag>> {
  PyObject* operator()(const ::test::fixtures::basic::MyExceptionWithMessage& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::basic::ReservedKeyword, ::test__fixtures__basic__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::basic::ReservedKeyword, ::test__fixtures__basic__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::test::fixtures::basic::ReservedKeyword> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic::ReservedKeyword, ::test__fixtures__basic__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic::ReservedKeyword, ::test__fixtures__basic__module::NamespaceTag>> {
  ExtractorResult<::test::fixtures::basic::ReservedKeyword> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::basic::ReservedKeyword, ::test__fixtures__basic__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::basic::ReservedKeyword, ::test__fixtures__basic__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::test::fixtures::basic::ReservedKeyword& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic::ReservedKeyword, ::test__fixtures__basic__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic::ReservedKeyword, ::test__fixtures__basic__module::NamespaceTag>> {
  PyObject* operator()(const ::test::fixtures::basic::ReservedKeyword& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::basic::UnionToBeRenamed, ::test__fixtures__basic__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::basic::UnionToBeRenamed, ::test__fixtures__basic__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::test::fixtures::basic::UnionToBeRenamed> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic::UnionToBeRenamed, ::test__fixtures__basic__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic::UnionToBeRenamed, ::test__fixtures__basic__module::NamespaceTag>> {
  ExtractorResult<::test::fixtures::basic::UnionToBeRenamed> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::basic::UnionToBeRenamed, ::test__fixtures__basic__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::basic::UnionToBeRenamed, ::test__fixtures__basic__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::test::fixtures::basic::UnionToBeRenamed& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic::UnionToBeRenamed, ::test__fixtures__basic__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic::UnionToBeRenamed, ::test__fixtures__basic__module::NamespaceTag>> {
  PyObject* operator()(const ::test::fixtures::basic::UnionToBeRenamed& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::basic::MyEnum, ::test__fixtures__basic__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::basic::MyEnum, ::test__fixtures__basic__module::NamespaceTag>> {
  ExtractorResult<::test::fixtures::basic::MyEnum> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::basic::MyEnum, ::test__fixtures__basic__module::NamespaceTag>> {
  PyObject* operator()(::test::fixtures::basic::MyEnum val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::basic::HackEnum, ::test__fixtures__basic__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::basic::HackEnum, ::test__fixtures__basic__module::NamespaceTag>> {
  ExtractorResult<::test::fixtures::basic::HackEnum> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::basic::HackEnum, ::test__fixtures__basic__module::NamespaceTag>> {
  PyObject* operator()(::test::fixtures::basic::HackEnum val);
};

} // namespace apache::thrift::python::capi
