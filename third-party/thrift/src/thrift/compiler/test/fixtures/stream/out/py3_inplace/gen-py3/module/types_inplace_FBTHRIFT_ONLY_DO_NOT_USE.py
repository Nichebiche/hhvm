#
# Autogenerated by Thrift for thrift/compiler/test/fixtures/stream/src/module.thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#

from __future__ import annotations

from collections.abc import Mapping, Sequence, Set
import enum
import importlib
from builtins import property as _python__property

import typing as _typing
import folly.iobuf as _fbthrift_iobuf
import thrift.py3.types
from thrift.py3.types import (
    _fbthrift__round_float32,
    _fbthrift__is_float32,
    _fbthrift__filter_kwargs,
)
import thrift.py3.exceptions
import thrift.python.exceptions
import thrift.python.types
import module.thrift_types as _fbthrift_python_types
import module.thrift_enums as _fbthrift_python_enums



def get_types_reflection():
    return importlib.import_module(
        "module.types_reflection"
    )

def _get_py_deprecated_module():
    import thrift.util.converter # needed by _to_py_deprecated() call
    return importlib.import_module("module.ttypes")

_fbthrift__module_name__ = "module.types"

__all__ = []

### Enums ###

### Union Enums ###

### Containers ###

### Structured Types ###
class FooStreamEx(thrift.py3.exceptions.GeneratedError):
    __module__ = _fbthrift__module_name__
    __slots__ = (
        "_fbthrift__inner",
    )
    _FBTHRIFT__PYTHON_CLASS = _fbthrift_python_types.FooStreamEx
    _FBTHRIFT__FIELD_NAMES = (
    )
    _fbthrift__inner : _fbthrift_python_types.FooStreamEx


    def __init__(self, *args, **kwargs) -> None:
        try:
            self._fbthrift__inner = _fbthrift_python_types.FooStreamEx(*args, **kwargs)
        except TypeError:
            kwargs = _fbthrift__filter_kwargs(kwargs, self._FBTHRIFT__FIELD_NAMES)
            self._fbthrift__inner = _fbthrift_python_types.FooStreamEx(*args, **kwargs)

        super(thrift.python.exceptions.Error, self).__init__(*(val for _, val in self))

    def __new__(cls, *args, **kwargs) -> FooStreamEx:
        instance = super().__new__(cls)
        return instance

    @staticmethod
    def from_python(thrift_python_inner: _fbthrift_python_types.FooStreamEx) -> FooStreamEx:
        inst = FooStreamEx.__new__(FooStreamEx)
        inst._fbthrift__inner = thrift_python_inner
        super(thrift.python.exceptions.Error, inst).__init__(*(val for _, val in inst))
        return inst

    def _to_py3(self) -> FooStreamEx:
        return self

    def _to_python(self) -> _fbthrift_python_types.FooStreamEx:
        return self._fbthrift__inner

    def _to_py_deprecated(self):
        py_deprecated_types = _get_py_deprecated_module()
        return thrift.util.converter.to_py_struct(py_deprecated_types.FooStreamEx, self)

    def _fbthrift__isset(self) -> dict[str, bool]:
        return thrift.python.types.isset(self._fbthrift__inner)

    @staticmethod
    def __get_reflection__():
        return get_types_reflection().get_reflection__FooStreamEx()

    @staticmethod
    def __get_metadata__():
        return FooStreamEx._FBTHRIFT__PYTHON_CLASS.__get_metadata__()

    @staticmethod
    def __get_thrift_name__():
        return "module.FooStreamEx"


    @classmethod
    def _fbthrift_get_field_name_by_index(cls, idx: int) -> str:
        return cls._FBTHRIFT__FIELD_NAMES[idx]

    @classmethod
    def _fbthrift_get_struct_size(cls) -> int:
        return 0

    def __eq__(self, other):
        if type(self) != type(other):
            return False

        for (_, self_val), (_, other_val) in zip(self, other):
            if self_val != other_val:
                return False
        return True


    def __lt__(self, other):
        if not isinstance(other, FooStreamEx):
            return NotImplemented
        return self._fbthrift__inner < other._fbthrift__inner

    def __le__(self, other):
        if not isinstance(other, FooStreamEx):
            return NotImplemented
        return self._fbthrift__inner <= other._fbthrift__inner


    def __str__(self):
        return super().__str__()

    def __hash__(self):
        return super().__hash__()

    def __copy__(self):
        return self


__all__.append("FooStreamEx")

class FooEx(thrift.py3.exceptions.GeneratedError):
    __module__ = _fbthrift__module_name__
    __slots__ = (
        "_fbthrift__inner",
    )
    _FBTHRIFT__PYTHON_CLASS = _fbthrift_python_types.FooEx
    _FBTHRIFT__FIELD_NAMES = (
    )
    _fbthrift__inner : _fbthrift_python_types.FooEx


    def __init__(self, *args, **kwargs) -> None:
        try:
            self._fbthrift__inner = _fbthrift_python_types.FooEx(*args, **kwargs)
        except TypeError:
            kwargs = _fbthrift__filter_kwargs(kwargs, self._FBTHRIFT__FIELD_NAMES)
            self._fbthrift__inner = _fbthrift_python_types.FooEx(*args, **kwargs)

        super(thrift.python.exceptions.Error, self).__init__(*(val for _, val in self))

    def __new__(cls, *args, **kwargs) -> FooEx:
        instance = super().__new__(cls)
        return instance

    @staticmethod
    def from_python(thrift_python_inner: _fbthrift_python_types.FooEx) -> FooEx:
        inst = FooEx.__new__(FooEx)
        inst._fbthrift__inner = thrift_python_inner
        super(thrift.python.exceptions.Error, inst).__init__(*(val for _, val in inst))
        return inst

    def _to_py3(self) -> FooEx:
        return self

    def _to_python(self) -> _fbthrift_python_types.FooEx:
        return self._fbthrift__inner

    def _to_py_deprecated(self):
        py_deprecated_types = _get_py_deprecated_module()
        return thrift.util.converter.to_py_struct(py_deprecated_types.FooEx, self)

    def _fbthrift__isset(self) -> dict[str, bool]:
        return thrift.python.types.isset(self._fbthrift__inner)

    @staticmethod
    def __get_reflection__():
        return get_types_reflection().get_reflection__FooEx()

    @staticmethod
    def __get_metadata__():
        return FooEx._FBTHRIFT__PYTHON_CLASS.__get_metadata__()

    @staticmethod
    def __get_thrift_name__():
        return "module.FooEx"


    @classmethod
    def _fbthrift_get_field_name_by_index(cls, idx: int) -> str:
        return cls._FBTHRIFT__FIELD_NAMES[idx]

    @classmethod
    def _fbthrift_get_struct_size(cls) -> int:
        return 0

    def __eq__(self, other):
        if type(self) != type(other):
            return False

        for (_, self_val), (_, other_val) in zip(self, other):
            if self_val != other_val:
                return False
        return True


    def __lt__(self, other):
        if not isinstance(other, FooEx):
            return NotImplemented
        return self._fbthrift__inner < other._fbthrift__inner

    def __le__(self, other):
        if not isinstance(other, FooEx):
            return NotImplemented
        return self._fbthrift__inner <= other._fbthrift__inner


    def __str__(self):
        return super().__str__()

    def __hash__(self):
        return super().__hash__()

    def __copy__(self):
        return self


__all__.append("FooEx")

class FooEx2(thrift.py3.exceptions.GeneratedError):
    __module__ = _fbthrift__module_name__
    __slots__ = (
        "_fbthrift__inner",
    )
    _FBTHRIFT__PYTHON_CLASS = _fbthrift_python_types.FooEx2
    _FBTHRIFT__FIELD_NAMES = (
    )
    _fbthrift__inner : _fbthrift_python_types.FooEx2


    def __init__(self, *args, **kwargs) -> None:
        try:
            self._fbthrift__inner = _fbthrift_python_types.FooEx2(*args, **kwargs)
        except TypeError:
            kwargs = _fbthrift__filter_kwargs(kwargs, self._FBTHRIFT__FIELD_NAMES)
            self._fbthrift__inner = _fbthrift_python_types.FooEx2(*args, **kwargs)

        super(thrift.python.exceptions.Error, self).__init__(*(val for _, val in self))

    def __new__(cls, *args, **kwargs) -> FooEx2:
        instance = super().__new__(cls)
        return instance

    @staticmethod
    def from_python(thrift_python_inner: _fbthrift_python_types.FooEx2) -> FooEx2:
        inst = FooEx2.__new__(FooEx2)
        inst._fbthrift__inner = thrift_python_inner
        super(thrift.python.exceptions.Error, inst).__init__(*(val for _, val in inst))
        return inst

    def _to_py3(self) -> FooEx2:
        return self

    def _to_python(self) -> _fbthrift_python_types.FooEx2:
        return self._fbthrift__inner

    def _to_py_deprecated(self):
        py_deprecated_types = _get_py_deprecated_module()
        return thrift.util.converter.to_py_struct(py_deprecated_types.FooEx2, self)

    def _fbthrift__isset(self) -> dict[str, bool]:
        return thrift.python.types.isset(self._fbthrift__inner)

    @staticmethod
    def __get_reflection__():
        return get_types_reflection().get_reflection__FooEx2()

    @staticmethod
    def __get_metadata__():
        return FooEx2._FBTHRIFT__PYTHON_CLASS.__get_metadata__()

    @staticmethod
    def __get_thrift_name__():
        return "module.FooEx2"


    @classmethod
    def _fbthrift_get_field_name_by_index(cls, idx: int) -> str:
        return cls._FBTHRIFT__FIELD_NAMES[idx]

    @classmethod
    def _fbthrift_get_struct_size(cls) -> int:
        return 0

    def __eq__(self, other):
        if type(self) != type(other):
            return False

        for (_, self_val), (_, other_val) in zip(self, other):
            if self_val != other_val:
                return False
        return True


    def __lt__(self, other):
        if not isinstance(other, FooEx2):
            return NotImplemented
        return self._fbthrift__inner < other._fbthrift__inner

    def __le__(self, other):
        if not isinstance(other, FooEx2):
            return NotImplemented
        return self._fbthrift__inner <= other._fbthrift__inner


    def __str__(self):
        return super().__str__()

    def __hash__(self):
        return super().__hash__()

    def __copy__(self):
        return self


__all__.append("FooEx2")


### Constants
