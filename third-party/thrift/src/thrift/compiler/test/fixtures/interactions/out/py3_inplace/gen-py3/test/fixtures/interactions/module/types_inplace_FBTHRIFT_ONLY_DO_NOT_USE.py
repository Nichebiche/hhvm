#
# Autogenerated by Thrift for thrift/compiler/test/fixtures/interactions/src/module.thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#

from __future__ import annotations

from collections.abc import Mapping, Sequence, Set
import enum
import importlib
from builtins import property as _python__property

import typing as _typing
import folly.iobuf as _fbthrift_iobuf
import thrift.py3.types
from thrift.py3.types import (
    _fbthrift__round_float32,
    _fbthrift__is_float32,
    _fbthrift__filter_kwargs,
)
import thrift.py3.exceptions
import thrift.python.exceptions
import thrift.python.types
import test.fixtures.interactions.module.thrift_types as _fbthrift_python_types
import test.fixtures.interactions.module.thrift_enums as _fbthrift_python_enums


import test.fixtures.another_interactions.shared.types_inplace_FBTHRIFT_ONLY_DO_NOT_USE as _test_fixtures_another_interactions_shared_types

def get_types_reflection():
    return importlib.import_module(
        "test.fixtures.interactions.module.types_reflection"
    )

def _get_py_deprecated_module():
    import thrift.util.converter # needed by _to_py_deprecated() call
    return importlib.import_module("test.fixtures.interactions.ttypes")

_fbthrift__module_name__ = "test.fixtures.interactions.module.types"

__all__ = []

### Enums ###

### Union Enums ###

### Containers ###

### Structured Types ###
class CustomException(thrift.py3.exceptions.GeneratedError):
    __module__ = _fbthrift__module_name__
    __slots__ = (
        "_fbthrift__inner",
    )
    _FBTHRIFT__PYTHON_CLASS = _fbthrift_python_types.CustomException
    _FBTHRIFT__FIELD_NAMES = (
        "message",
    )
    _fbthrift__inner : _fbthrift_python_types.CustomException


    def __init__(self, *args, **kwargs) -> None:
        try:
            self._fbthrift__inner = _fbthrift_python_types.CustomException(*args, **kwargs)
        except TypeError:
            kwargs = _fbthrift__filter_kwargs(kwargs, self._FBTHRIFT__FIELD_NAMES)
            self._fbthrift__inner = _fbthrift_python_types.CustomException(*args, **kwargs)

        super(thrift.python.exceptions.Error, self).__init__(*(val for _, val in self))

    def __new__(cls, *args, **kwargs) -> CustomException:
        instance = super().__new__(cls)
        return instance

    @staticmethod
    def from_python(thrift_python_inner: _fbthrift_python_types.CustomException) -> CustomException:
        inst = CustomException.__new__(CustomException)
        inst._fbthrift__inner = thrift_python_inner
        super(thrift.python.exceptions.Error, inst).__init__(*(val for _, val in inst))
        return inst

    def _to_py3(self) -> CustomException:
        return self

    def _to_python(self) -> _fbthrift_python_types.CustomException:
        return self._fbthrift__inner

    def _to_py_deprecated(self):
        py_deprecated_types = _get_py_deprecated_module()
        return thrift.util.converter.to_py_struct(py_deprecated_types.CustomException, self)

    def _fbthrift__isset(self) -> dict[str, bool]:
        return thrift.python.types.isset(self._fbthrift__inner)

    @staticmethod
    def __get_reflection__():
        return get_types_reflection().get_reflection__CustomException()

    @staticmethod
    def __get_metadata__():
        return CustomException._FBTHRIFT__PYTHON_CLASS.__get_metadata__()

    @staticmethod
    def __get_thrift_name__():
        return "module.CustomException"

    @_python__property
    def message(self) -> str:
        return self._fbthrift__inner.message


    @classmethod
    def _fbthrift_get_field_name_by_index(cls, idx: int) -> str:
        return cls._FBTHRIFT__FIELD_NAMES[idx]

    @classmethod
    def _fbthrift_get_struct_size(cls) -> int:
        return 1

    def __eq__(self, other):
        if type(self) != type(other):
            return False

        for (_, self_val), (_, other_val) in zip(self, other):
            if self_val != other_val:
                return False
        return True


    def __lt__(self, other):
        if not isinstance(other, CustomException):
            return NotImplemented
        return self._fbthrift__inner < other._fbthrift__inner

    def __le__(self, other):
        if not isinstance(other, CustomException):
            return NotImplemented
        return self._fbthrift__inner <= other._fbthrift__inner


    def __str__(self):
        return super().__str__()

    def __hash__(self):
        return super().__hash__()

    def __copy__(self):
        return self


__all__.append("CustomException")

class ShouldBeBoxed(thrift.py3.types.Struct):
    __module__ = _fbthrift__module_name__
    __slots__ = (
        "_fbthrift__inner",
    )
    _FBTHRIFT__PYTHON_CLASS = _fbthrift_python_types.ShouldBeBoxed
    _FBTHRIFT__FIELD_NAMES = (
        "sessionId",
    )
    _fbthrift__inner : _fbthrift_python_types.ShouldBeBoxed


    def __init__(self, *args, **kwargs) -> None:
        try:
            self._fbthrift__inner = _fbthrift_python_types.ShouldBeBoxed(*args, **kwargs)
        except TypeError:
            kwargs = _fbthrift__filter_kwargs(kwargs, self._FBTHRIFT__FIELD_NAMES)
            self._fbthrift__inner = _fbthrift_python_types.ShouldBeBoxed(*args, **kwargs)


    def __new__(cls, *args, **kwargs) -> ShouldBeBoxed:
        instance = super().__new__(cls)
        return instance

    def __call__(self, **kwargs) -> ShouldBeBoxed:
        return ShouldBeBoxed.from_python(self._fbthrift__inner(**kwargs))

    @staticmethod
    def from_python(thrift_python_inner: _fbthrift_python_types.ShouldBeBoxed) -> ShouldBeBoxed:
        inst = ShouldBeBoxed.__new__(ShouldBeBoxed)
        inst._fbthrift__inner = thrift_python_inner
        return inst

    def _to_py3(self) -> ShouldBeBoxed:
        return self

    def _to_python(self) -> _fbthrift_python_types.ShouldBeBoxed:
        return self._fbthrift__inner

    def _to_py_deprecated(self):
        py_deprecated_types = _get_py_deprecated_module()
        return thrift.util.converter.to_py_struct(py_deprecated_types.ShouldBeBoxed, self)

    def _fbthrift__isset(self) -> dict[str, bool]:
        return thrift.python.types.isset(self._fbthrift__inner)

    @staticmethod
    def __get_reflection__():
        return get_types_reflection().get_reflection__ShouldBeBoxed()

    @staticmethod
    def __get_metadata__():
        return ShouldBeBoxed._FBTHRIFT__PYTHON_CLASS.__get_metadata__()

    @staticmethod
    def __get_thrift_name__():
        return "module.ShouldBeBoxed"

    @_python__property
    def sessionId(self) -> str:
        return self._fbthrift__inner.sessionId


    @classmethod
    def _fbthrift_get_field_name_by_index(cls, idx: int) -> str:
        return cls._FBTHRIFT__FIELD_NAMES[idx]

    @classmethod
    def _fbthrift_get_struct_size(cls) -> int:
        return 1

    def __eq__(self, other):
        if type(self) != type(other):
            return False

        for (_, self_val), (_, other_val) in zip(self, other):
            if self_val != other_val:
                return False
        return True


    def __lt__(self, other):
        if not isinstance(other, ShouldBeBoxed):
            return NotImplemented
        return self._fbthrift__inner < other._fbthrift__inner

    def __le__(self, other):
        if not isinstance(other, ShouldBeBoxed):
            return NotImplemented
        return self._fbthrift__inner <= other._fbthrift__inner


    def __hash__(self):
        return super().__hash__()

    def __copy__(self):
        return self


__all__.append("ShouldBeBoxed")


### Constants
