#
# Autogenerated by Thrift for shared.thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#

from __future__ import annotations

from collections.abc import Mapping, Sequence, Set
import enum
import importlib
from builtins import property as _python__property

import typing as _typing
import folly.iobuf as _fbthrift_iobuf
import thrift.py3.types
from thrift.py3.types import (
    _fbthrift__round_float32,
    _fbthrift__is_float32,
    _fbthrift__filter_kwargs,
)
import thrift.py3.exceptions
import thrift.python.exceptions
import thrift.python.types
import test.fixtures.another_interactions.shared.thrift_types as _fbthrift_python_types
import test.fixtures.another_interactions.shared.thrift_enums as _fbthrift_python_enums



def get_types_reflection():
    return importlib.import_module(
        "test.fixtures.another_interactions.shared.types_reflection"
    )

def _get_py_deprecated_module():
    import thrift.util.converter # needed by _to_py_deprecated() call
    return importlib.import_module("test.fixtures.another_interactions.ttypes")

_fbthrift__module_name__ = "test.fixtures.another_interactions.shared.types"

__all__ = []

### Enums ###

### Union Enums ###

### Containers ###

### Structured Types ###
class DoSomethingResult(thrift.py3.types.Struct):
    __module__ = _fbthrift__module_name__
    __slots__ = (
        "_fbthrift__inner",
    )
    _FBTHRIFT__PYTHON_CLASS = _fbthrift_python_types.DoSomethingResult
    _FBTHRIFT__FIELD_NAMES = (
        "s_res",
        "i_res",
    )
    _fbthrift__inner : _fbthrift_python_types.DoSomethingResult


    def __init__(self, *args, **kwargs) -> None:
        try:
            self._fbthrift__inner = _fbthrift_python_types.DoSomethingResult(*args, **kwargs)
        except TypeError:
            kwargs = _fbthrift__filter_kwargs(kwargs, self._FBTHRIFT__FIELD_NAMES)
            self._fbthrift__inner = _fbthrift_python_types.DoSomethingResult(*args, **kwargs)


    def __new__(cls, *args, **kwargs) -> DoSomethingResult:
        instance = super().__new__(cls)
        return instance

    def __call__(self, **kwargs) -> DoSomethingResult:
        return DoSomethingResult.from_python(self._fbthrift__inner(**kwargs))

    @staticmethod
    def from_python(thrift_python_inner: _fbthrift_python_types.DoSomethingResult) -> DoSomethingResult:
        inst = DoSomethingResult.__new__(DoSomethingResult)
        inst._fbthrift__inner = thrift_python_inner
        return inst

    def _to_py3(self) -> DoSomethingResult:
        return self

    def _to_python(self) -> _fbthrift_python_types.DoSomethingResult:
        return self._fbthrift__inner

    def _to_py_deprecated(self):
        py_deprecated_types = _get_py_deprecated_module()
        return thrift.util.converter.to_py_struct(py_deprecated_types.DoSomethingResult, self)

    def _fbthrift__isset(self) -> dict[str, bool]:
        return thrift.python.types.isset(self._fbthrift__inner)

    @staticmethod
    def __get_reflection__():
        return get_types_reflection().get_reflection__DoSomethingResult()

    @staticmethod
    def __get_metadata__():
        return DoSomethingResult._FBTHRIFT__PYTHON_CLASS.__get_metadata__()

    @staticmethod
    def __get_thrift_name__():
        return "shared.DoSomethingResult"

    @_python__property
    def s_res(self) -> str:
        return self._fbthrift__inner.s_res

    @_python__property
    def i_res(self) -> int:
        return self._fbthrift__inner.i_res


    @classmethod
    def _fbthrift_get_field_name_by_index(cls, idx: int) -> str:
        return cls._FBTHRIFT__FIELD_NAMES[idx]

    @classmethod
    def _fbthrift_get_struct_size(cls) -> int:
        return 2

    def __eq__(self, other):
        if type(self) != type(other):
            return False

        for (_, self_val), (_, other_val) in zip(self, other):
            if self_val != other_val:
                return False
        return True


    def __lt__(self, other):
        if not isinstance(other, DoSomethingResult):
            return NotImplemented
        return self._fbthrift__inner < other._fbthrift__inner

    def __le__(self, other):
        if not isinstance(other, DoSomethingResult):
            return NotImplemented
        return self._fbthrift__inner <= other._fbthrift__inner


    def __hash__(self):
        return super().__hash__()

    def __copy__(self):
        return self


__all__.append("DoSomethingResult")


### Constants
