
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT
 *  @generated
 *
 */

#pragma once

#include <thrift/lib/python/capi/constructor.h>
#include <thrift/lib/python/capi/extractor.h>

#include <thrift/compiler/test/fixtures/python_capi/gen-cpp2/containers_types.h>

namespace test__fixtures__python_capi__containers {

struct NamespaceTag {};

} // namespace test__fixtures__python_capi__containers

namespace apache::thrift::python::capi {
template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::TemplateLists, ::test__fixtures__python_capi__containers::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::TemplateLists, ::test__fixtures__python_capi__containers::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::test::fixtures::python_capi::TemplateLists> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::TemplateLists, ::test__fixtures__python_capi__containers::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::TemplateLists, ::test__fixtures__python_capi__containers::NamespaceTag>> {
  ExtractorResult<::test::fixtures::python_capi::TemplateLists> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::TemplateLists, ::test__fixtures__python_capi__containers::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::TemplateLists, ::test__fixtures__python_capi__containers::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::test::fixtures::python_capi::TemplateLists& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::TemplateLists, ::test__fixtures__python_capi__containers::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::TemplateLists, ::test__fixtures__python_capi__containers::NamespaceTag>> {
  PyObject* operator()(const ::test::fixtures::python_capi::TemplateLists& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::TemplateSets, ::test__fixtures__python_capi__containers::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::TemplateSets, ::test__fixtures__python_capi__containers::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::test::fixtures::python_capi::TemplateSets> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::TemplateSets, ::test__fixtures__python_capi__containers::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::TemplateSets, ::test__fixtures__python_capi__containers::NamespaceTag>> {
  ExtractorResult<::test::fixtures::python_capi::TemplateSets> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::TemplateSets, ::test__fixtures__python_capi__containers::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::TemplateSets, ::test__fixtures__python_capi__containers::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::test::fixtures::python_capi::TemplateSets& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::TemplateSets, ::test__fixtures__python_capi__containers::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::TemplateSets, ::test__fixtures__python_capi__containers::NamespaceTag>> {
  PyObject* operator()(const ::test::fixtures::python_capi::TemplateSets& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::TemplateMaps, ::test__fixtures__python_capi__containers::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::TemplateMaps, ::test__fixtures__python_capi__containers::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::test::fixtures::python_capi::TemplateMaps> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::TemplateMaps, ::test__fixtures__python_capi__containers::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::TemplateMaps, ::test__fixtures__python_capi__containers::NamespaceTag>> {
  ExtractorResult<::test::fixtures::python_capi::TemplateMaps> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::TemplateMaps, ::test__fixtures__python_capi__containers::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::TemplateMaps, ::test__fixtures__python_capi__containers::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::test::fixtures::python_capi::TemplateMaps& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::TemplateMaps, ::test__fixtures__python_capi__containers::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::TemplateMaps, ::test__fixtures__python_capi__containers::NamespaceTag>> {
  PyObject* operator()(const ::test::fixtures::python_capi::TemplateMaps& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::TWrapped, ::test__fixtures__python_capi__containers::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::TWrapped, ::test__fixtures__python_capi__containers::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::test::fixtures::python_capi::TWrapped> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::TWrapped, ::test__fixtures__python_capi__containers::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::TWrapped, ::test__fixtures__python_capi__containers::NamespaceTag>> {
  ExtractorResult<::test::fixtures::python_capi::TWrapped> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::TWrapped, ::test__fixtures__python_capi__containers::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::TWrapped, ::test__fixtures__python_capi__containers::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::test::fixtures::python_capi::TWrapped& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::TWrapped, ::test__fixtures__python_capi__containers::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::TWrapped, ::test__fixtures__python_capi__containers::NamespaceTag>> {
  PyObject* operator()(const ::test::fixtures::python_capi::TWrapped& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::IndirectionA, ::test__fixtures__python_capi__containers::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::IndirectionA, ::test__fixtures__python_capi__containers::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::test::fixtures::python_capi::IndirectionA> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::IndirectionA, ::test__fixtures__python_capi__containers::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::IndirectionA, ::test__fixtures__python_capi__containers::NamespaceTag>> {
  ExtractorResult<::test::fixtures::python_capi::IndirectionA> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::IndirectionA, ::test__fixtures__python_capi__containers::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::IndirectionA, ::test__fixtures__python_capi__containers::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::test::fixtures::python_capi::IndirectionA& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::IndirectionA, ::test__fixtures__python_capi__containers::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::IndirectionA, ::test__fixtures__python_capi__containers::NamespaceTag>> {
  PyObject* operator()(const ::test::fixtures::python_capi::IndirectionA& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::IndirectionB, ::test__fixtures__python_capi__containers::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::IndirectionB, ::test__fixtures__python_capi__containers::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::test::fixtures::python_capi::IndirectionB> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::IndirectionB, ::test__fixtures__python_capi__containers::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::IndirectionB, ::test__fixtures__python_capi__containers::NamespaceTag>> {
  ExtractorResult<::test::fixtures::python_capi::IndirectionB> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::IndirectionB, ::test__fixtures__python_capi__containers::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::IndirectionB, ::test__fixtures__python_capi__containers::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::test::fixtures::python_capi::IndirectionB& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::IndirectionB, ::test__fixtures__python_capi__containers::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::IndirectionB, ::test__fixtures__python_capi__containers::NamespaceTag>> {
  PyObject* operator()(const ::test::fixtures::python_capi::IndirectionB& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::IndirectionC, ::test__fixtures__python_capi__containers::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::IndirectionC, ::test__fixtures__python_capi__containers::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::test::fixtures::python_capi::IndirectionC> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::IndirectionC, ::test__fixtures__python_capi__containers::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::IndirectionC, ::test__fixtures__python_capi__containers::NamespaceTag>> {
  ExtractorResult<::test::fixtures::python_capi::IndirectionC> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::IndirectionC, ::test__fixtures__python_capi__containers::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::IndirectionC, ::test__fixtures__python_capi__containers::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::test::fixtures::python_capi::IndirectionC& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::IndirectionC, ::test__fixtures__python_capi__containers::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::IndirectionC, ::test__fixtures__python_capi__containers::NamespaceTag>> {
  PyObject* operator()(const ::test::fixtures::python_capi::IndirectionC& val);
};

} // namespace apache::thrift::python::capi
