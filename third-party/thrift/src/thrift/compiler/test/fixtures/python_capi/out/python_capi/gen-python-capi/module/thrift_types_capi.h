
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT
 *  @generated
 *
 */

#pragma once

#include <thrift/lib/python/capi/constructor.h>
#include <thrift/lib/python/capi/extractor.h>

#include <thrift/compiler/test/fixtures/python_capi/gen-cpp2/module_types.h>

namespace test__fixtures__python_capi__module {

struct NamespaceTag {};

} // namespace test__fixtures__python_capi__module

namespace apache::thrift::python::capi {
template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::MyStruct, ::test__fixtures__python_capi__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::MyStruct, ::test__fixtures__python_capi__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::test::fixtures::python_capi::MyStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::MyStruct, ::test__fixtures__python_capi__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::MyStruct, ::test__fixtures__python_capi__module::NamespaceTag>> {
  ExtractorResult<::test::fixtures::python_capi::MyStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::MyStruct, ::test__fixtures__python_capi__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::MyStruct, ::test__fixtures__python_capi__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::test::fixtures::python_capi::MyStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::MyStruct, ::test__fixtures__python_capi__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::MyStruct, ::test__fixtures__python_capi__module::NamespaceTag>> {
  PyObject* operator()(const ::test::fixtures::python_capi::MyStruct& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::MyDataItem, ::test__fixtures__python_capi__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::MyDataItem, ::test__fixtures__python_capi__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::test::fixtures::python_capi::MyDataItem> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::MyDataItem, ::test__fixtures__python_capi__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::MyDataItem, ::test__fixtures__python_capi__module::NamespaceTag>> {
  ExtractorResult<::test::fixtures::python_capi::MyDataItem> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::MyDataItem, ::test__fixtures__python_capi__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::MyDataItem, ::test__fixtures__python_capi__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::test::fixtures::python_capi::MyDataItem& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::MyDataItem, ::test__fixtures__python_capi__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::MyDataItem, ::test__fixtures__python_capi__module::NamespaceTag>> {
  PyObject* operator()(const ::test::fixtures::python_capi::MyDataItem& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::TransitiveDoubler, ::test__fixtures__python_capi__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::TransitiveDoubler, ::test__fixtures__python_capi__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::test::fixtures::python_capi::TransitiveDoubler> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::TransitiveDoubler, ::test__fixtures__python_capi__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::TransitiveDoubler, ::test__fixtures__python_capi__module::NamespaceTag>> {
  ExtractorResult<::test::fixtures::python_capi::TransitiveDoubler> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::TransitiveDoubler, ::test__fixtures__python_capi__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::TransitiveDoubler, ::test__fixtures__python_capi__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::test::fixtures::python_capi::TransitiveDoubler& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::TransitiveDoubler, ::test__fixtures__python_capi__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::TransitiveDoubler, ::test__fixtures__python_capi__module::NamespaceTag>> {
  PyObject* operator()(const ::test::fixtures::python_capi::TransitiveDoubler& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::detail::DoubledPair, ::test__fixtures__python_capi__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::detail::DoubledPair, ::test__fixtures__python_capi__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::test::fixtures::python_capi::detail::DoubledPair> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::detail::DoubledPair, ::test__fixtures__python_capi__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::detail::DoubledPair, ::test__fixtures__python_capi__module::NamespaceTag>> {
  ExtractorResult<::test::fixtures::python_capi::detail::DoubledPair> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::detail::DoubledPair, ::test__fixtures__python_capi__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::detail::DoubledPair, ::test__fixtures__python_capi__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::test::fixtures::python_capi::detail::DoubledPair& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::detail::DoubledPair, ::test__fixtures__python_capi__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::detail::DoubledPair, ::test__fixtures__python_capi__module::NamespaceTag>> {
  PyObject* operator()(const ::test::fixtures::python_capi::detail::DoubledPair& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::StringPair, ::test__fixtures__python_capi__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::StringPair, ::test__fixtures__python_capi__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::test::fixtures::python_capi::StringPair> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::StringPair, ::test__fixtures__python_capi__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::StringPair, ::test__fixtures__python_capi__module::NamespaceTag>> {
  ExtractorResult<::test::fixtures::python_capi::StringPair> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::StringPair, ::test__fixtures__python_capi__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::StringPair, ::test__fixtures__python_capi__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::test::fixtures::python_capi::StringPair& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::StringPair, ::test__fixtures__python_capi__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::StringPair, ::test__fixtures__python_capi__module::NamespaceTag>> {
  PyObject* operator()(const ::test::fixtures::python_capi::StringPair& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::VapidStruct, ::test__fixtures__python_capi__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::VapidStruct, ::test__fixtures__python_capi__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::test::fixtures::python_capi::VapidStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::VapidStruct, ::test__fixtures__python_capi__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::VapidStruct, ::test__fixtures__python_capi__module::NamespaceTag>> {
  ExtractorResult<::test::fixtures::python_capi::VapidStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::VapidStruct, ::test__fixtures__python_capi__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::VapidStruct, ::test__fixtures__python_capi__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::test::fixtures::python_capi::VapidStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::VapidStruct, ::test__fixtures__python_capi__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::VapidStruct, ::test__fixtures__python_capi__module::NamespaceTag>> {
  PyObject* operator()(const ::test::fixtures::python_capi::VapidStruct& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::PrimitiveStruct, ::test__fixtures__python_capi__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::PrimitiveStruct, ::test__fixtures__python_capi__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::test::fixtures::python_capi::PrimitiveStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::PrimitiveStruct, ::test__fixtures__python_capi__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::PrimitiveStruct, ::test__fixtures__python_capi__module::NamespaceTag>> {
  ExtractorResult<::test::fixtures::python_capi::PrimitiveStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::PrimitiveStruct, ::test__fixtures__python_capi__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::PrimitiveStruct, ::test__fixtures__python_capi__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::test::fixtures::python_capi::PrimitiveStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::PrimitiveStruct, ::test__fixtures__python_capi__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::PrimitiveStruct, ::test__fixtures__python_capi__module::NamespaceTag>> {
  PyObject* operator()(const ::test::fixtures::python_capi::PrimitiveStruct& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::AdaptedFields, ::test__fixtures__python_capi__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::AdaptedFields, ::test__fixtures__python_capi__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::test::fixtures::python_capi::AdaptedFields> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::AdaptedFields, ::test__fixtures__python_capi__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::AdaptedFields, ::test__fixtures__python_capi__module::NamespaceTag>> {
  ExtractorResult<::test::fixtures::python_capi::AdaptedFields> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::AdaptedFields, ::test__fixtures__python_capi__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::AdaptedFields, ::test__fixtures__python_capi__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::test::fixtures::python_capi::AdaptedFields& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::AdaptedFields, ::test__fixtures__python_capi__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::AdaptedFields, ::test__fixtures__python_capi__module::NamespaceTag>> {
  PyObject* operator()(const ::test::fixtures::python_capi::AdaptedFields& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::ListStruct, ::test__fixtures__python_capi__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::ListStruct, ::test__fixtures__python_capi__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::test::fixtures::python_capi::ListStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::ListStruct, ::test__fixtures__python_capi__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::ListStruct, ::test__fixtures__python_capi__module::NamespaceTag>> {
  ExtractorResult<::test::fixtures::python_capi::ListStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::ListStruct, ::test__fixtures__python_capi__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::ListStruct, ::test__fixtures__python_capi__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::test::fixtures::python_capi::ListStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::ListStruct, ::test__fixtures__python_capi__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::ListStruct, ::test__fixtures__python_capi__module::NamespaceTag>> {
  PyObject* operator()(const ::test::fixtures::python_capi::ListStruct& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::SetStruct, ::test__fixtures__python_capi__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::SetStruct, ::test__fixtures__python_capi__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::test::fixtures::python_capi::SetStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::SetStruct, ::test__fixtures__python_capi__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::SetStruct, ::test__fixtures__python_capi__module::NamespaceTag>> {
  ExtractorResult<::test::fixtures::python_capi::SetStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::SetStruct, ::test__fixtures__python_capi__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::SetStruct, ::test__fixtures__python_capi__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::test::fixtures::python_capi::SetStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::SetStruct, ::test__fixtures__python_capi__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::SetStruct, ::test__fixtures__python_capi__module::NamespaceTag>> {
  PyObject* operator()(const ::test::fixtures::python_capi::SetStruct& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::MapStruct, ::test__fixtures__python_capi__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::MapStruct, ::test__fixtures__python_capi__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::test::fixtures::python_capi::MapStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::MapStruct, ::test__fixtures__python_capi__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::MapStruct, ::test__fixtures__python_capi__module::NamespaceTag>> {
  ExtractorResult<::test::fixtures::python_capi::MapStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::MapStruct, ::test__fixtures__python_capi__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::MapStruct, ::test__fixtures__python_capi__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::test::fixtures::python_capi::MapStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::MapStruct, ::test__fixtures__python_capi__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::MapStruct, ::test__fixtures__python_capi__module::NamespaceTag>> {
  PyObject* operator()(const ::test::fixtures::python_capi::MapStruct& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::ComposeStruct, ::test__fixtures__python_capi__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::ComposeStruct, ::test__fixtures__python_capi__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::test::fixtures::python_capi::ComposeStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::ComposeStruct, ::test__fixtures__python_capi__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::ComposeStruct, ::test__fixtures__python_capi__module::NamespaceTag>> {
  ExtractorResult<::test::fixtures::python_capi::ComposeStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::ComposeStruct, ::test__fixtures__python_capi__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::ComposeStruct, ::test__fixtures__python_capi__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::test::fixtures::python_capi::ComposeStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::ComposeStruct, ::test__fixtures__python_capi__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::ComposeStruct, ::test__fixtures__python_capi__module::NamespaceTag>> {
  PyObject* operator()(const ::test::fixtures::python_capi::ComposeStruct& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::Shallot, ::test__fixtures__python_capi__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::Shallot, ::test__fixtures__python_capi__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::test::fixtures::python_capi::Shallot> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::Shallot, ::test__fixtures__python_capi__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::Shallot, ::test__fixtures__python_capi__module::NamespaceTag>> {
  ExtractorResult<::test::fixtures::python_capi::Shallot> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::Shallot, ::test__fixtures__python_capi__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::Shallot, ::test__fixtures__python_capi__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::test::fixtures::python_capi::Shallot& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::Shallot, ::test__fixtures__python_capi__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::Shallot, ::test__fixtures__python_capi__module::NamespaceTag>> {
  PyObject* operator()(const ::test::fixtures::python_capi::Shallot& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::SomeBinary, ::test__fixtures__python_capi__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::SomeBinary, ::test__fixtures__python_capi__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::test::fixtures::python_capi::SomeBinary> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::SomeBinary, ::test__fixtures__python_capi__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::SomeBinary, ::test__fixtures__python_capi__module::NamespaceTag>> {
  ExtractorResult<::test::fixtures::python_capi::SomeBinary> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::SomeBinary, ::test__fixtures__python_capi__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::SomeBinary, ::test__fixtures__python_capi__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::test::fixtures::python_capi::SomeBinary& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::SomeBinary, ::test__fixtures__python_capi__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::SomeBinary, ::test__fixtures__python_capi__module::NamespaceTag>> {
  PyObject* operator()(const ::test::fixtures::python_capi::SomeBinary& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::MyEnum, ::test__fixtures__python_capi__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::MyEnum, ::test__fixtures__python_capi__module::NamespaceTag>> {
  ExtractorResult<::test::fixtures::python_capi::MyEnum> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::MyEnum, ::test__fixtures__python_capi__module::NamespaceTag>> {
  PyObject* operator()(::test::fixtures::python_capi::MyEnum val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::NormalDecentEnum, ::test__fixtures__python_capi__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::NormalDecentEnum, ::test__fixtures__python_capi__module::NamespaceTag>> {
  ExtractorResult<::test::fixtures::python_capi::NormalDecentEnum> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::python_capi::NormalDecentEnum, ::test__fixtures__python_capi__module::NamespaceTag>> {
  PyObject* operator()(::test::fixtures::python_capi::NormalDecentEnum val);
};

} // namespace apache::thrift::python::capi
