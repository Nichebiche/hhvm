
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT
 *  @generated
 *
 */

#pragma once

#include <thrift/lib/python/capi/constructor.h>
#include <thrift/lib/python/capi/extractor.h>

#include <thrift/compiler/test/fixtures/enums/gen-cpp2/module_types.h>

namespace test__fixtures__enums__module {

struct NamespaceTag {};

} // namespace test__fixtures__enums__module

namespace apache::thrift::python::capi {
template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::enums::SomeStruct, ::test__fixtures__enums__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::enums::SomeStruct, ::test__fixtures__enums__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::test::fixtures::enums::SomeStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::enums::SomeStruct, ::test__fixtures__enums__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::enums::SomeStruct, ::test__fixtures__enums__module::NamespaceTag>> {
  ExtractorResult<::test::fixtures::enums::SomeStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::enums::SomeStruct, ::test__fixtures__enums__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::enums::SomeStruct, ::test__fixtures__enums__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::test::fixtures::enums::SomeStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::enums::SomeStruct, ::test__fixtures__enums__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::enums::SomeStruct, ::test__fixtures__enums__module::NamespaceTag>> {
  PyObject* operator()(const ::test::fixtures::enums::SomeStruct& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::enums::MyStruct, ::test__fixtures__enums__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::enums::MyStruct, ::test__fixtures__enums__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::test::fixtures::enums::MyStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::enums::MyStruct, ::test__fixtures__enums__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::enums::MyStruct, ::test__fixtures__enums__module::NamespaceTag>> {
  ExtractorResult<::test::fixtures::enums::MyStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::enums::MyStruct, ::test__fixtures__enums__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::enums::MyStruct, ::test__fixtures__enums__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::test::fixtures::enums::MyStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::enums::MyStruct, ::test__fixtures__enums__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::enums::MyStruct, ::test__fixtures__enums__module::NamespaceTag>> {
  PyObject* operator()(const ::test::fixtures::enums::MyStruct& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::enums::Metasyntactic, ::test__fixtures__enums__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::enums::Metasyntactic, ::test__fixtures__enums__module::NamespaceTag>> {
  ExtractorResult<::test::fixtures::enums::Metasyntactic> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::enums::Metasyntactic, ::test__fixtures__enums__module::NamespaceTag>> {
  PyObject* operator()(::test::fixtures::enums::Metasyntactic val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::enums::MyEnum1, ::test__fixtures__enums__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::enums::MyEnum1, ::test__fixtures__enums__module::NamespaceTag>> {
  ExtractorResult<::test::fixtures::enums::MyEnum1> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::enums::MyEnum1, ::test__fixtures__enums__module::NamespaceTag>> {
  PyObject* operator()(::test::fixtures::enums::MyEnum1 val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::enums::MyEnum2, ::test__fixtures__enums__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::enums::MyEnum2, ::test__fixtures__enums__module::NamespaceTag>> {
  ExtractorResult<::test::fixtures::enums::MyEnum2> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::enums::MyEnum2, ::test__fixtures__enums__module::NamespaceTag>> {
  PyObject* operator()(::test::fixtures::enums::MyEnum2 val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::enums::MyEnum3, ::test__fixtures__enums__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::enums::MyEnum3, ::test__fixtures__enums__module::NamespaceTag>> {
  ExtractorResult<::test::fixtures::enums::MyEnum3> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::enums::MyEnum3, ::test__fixtures__enums__module::NamespaceTag>> {
  PyObject* operator()(::test::fixtures::enums::MyEnum3 val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::enums::MyEnum4, ::test__fixtures__enums__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::enums::MyEnum4, ::test__fixtures__enums__module::NamespaceTag>> {
  ExtractorResult<::test::fixtures::enums::MyEnum4> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::enums::MyEnum4, ::test__fixtures__enums__module::NamespaceTag>> {
  PyObject* operator()(::test::fixtures::enums::MyEnum4 val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::enums::MyBitmaskEnum1, ::test__fixtures__enums__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::enums::MyBitmaskEnum1, ::test__fixtures__enums__module::NamespaceTag>> {
  ExtractorResult<::test::fixtures::enums::MyBitmaskEnum1> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::enums::MyBitmaskEnum1, ::test__fixtures__enums__module::NamespaceTag>> {
  PyObject* operator()(::test::fixtures::enums::MyBitmaskEnum1 val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::enums::MyBitmaskEnum2, ::test__fixtures__enums__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::enums::MyBitmaskEnum2, ::test__fixtures__enums__module::NamespaceTag>> {
  ExtractorResult<::test::fixtures::enums::MyBitmaskEnum2> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::test::fixtures::enums::MyBitmaskEnum2, ::test__fixtures__enums__module::NamespaceTag>> {
  PyObject* operator()(::test::fixtures::enums::MyBitmaskEnum2 val);
};

} // namespace apache::thrift::python::capi
