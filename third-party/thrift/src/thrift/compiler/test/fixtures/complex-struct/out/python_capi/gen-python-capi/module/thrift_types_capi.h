
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT
 *  @generated
 *
 */

#pragma once

#include <thrift/lib/python/capi/constructor.h>
#include <thrift/lib/python/capi/extractor.h>

#include <thrift/compiler/test/fixtures/complex-struct/gen-cpp2/module_types.h>

namespace module {

struct NamespaceTag {};

} // namespace module

namespace apache::thrift::python::capi {
template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::cpp2::MyStructFloatFieldThrowExp, ::module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::cpp2::MyStructFloatFieldThrowExp, ::module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::cpp2::MyStructFloatFieldThrowExp> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::MyStructFloatFieldThrowExp, ::module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::MyStructFloatFieldThrowExp, ::module::NamespaceTag>> {
  ExtractorResult<::cpp2::MyStructFloatFieldThrowExp> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::cpp2::MyStructFloatFieldThrowExp, ::module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::cpp2::MyStructFloatFieldThrowExp, ::module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::cpp2::MyStructFloatFieldThrowExp& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::MyStructFloatFieldThrowExp, ::module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::MyStructFloatFieldThrowExp, ::module::NamespaceTag>> {
  PyObject* operator()(const ::cpp2::MyStructFloatFieldThrowExp& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::cpp2::MyStructMapFloatThrowExp, ::module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::cpp2::MyStructMapFloatThrowExp, ::module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::cpp2::MyStructMapFloatThrowExp> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::MyStructMapFloatThrowExp, ::module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::MyStructMapFloatThrowExp, ::module::NamespaceTag>> {
  ExtractorResult<::cpp2::MyStructMapFloatThrowExp> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::cpp2::MyStructMapFloatThrowExp, ::module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::cpp2::MyStructMapFloatThrowExp, ::module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::cpp2::MyStructMapFloatThrowExp& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::MyStructMapFloatThrowExp, ::module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::MyStructMapFloatThrowExp, ::module::NamespaceTag>> {
  PyObject* operator()(const ::cpp2::MyStructMapFloatThrowExp& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::cpp2::MyStruct, ::module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::cpp2::MyStruct, ::module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::cpp2::MyStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::MyStruct, ::module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::MyStruct, ::module::NamespaceTag>> {
  ExtractorResult<::cpp2::MyStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::cpp2::MyStruct, ::module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::cpp2::MyStruct, ::module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::cpp2::MyStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::MyStruct, ::module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::MyStruct, ::module::NamespaceTag>> {
  PyObject* operator()(const ::cpp2::MyStruct& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::cpp2::SimpleStruct, ::module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::cpp2::SimpleStruct, ::module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::cpp2::SimpleStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::SimpleStruct, ::module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::SimpleStruct, ::module::NamespaceTag>> {
  ExtractorResult<::cpp2::SimpleStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::cpp2::SimpleStruct, ::module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::cpp2::SimpleStruct, ::module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::cpp2::SimpleStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::SimpleStruct, ::module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::SimpleStruct, ::module::NamespaceTag>> {
  PyObject* operator()(const ::cpp2::SimpleStruct& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::cpp2::defaultStruct, ::module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::cpp2::defaultStruct, ::module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::cpp2::defaultStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::defaultStruct, ::module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::defaultStruct, ::module::NamespaceTag>> {
  ExtractorResult<::cpp2::defaultStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::cpp2::defaultStruct, ::module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::cpp2::defaultStruct, ::module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::cpp2::defaultStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::defaultStruct, ::module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::defaultStruct, ::module::NamespaceTag>> {
  PyObject* operator()(const ::cpp2::defaultStruct& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::cpp2::MyStructTypeDef, ::module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::cpp2::MyStructTypeDef, ::module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::cpp2::MyStructTypeDef> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::MyStructTypeDef, ::module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::MyStructTypeDef, ::module::NamespaceTag>> {
  ExtractorResult<::cpp2::MyStructTypeDef> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::cpp2::MyStructTypeDef, ::module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::cpp2::MyStructTypeDef, ::module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::cpp2::MyStructTypeDef& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::MyStructTypeDef, ::module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::MyStructTypeDef, ::module::NamespaceTag>> {
  PyObject* operator()(const ::cpp2::MyStructTypeDef& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::cpp2::MyDataItem, ::module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::cpp2::MyDataItem, ::module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::cpp2::MyDataItem> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::MyDataItem, ::module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::MyDataItem, ::module::NamespaceTag>> {
  ExtractorResult<::cpp2::MyDataItem> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::cpp2::MyDataItem, ::module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::cpp2::MyDataItem, ::module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::cpp2::MyDataItem& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::MyDataItem, ::module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::MyDataItem, ::module::NamespaceTag>> {
  PyObject* operator()(const ::cpp2::MyDataItem& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::cpp2::MyUnion, ::module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::cpp2::MyUnion, ::module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::cpp2::MyUnion> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::MyUnion, ::module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::MyUnion, ::module::NamespaceTag>> {
  ExtractorResult<::cpp2::MyUnion> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::cpp2::MyUnion, ::module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::cpp2::MyUnion, ::module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::cpp2::MyUnion& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::MyUnion, ::module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::MyUnion, ::module::NamespaceTag>> {
  PyObject* operator()(const ::cpp2::MyUnion& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::cpp2::MyUnionFloatFieldThrowExp, ::module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::cpp2::MyUnionFloatFieldThrowExp, ::module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::cpp2::MyUnionFloatFieldThrowExp> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::MyUnionFloatFieldThrowExp, ::module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::MyUnionFloatFieldThrowExp, ::module::NamespaceTag>> {
  ExtractorResult<::cpp2::MyUnionFloatFieldThrowExp> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::cpp2::MyUnionFloatFieldThrowExp, ::module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::cpp2::MyUnionFloatFieldThrowExp, ::module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::cpp2::MyUnionFloatFieldThrowExp& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::MyUnionFloatFieldThrowExp, ::module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::MyUnionFloatFieldThrowExp, ::module::NamespaceTag>> {
  PyObject* operator()(const ::cpp2::MyUnionFloatFieldThrowExp& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::cpp2::ComplexNestedStruct, ::module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::cpp2::ComplexNestedStruct, ::module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::cpp2::ComplexNestedStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::ComplexNestedStruct, ::module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::ComplexNestedStruct, ::module::NamespaceTag>> {
  ExtractorResult<::cpp2::ComplexNestedStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::cpp2::ComplexNestedStruct, ::module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::cpp2::ComplexNestedStruct, ::module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::cpp2::ComplexNestedStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::ComplexNestedStruct, ::module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::ComplexNestedStruct, ::module::NamespaceTag>> {
  PyObject* operator()(const ::cpp2::ComplexNestedStruct& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::cpp2::TypeRemapped, ::module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::cpp2::TypeRemapped, ::module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::cpp2::TypeRemapped> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::TypeRemapped, ::module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::TypeRemapped, ::module::NamespaceTag>> {
  ExtractorResult<::cpp2::TypeRemapped> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::cpp2::TypeRemapped, ::module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::cpp2::TypeRemapped, ::module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::cpp2::TypeRemapped& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::TypeRemapped, ::module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::TypeRemapped, ::module::NamespaceTag>> {
  PyObject* operator()(const ::cpp2::TypeRemapped& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::cpp2::emptyXcep, ::module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::cpp2::emptyXcep, ::module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::cpp2::emptyXcep> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::emptyXcep, ::module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::emptyXcep, ::module::NamespaceTag>> {
  ExtractorResult<::cpp2::emptyXcep> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::cpp2::emptyXcep, ::module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::cpp2::emptyXcep, ::module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::cpp2::emptyXcep& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::emptyXcep, ::module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::emptyXcep, ::module::NamespaceTag>> {
  PyObject* operator()(const ::cpp2::emptyXcep& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::cpp2::reqXcep, ::module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::cpp2::reqXcep, ::module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::cpp2::reqXcep> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::reqXcep, ::module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::reqXcep, ::module::NamespaceTag>> {
  ExtractorResult<::cpp2::reqXcep> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::cpp2::reqXcep, ::module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::cpp2::reqXcep, ::module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::cpp2::reqXcep& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::reqXcep, ::module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::reqXcep, ::module::NamespaceTag>> {
  PyObject* operator()(const ::cpp2::reqXcep& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::cpp2::optXcep, ::module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::cpp2::optXcep, ::module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::cpp2::optXcep> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::optXcep, ::module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::optXcep, ::module::NamespaceTag>> {
  ExtractorResult<::cpp2::optXcep> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::cpp2::optXcep, ::module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::cpp2::optXcep, ::module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::cpp2::optXcep& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::optXcep, ::module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::optXcep, ::module::NamespaceTag>> {
  PyObject* operator()(const ::cpp2::optXcep& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::cpp2::complexException, ::module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::cpp2::complexException, ::module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::cpp2::complexException> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::complexException, ::module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::complexException, ::module::NamespaceTag>> {
  ExtractorResult<::cpp2::complexException> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::cpp2::complexException, ::module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::cpp2::complexException, ::module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::cpp2::complexException& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::complexException, ::module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::complexException, ::module::NamespaceTag>> {
  PyObject* operator()(const ::cpp2::complexException& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::cpp2::Containers, ::module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::cpp2::Containers, ::module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::cpp2::Containers> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::Containers, ::module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::Containers, ::module::NamespaceTag>> {
  ExtractorResult<::cpp2::Containers> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::cpp2::Containers, ::module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::cpp2::Containers, ::module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::cpp2::Containers& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::Containers, ::module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::Containers, ::module::NamespaceTag>> {
  PyObject* operator()(const ::cpp2::Containers& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::cpp2::MyEnum, ::module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::cpp2::MyEnum, ::module::NamespaceTag>> {
  ExtractorResult<::cpp2::MyEnum> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::cpp2::MyEnum, ::module::NamespaceTag>> {
  PyObject* operator()(::cpp2::MyEnum val);
};

} // namespace apache::thrift::python::capi
