
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT
 *  @generated
 *
 */

#pragma once

#include <thrift/lib/python/capi/constructor.h>
#include <thrift/lib/python/capi/extractor.h>

#include <thrift/compiler/test/fixtures/types/gen-cpp2/module_types.h>

namespace apache__thrift__fixtures__types__module {

struct NamespaceTag {};

} // namespace apache__thrift__fixtures__types__module

namespace apache::thrift::python::capi {
template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::empty_struct, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::empty_struct, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::apache::thrift::fixtures::types::empty_struct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::empty_struct, ::apache__thrift__fixtures__types__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::empty_struct, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  ExtractorResult<::apache::thrift::fixtures::types::empty_struct> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::empty_struct, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::empty_struct, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::apache::thrift::fixtures::types::empty_struct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::empty_struct, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::empty_struct, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  PyObject* operator()(const ::apache::thrift::fixtures::types::empty_struct& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::decorated_struct, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::decorated_struct, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::apache::thrift::fixtures::types::decorated_struct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::decorated_struct, ::apache__thrift__fixtures__types__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::decorated_struct, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  ExtractorResult<::apache::thrift::fixtures::types::decorated_struct> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::decorated_struct, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::decorated_struct, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::apache::thrift::fixtures::types::decorated_struct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::decorated_struct, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::decorated_struct, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  PyObject* operator()(const ::apache::thrift::fixtures::types::decorated_struct& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::ContainerStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::ContainerStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::apache::thrift::fixtures::types::ContainerStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::ContainerStruct, ::apache__thrift__fixtures__types__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::ContainerStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  ExtractorResult<::apache::thrift::fixtures::types::ContainerStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::ContainerStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::ContainerStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::apache::thrift::fixtures::types::ContainerStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::ContainerStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::ContainerStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  PyObject* operator()(const ::apache::thrift::fixtures::types::ContainerStruct& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::CppTypeStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::CppTypeStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::apache::thrift::fixtures::types::CppTypeStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::CppTypeStruct, ::apache__thrift__fixtures__types__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::CppTypeStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  ExtractorResult<::apache::thrift::fixtures::types::CppTypeStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::CppTypeStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::CppTypeStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::apache::thrift::fixtures::types::CppTypeStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::CppTypeStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::CppTypeStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  PyObject* operator()(const ::apache::thrift::fixtures::types::CppTypeStruct& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::VirtualStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::VirtualStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::apache::thrift::fixtures::types::VirtualStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::VirtualStruct, ::apache__thrift__fixtures__types__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::VirtualStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  ExtractorResult<::apache::thrift::fixtures::types::VirtualStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::VirtualStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::VirtualStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::apache::thrift::fixtures::types::VirtualStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::VirtualStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::VirtualStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  PyObject* operator()(const ::apache::thrift::fixtures::types::VirtualStruct& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::MyStructWithForwardRefEnum, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::MyStructWithForwardRefEnum, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::apache::thrift::fixtures::types::MyStructWithForwardRefEnum> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::MyStructWithForwardRefEnum, ::apache__thrift__fixtures__types__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::MyStructWithForwardRefEnum, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  ExtractorResult<::apache::thrift::fixtures::types::MyStructWithForwardRefEnum> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::MyStructWithForwardRefEnum, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::MyStructWithForwardRefEnum, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::apache::thrift::fixtures::types::MyStructWithForwardRefEnum& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::MyStructWithForwardRefEnum, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::MyStructWithForwardRefEnum, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  PyObject* operator()(const ::apache::thrift::fixtures::types::MyStructWithForwardRefEnum& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::TrivialNumeric, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::TrivialNumeric, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::apache::thrift::fixtures::types::TrivialNumeric> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::TrivialNumeric, ::apache__thrift__fixtures__types__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::TrivialNumeric, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  ExtractorResult<::apache::thrift::fixtures::types::TrivialNumeric> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::TrivialNumeric, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::TrivialNumeric, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::apache::thrift::fixtures::types::TrivialNumeric& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::TrivialNumeric, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::TrivialNumeric, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  PyObject* operator()(const ::apache::thrift::fixtures::types::TrivialNumeric& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::TrivialNestedWithDefault, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::TrivialNestedWithDefault, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::apache::thrift::fixtures::types::TrivialNestedWithDefault> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::TrivialNestedWithDefault, ::apache__thrift__fixtures__types__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::TrivialNestedWithDefault, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  ExtractorResult<::apache::thrift::fixtures::types::TrivialNestedWithDefault> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::TrivialNestedWithDefault, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::TrivialNestedWithDefault, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::apache::thrift::fixtures::types::TrivialNestedWithDefault& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::TrivialNestedWithDefault, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::TrivialNestedWithDefault, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  PyObject* operator()(const ::apache::thrift::fixtures::types::TrivialNestedWithDefault& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::ComplexString, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::ComplexString, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::apache::thrift::fixtures::types::ComplexString> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::ComplexString, ::apache__thrift__fixtures__types__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::ComplexString, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  ExtractorResult<::apache::thrift::fixtures::types::ComplexString> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::ComplexString, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::ComplexString, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::apache::thrift::fixtures::types::ComplexString& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::ComplexString, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::ComplexString, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  PyObject* operator()(const ::apache::thrift::fixtures::types::ComplexString& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::ComplexNestedWithDefault, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::ComplexNestedWithDefault, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::apache::thrift::fixtures::types::ComplexNestedWithDefault> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::ComplexNestedWithDefault, ::apache__thrift__fixtures__types__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::ComplexNestedWithDefault, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  ExtractorResult<::apache::thrift::fixtures::types::ComplexNestedWithDefault> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::ComplexNestedWithDefault, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::ComplexNestedWithDefault, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::apache::thrift::fixtures::types::ComplexNestedWithDefault& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::ComplexNestedWithDefault, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::ComplexNestedWithDefault, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  PyObject* operator()(const ::apache::thrift::fixtures::types::ComplexNestedWithDefault& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::MinPadding, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::MinPadding, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::apache::thrift::fixtures::types::MinPadding> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::MinPadding, ::apache__thrift__fixtures__types__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::MinPadding, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  ExtractorResult<::apache::thrift::fixtures::types::MinPadding> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::MinPadding, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::MinPadding, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::apache::thrift::fixtures::types::MinPadding& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::MinPadding, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::MinPadding, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  PyObject* operator()(const ::apache::thrift::fixtures::types::MinPadding& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::MinPaddingWithCustomType, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::MinPaddingWithCustomType, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::apache::thrift::fixtures::types::MinPaddingWithCustomType> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::MinPaddingWithCustomType, ::apache__thrift__fixtures__types__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::MinPaddingWithCustomType, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  ExtractorResult<::apache::thrift::fixtures::types::MinPaddingWithCustomType> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::MinPaddingWithCustomType, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::MinPaddingWithCustomType, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::apache::thrift::fixtures::types::MinPaddingWithCustomType& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::MinPaddingWithCustomType, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::MinPaddingWithCustomType, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  PyObject* operator()(const ::apache::thrift::fixtures::types::MinPaddingWithCustomType& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::MyStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::MyStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::apache::thrift::fixtures::types::MyStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::MyStruct, ::apache__thrift__fixtures__types__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::MyStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  ExtractorResult<::apache::thrift::fixtures::types::MyStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::MyStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::MyStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::apache::thrift::fixtures::types::MyStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::MyStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::MyStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  PyObject* operator()(const ::apache::thrift::fixtures::types::MyStruct& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::MyDataItem, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::MyDataItem, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::apache::thrift::fixtures::types::MyDataItem> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::MyDataItem, ::apache__thrift__fixtures__types__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::MyDataItem, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  ExtractorResult<::apache::thrift::fixtures::types::MyDataItem> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::MyDataItem, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::MyDataItem, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::apache::thrift::fixtures::types::MyDataItem& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::MyDataItem, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::MyDataItem, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  PyObject* operator()(const ::apache::thrift::fixtures::types::MyDataItem& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::Renamed, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::Renamed, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::apache::thrift::fixtures::types::Renamed> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::Renamed, ::apache__thrift__fixtures__types__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::Renamed, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  ExtractorResult<::apache::thrift::fixtures::types::Renamed> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::Renamed, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::Renamed, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::apache::thrift::fixtures::types::Renamed& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::Renamed, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::Renamed, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  PyObject* operator()(const ::apache::thrift::fixtures::types::Renamed& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::AnnotatedTypes, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::AnnotatedTypes, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::apache::thrift::fixtures::types::AnnotatedTypes> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::AnnotatedTypes, ::apache__thrift__fixtures__types__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::AnnotatedTypes, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  ExtractorResult<::apache::thrift::fixtures::types::AnnotatedTypes> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::AnnotatedTypes, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::AnnotatedTypes, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::apache::thrift::fixtures::types::AnnotatedTypes& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::AnnotatedTypes, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::AnnotatedTypes, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  PyObject* operator()(const ::apache::thrift::fixtures::types::AnnotatedTypes& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::ForwardUsageRoot, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::ForwardUsageRoot, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::apache::thrift::fixtures::types::ForwardUsageRoot> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::ForwardUsageRoot, ::apache__thrift__fixtures__types__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::ForwardUsageRoot, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  ExtractorResult<::apache::thrift::fixtures::types::ForwardUsageRoot> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::ForwardUsageRoot, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::ForwardUsageRoot, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::apache::thrift::fixtures::types::ForwardUsageRoot& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::ForwardUsageRoot, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::ForwardUsageRoot, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  PyObject* operator()(const ::apache::thrift::fixtures::types::ForwardUsageRoot& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::ForwardUsageStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::ForwardUsageStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::apache::thrift::fixtures::types::ForwardUsageStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::ForwardUsageStruct, ::apache__thrift__fixtures__types__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::ForwardUsageStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  ExtractorResult<::apache::thrift::fixtures::types::ForwardUsageStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::ForwardUsageStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::ForwardUsageStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::apache::thrift::fixtures::types::ForwardUsageStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::ForwardUsageStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::ForwardUsageStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  PyObject* operator()(const ::apache::thrift::fixtures::types::ForwardUsageStruct& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::ForwardUsageByRef, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::ForwardUsageByRef, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::apache::thrift::fixtures::types::ForwardUsageByRef> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::ForwardUsageByRef, ::apache__thrift__fixtures__types__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::ForwardUsageByRef, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  ExtractorResult<::apache::thrift::fixtures::types::ForwardUsageByRef> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::ForwardUsageByRef, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::ForwardUsageByRef, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::apache::thrift::fixtures::types::ForwardUsageByRef& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::ForwardUsageByRef, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::ForwardUsageByRef, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  PyObject* operator()(const ::apache::thrift::fixtures::types::ForwardUsageByRef& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::IncompleteMap, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::IncompleteMap, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::apache::thrift::fixtures::types::IncompleteMap> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::IncompleteMap, ::apache__thrift__fixtures__types__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::IncompleteMap, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  ExtractorResult<::apache::thrift::fixtures::types::IncompleteMap> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::IncompleteMap, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::IncompleteMap, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::apache::thrift::fixtures::types::IncompleteMap& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::IncompleteMap, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::IncompleteMap, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  PyObject* operator()(const ::apache::thrift::fixtures::types::IncompleteMap& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::IncompleteMapDep, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::IncompleteMapDep, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::apache::thrift::fixtures::types::IncompleteMapDep> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::IncompleteMapDep, ::apache__thrift__fixtures__types__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::IncompleteMapDep, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  ExtractorResult<::apache::thrift::fixtures::types::IncompleteMapDep> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::IncompleteMapDep, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::IncompleteMapDep, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::apache::thrift::fixtures::types::IncompleteMapDep& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::IncompleteMapDep, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::IncompleteMapDep, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  PyObject* operator()(const ::apache::thrift::fixtures::types::IncompleteMapDep& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::CompleteMap, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::CompleteMap, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::apache::thrift::fixtures::types::CompleteMap> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::CompleteMap, ::apache__thrift__fixtures__types__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::CompleteMap, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  ExtractorResult<::apache::thrift::fixtures::types::CompleteMap> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::CompleteMap, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::CompleteMap, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::apache::thrift::fixtures::types::CompleteMap& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::CompleteMap, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::CompleteMap, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  PyObject* operator()(const ::apache::thrift::fixtures::types::CompleteMap& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::CompleteMapDep, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::CompleteMapDep, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::apache::thrift::fixtures::types::CompleteMapDep> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::CompleteMapDep, ::apache__thrift__fixtures__types__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::CompleteMapDep, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  ExtractorResult<::apache::thrift::fixtures::types::CompleteMapDep> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::CompleteMapDep, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::CompleteMapDep, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::apache::thrift::fixtures::types::CompleteMapDep& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::CompleteMapDep, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::CompleteMapDep, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  PyObject* operator()(const ::apache::thrift::fixtures::types::CompleteMapDep& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::IncompleteList, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::IncompleteList, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::apache::thrift::fixtures::types::IncompleteList> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::IncompleteList, ::apache__thrift__fixtures__types__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::IncompleteList, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  ExtractorResult<::apache::thrift::fixtures::types::IncompleteList> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::IncompleteList, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::IncompleteList, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::apache::thrift::fixtures::types::IncompleteList& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::IncompleteList, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::IncompleteList, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  PyObject* operator()(const ::apache::thrift::fixtures::types::IncompleteList& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::IncompleteListDep, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::IncompleteListDep, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::apache::thrift::fixtures::types::IncompleteListDep> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::IncompleteListDep, ::apache__thrift__fixtures__types__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::IncompleteListDep, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  ExtractorResult<::apache::thrift::fixtures::types::IncompleteListDep> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::IncompleteListDep, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::IncompleteListDep, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::apache::thrift::fixtures::types::IncompleteListDep& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::IncompleteListDep, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::IncompleteListDep, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  PyObject* operator()(const ::apache::thrift::fixtures::types::IncompleteListDep& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::CompleteList, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::CompleteList, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::apache::thrift::fixtures::types::CompleteList> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::CompleteList, ::apache__thrift__fixtures__types__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::CompleteList, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  ExtractorResult<::apache::thrift::fixtures::types::CompleteList> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::CompleteList, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::CompleteList, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::apache::thrift::fixtures::types::CompleteList& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::CompleteList, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::CompleteList, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  PyObject* operator()(const ::apache::thrift::fixtures::types::CompleteList& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::CompleteListDep, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::CompleteListDep, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::apache::thrift::fixtures::types::CompleteListDep> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::CompleteListDep, ::apache__thrift__fixtures__types__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::CompleteListDep, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  ExtractorResult<::apache::thrift::fixtures::types::CompleteListDep> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::CompleteListDep, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::CompleteListDep, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::apache::thrift::fixtures::types::CompleteListDep& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::CompleteListDep, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::CompleteListDep, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  PyObject* operator()(const ::apache::thrift::fixtures::types::CompleteListDep& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::AdaptedList, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::AdaptedList, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::apache::thrift::fixtures::types::AdaptedList> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::AdaptedList, ::apache__thrift__fixtures__types__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::AdaptedList, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  ExtractorResult<::apache::thrift::fixtures::types::AdaptedList> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::AdaptedList, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::AdaptedList, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::apache::thrift::fixtures::types::AdaptedList& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::AdaptedList, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::AdaptedList, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  PyObject* operator()(const ::apache::thrift::fixtures::types::AdaptedList& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::detail::AdaptedListDep, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::detail::AdaptedListDep, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::apache::thrift::fixtures::types::detail::AdaptedListDep> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::detail::AdaptedListDep, ::apache__thrift__fixtures__types__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::detail::AdaptedListDep, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  ExtractorResult<::apache::thrift::fixtures::types::detail::AdaptedListDep> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::detail::AdaptedListDep, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::detail::AdaptedListDep, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::apache::thrift::fixtures::types::detail::AdaptedListDep& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::detail::AdaptedListDep, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::detail::AdaptedListDep, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  PyObject* operator()(const ::apache::thrift::fixtures::types::detail::AdaptedListDep& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::DependentAdaptedList, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::DependentAdaptedList, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::apache::thrift::fixtures::types::DependentAdaptedList> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::DependentAdaptedList, ::apache__thrift__fixtures__types__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::DependentAdaptedList, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  ExtractorResult<::apache::thrift::fixtures::types::DependentAdaptedList> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::DependentAdaptedList, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::DependentAdaptedList, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::apache::thrift::fixtures::types::DependentAdaptedList& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::DependentAdaptedList, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::DependentAdaptedList, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  PyObject* operator()(const ::apache::thrift::fixtures::types::DependentAdaptedList& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::detail::DependentAdaptedListDep, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::detail::DependentAdaptedListDep, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::apache::thrift::fixtures::types::detail::DependentAdaptedListDep> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::detail::DependentAdaptedListDep, ::apache__thrift__fixtures__types__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::detail::DependentAdaptedListDep, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  ExtractorResult<::apache::thrift::fixtures::types::detail::DependentAdaptedListDep> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::detail::DependentAdaptedListDep, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::detail::DependentAdaptedListDep, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::apache::thrift::fixtures::types::detail::DependentAdaptedListDep& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::detail::DependentAdaptedListDep, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::detail::DependentAdaptedListDep, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  PyObject* operator()(const ::apache::thrift::fixtures::types::detail::DependentAdaptedListDep& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::AllocatorAware, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::AllocatorAware, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::apache::thrift::fixtures::types::AllocatorAware> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::AllocatorAware, ::apache__thrift__fixtures__types__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::AllocatorAware, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  ExtractorResult<::apache::thrift::fixtures::types::AllocatorAware> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::AllocatorAware, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::AllocatorAware, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::apache::thrift::fixtures::types::AllocatorAware& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::AllocatorAware, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::AllocatorAware, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  PyObject* operator()(const ::apache::thrift::fixtures::types::AllocatorAware& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::AllocatorAware2, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::AllocatorAware2, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::apache::thrift::fixtures::types::AllocatorAware2> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::AllocatorAware2, ::apache__thrift__fixtures__types__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::AllocatorAware2, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  ExtractorResult<::apache::thrift::fixtures::types::AllocatorAware2> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::AllocatorAware2, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::AllocatorAware2, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::apache::thrift::fixtures::types::AllocatorAware2& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::AllocatorAware2, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::AllocatorAware2, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  PyObject* operator()(const ::apache::thrift::fixtures::types::AllocatorAware2& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::TypedefStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::TypedefStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::apache::thrift::fixtures::types::TypedefStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::TypedefStruct, ::apache__thrift__fixtures__types__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::TypedefStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  ExtractorResult<::apache::thrift::fixtures::types::TypedefStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::TypedefStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::TypedefStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::apache::thrift::fixtures::types::TypedefStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::TypedefStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::TypedefStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  PyObject* operator()(const ::apache::thrift::fixtures::types::TypedefStruct& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::StructWithDoubleUnderscores, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::StructWithDoubleUnderscores, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::apache::thrift::fixtures::types::StructWithDoubleUnderscores> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::StructWithDoubleUnderscores, ::apache__thrift__fixtures__types__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::StructWithDoubleUnderscores, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  ExtractorResult<::apache::thrift::fixtures::types::StructWithDoubleUnderscores> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::StructWithDoubleUnderscores, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::StructWithDoubleUnderscores, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::apache::thrift::fixtures::types::StructWithDoubleUnderscores& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::StructWithDoubleUnderscores, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::StructWithDoubleUnderscores, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  PyObject* operator()(const ::apache::thrift::fixtures::types::StructWithDoubleUnderscores& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::has_bitwise_ops, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::has_bitwise_ops, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  ExtractorResult<::apache::thrift::fixtures::types::has_bitwise_ops> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::has_bitwise_ops, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  PyObject* operator()(::apache::thrift::fixtures::types::has_bitwise_ops val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::is_unscoped, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::is_unscoped, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  ExtractorResult<::apache::thrift::fixtures::types::is_unscoped> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::is_unscoped, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  PyObject* operator()(::apache::thrift::fixtures::types::is_unscoped val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::MyForwardRefEnum, ::apache__thrift__fixtures__types__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::MyForwardRefEnum, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  ExtractorResult<::apache::thrift::fixtures::types::MyForwardRefEnum> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::MyForwardRefEnum, ::apache__thrift__fixtures__types__module::NamespaceTag>> {
  PyObject* operator()(::apache::thrift::fixtures::types::MyForwardRefEnum val);
};

} // namespace apache::thrift::python::capi
