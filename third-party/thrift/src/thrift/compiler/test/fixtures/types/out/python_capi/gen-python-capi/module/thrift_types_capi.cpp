
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT
 *  @generated
 *
 */

#include <folly/python/import.h>
#include <thrift/lib/python/capi/iobuf.h>
#include <thrift/lib/python/types.h>

#include <thrift/compiler/test/fixtures/types/gen-python-capi/module/thrift_types_api.h>
#include <thrift/compiler/test/fixtures/types/gen-python-capi/module/thrift_types_capi.h>

#include "thrift/compiler/test/fixtures/types/gen-python-capi/included/thrift_types_capi.h"

namespace apache::thrift::python::capi {
namespace {
bool ensure_module_imported() {
  static ::folly::python::import_cache_nocapture import((
      ::import_apache__thrift__fixtures__types__module__thrift_types_capi));
  return import();
}
  static constexpr std::int16_t _fbthrift__decorated_struct__tuple_pos[1] = {
    1
  };
  static constexpr std::int16_t _fbthrift__VirtualStruct__tuple_pos[1] = {
    1
  };
  static constexpr std::int16_t _fbthrift__MyStructWithForwardRefEnum__tuple_pos[2] = {
    1, 2
  };
  static constexpr std::int16_t _fbthrift__TrivialNumeric__tuple_pos[2] = {
    1, 2
  };
  static constexpr std::int16_t _fbthrift__TrivialNestedWithDefault__tuple_pos[2] = {
    1, 2
  };
  static constexpr std::int16_t _fbthrift__ComplexString__tuple_pos[2] = {
    1, 2
  };
  static constexpr std::int16_t _fbthrift__ComplexNestedWithDefault__tuple_pos[2] = {
    1, 2
  };
  static constexpr std::int16_t _fbthrift__MinPadding__tuple_pos[5] = {
    1, 2, 3, 4, 5
  };
  static constexpr std::int16_t _fbthrift__MyStruct__tuple_pos[4] = {
    1, 2, 3, 4
  };
  static constexpr std::int16_t _fbthrift__Renaming__tuple_pos[1] = {
    1
  };
  static constexpr std::int16_t _fbthrift__AnnotatedTypes__tuple_pos[2] = {
    1, 2
  };
  static constexpr std::int16_t _fbthrift__ForwardUsageRoot__tuple_pos[2] = {
    1, 2
  };
  static constexpr std::int16_t _fbthrift__ForwardUsageStruct__tuple_pos[1] = {
    1
  };
  static constexpr std::int16_t _fbthrift__ForwardUsageByRef__tuple_pos[1] = {
    1
  };
  static constexpr std::int16_t _fbthrift__IncompleteMap__tuple_pos[1] = {
    1
  };
  static constexpr std::int16_t _fbthrift__CompleteMap__tuple_pos[1] = {
    1
  };
  static constexpr std::int16_t _fbthrift__CompleteList__tuple_pos[1] = {
    1
  };
  static constexpr std::int16_t _fbthrift__AdaptedListDep__tuple_pos[1] = {
    1
  };
  static constexpr std::int16_t _fbthrift__DependentAdaptedListDep__tuple_pos[1] = {
    1
  };
  static constexpr std::int16_t _fbthrift__AllocatorAware__tuple_pos[7] = {
    1, 2, 3, 4, 5, 6, 7
  };
  static constexpr std::int16_t _fbthrift__AllocatorAware2__tuple_pos[2] = {
    1, 2
  };
  static constexpr std::int16_t _fbthrift__StructWithDoubleUnderscores__tuple_pos[1] = {
    1
  };
} // namespace

ExtractorResult<::apache::thrift::fixtures::types::empty_struct>
Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::empty_struct, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(PyObject* obj) {
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a empty_struct");
      }
      return extractorError<::apache::thrift::fixtures::types::empty_struct>(
          "Marshal error: empty_struct");
  }
  return ::apache::thrift::fixtures::types::empty_struct{};
}

ExtractorResult<::apache::thrift::fixtures::types::empty_struct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::apache::thrift::fixtures::types::empty_struct, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(PyObject* fbThriftData) {
  ::apache::thrift::fixtures::types::empty_struct cpp;
  (void)fbThriftData;
  return cpp;
}


int Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::empty_struct, ::apache__thrift__fixtures__types__module::NamespaceTag>>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module apache.thrift.fixtures.types.module import error");
  }
  int result =
      can_extract__apache__thrift__fixtures__types__module__empty_struct(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: empty_struct");
  }
  return result;
}


PyObject* Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::empty_struct, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(
    const ::apache::thrift::fixtures::types::empty_struct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::empty_struct, ::apache__thrift__fixtures__types__module::NamespaceTag>> ctor;
  StrongRef fbthrift_data(ctor(val));
  if (!fbthrift_data) {
    return nullptr;
  }
  return init__apache__thrift__fixtures__types__module__empty_struct(*fbthrift_data);
}

PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::empty_struct, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(
    [[maybe_unused]] const ::apache::thrift::fixtures::types::empty_struct& val) {
  StrongRef fbthrift_data(createStructTuple(0));
  return std::move(fbthrift_data).release();
}


ExtractorResult<::apache::thrift::fixtures::types::decorated_struct>
Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::decorated_struct, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(PyObject* obj) {
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a decorated_struct");
      }
      return extractorError<::apache::thrift::fixtures::types::decorated_struct>(
          "Marshal error: decorated_struct");
  }
  StrongRef fbThriftData(getThriftData(obj));
  return Extractor<::apache::thrift::python::capi::ComposedStruct<
      ::apache::thrift::fixtures::types::decorated_struct, ::apache__thrift__fixtures__types__module::NamespaceTag>>{}(*fbThriftData);
}

ExtractorResult<::apache::thrift::fixtures::types::decorated_struct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::apache::thrift::fixtures::types::decorated_struct, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(PyObject* fbThriftData) {
  ::apache::thrift::fixtures::types::decorated_struct cpp;
  std::optional<std::string_view> error;
  Extractor<Bytes>{}.extractInto(
      cpp.field_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__decorated_struct__tuple_pos[0]),
      error);
  if (error) {
    return folly::makeUnexpected(*error);
  }
  return cpp;
}


int Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::decorated_struct, ::apache__thrift__fixtures__types__module::NamespaceTag>>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module apache.thrift.fixtures.types.module import error");
  }
  int result =
      can_extract__apache__thrift__fixtures__types__module__decorated_struct(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: decorated_struct");
  }
  return result;
}


PyObject* Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::decorated_struct, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(
    const ::apache::thrift::fixtures::types::decorated_struct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::decorated_struct, ::apache__thrift__fixtures__types__module::NamespaceTag>> ctor;
  StrongRef fbthrift_data(ctor(val));
  if (!fbthrift_data) {
    return nullptr;
  }
  return init__apache__thrift__fixtures__types__module__decorated_struct(*fbthrift_data);
}

PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::decorated_struct, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(
    [[maybe_unused]] const ::apache::thrift::fixtures::types::decorated_struct& val) {
  StrongRef fbthrift_data(createStructTuple(1));
  StrongRef _fbthrift__field(
    Constructor<Bytes>{}
    .constructFrom(val.field_ref()));
  if (!_fbthrift__field ||
      setStructField(
          *fbthrift_data,
          _fbthrift__decorated_struct__tuple_pos[0],
          *_fbthrift__field) == -1) {
    return nullptr;
  }
  return std::move(fbthrift_data).release();
}


ExtractorResult<::apache::thrift::fixtures::types::ContainerStruct>
Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::ContainerStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::apache::thrift::fixtures::types::ContainerStruct>(
      "Module apache.thrift.fixtures.types.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__apache__thrift__fixtures__types__module__ContainerStruct(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::apache::thrift::fixtures::types::ContainerStruct>(
        "Thrift serialize error: ContainerStruct");
  }
  return detail::deserialize_iobuf<::apache::thrift::fixtures::types::ContainerStruct>(std::move(val));
}


ExtractorResult<::apache::thrift::fixtures::types::ContainerStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::apache::thrift::fixtures::types::ContainerStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::apache::thrift::fixtures::types::ContainerStruct>(
      "Module apache.thrift.fixtures.types.module import error");
  }
  auto obj = StrongRef(init__apache__thrift__fixtures__types__module__ContainerStruct(fbthrift_data));
  if (!obj) {
      return extractorError<::apache::thrift::fixtures::types::ContainerStruct>(
          "Init from fbthrift error: ContainerStruct");
  }
  return Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::ContainerStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>>{}(*obj);
}

int Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::ContainerStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module apache.thrift.fixtures.types.module import error");
  }
  int result =
      can_extract__apache__thrift__fixtures__types__module__ContainerStruct(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: ContainerStruct");
  }
  return result;
}


PyObject* Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::ContainerStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(
    const ::apache::thrift::fixtures::types::ContainerStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  ::std::unique_ptr<::folly::IOBuf> serialized;
  try {
    serialized = detail::serialize_to_iobuf(val);
  } catch (const apache::thrift::TProtocolException& e) {
    detail::handle_protocol_error(e);
    return nullptr;
  }
  DCHECK(serialized);
  auto ptr = construct__apache__thrift__fixtures__types__module__ContainerStruct(std::move(serialized));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::ContainerStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(
    const ::apache::thrift::fixtures::types::ContainerStruct& val) {
  auto obj = StrongRef(Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::ContainerStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::apache::thrift::fixtures::types::CppTypeStruct>
Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::CppTypeStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::apache::thrift::fixtures::types::CppTypeStruct>(
      "Module apache.thrift.fixtures.types.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__apache__thrift__fixtures__types__module__CppTypeStruct(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::apache::thrift::fixtures::types::CppTypeStruct>(
        "Thrift serialize error: CppTypeStruct");
  }
  return detail::deserialize_iobuf<::apache::thrift::fixtures::types::CppTypeStruct>(std::move(val));
}


ExtractorResult<::apache::thrift::fixtures::types::CppTypeStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::apache::thrift::fixtures::types::CppTypeStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::apache::thrift::fixtures::types::CppTypeStruct>(
      "Module apache.thrift.fixtures.types.module import error");
  }
  auto obj = StrongRef(init__apache__thrift__fixtures__types__module__CppTypeStruct(fbthrift_data));
  if (!obj) {
      return extractorError<::apache::thrift::fixtures::types::CppTypeStruct>(
          "Init from fbthrift error: CppTypeStruct");
  }
  return Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::CppTypeStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>>{}(*obj);
}

int Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::CppTypeStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module apache.thrift.fixtures.types.module import error");
  }
  int result =
      can_extract__apache__thrift__fixtures__types__module__CppTypeStruct(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: CppTypeStruct");
  }
  return result;
}


PyObject* Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::CppTypeStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(
    const ::apache::thrift::fixtures::types::CppTypeStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  ::std::unique_ptr<::folly::IOBuf> serialized;
  try {
    serialized = detail::serialize_to_iobuf(val);
  } catch (const apache::thrift::TProtocolException& e) {
    detail::handle_protocol_error(e);
    return nullptr;
  }
  DCHECK(serialized);
  auto ptr = construct__apache__thrift__fixtures__types__module__CppTypeStruct(std::move(serialized));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::CppTypeStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(
    const ::apache::thrift::fixtures::types::CppTypeStruct& val) {
  auto obj = StrongRef(Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::CppTypeStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::apache::thrift::fixtures::types::VirtualStruct>
Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::VirtualStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(PyObject* obj) {
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a VirtualStruct");
      }
      return extractorError<::apache::thrift::fixtures::types::VirtualStruct>(
          "Marshal error: VirtualStruct");
  }
  StrongRef fbThriftData(getThriftData(obj));
  return Extractor<::apache::thrift::python::capi::ComposedStruct<
      ::apache::thrift::fixtures::types::VirtualStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>>{}(*fbThriftData);
}

ExtractorResult<::apache::thrift::fixtures::types::VirtualStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::apache::thrift::fixtures::types::VirtualStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(PyObject* fbThriftData) {
  ::apache::thrift::fixtures::types::VirtualStruct cpp;
  std::optional<std::string_view> error;
  Extractor<int64_t>{}.extractInto(
      cpp.MyIntField_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__VirtualStruct__tuple_pos[0]),
      error);
  if (error) {
    return folly::makeUnexpected(*error);
  }
  return cpp;
}


int Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::VirtualStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module apache.thrift.fixtures.types.module import error");
  }
  int result =
      can_extract__apache__thrift__fixtures__types__module__VirtualStruct(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: VirtualStruct");
  }
  return result;
}


PyObject* Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::VirtualStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(
    const ::apache::thrift::fixtures::types::VirtualStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::VirtualStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>> ctor;
  StrongRef fbthrift_data(ctor(val));
  if (!fbthrift_data) {
    return nullptr;
  }
  return init__apache__thrift__fixtures__types__module__VirtualStruct(*fbthrift_data);
}

PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::VirtualStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(
    [[maybe_unused]] const ::apache::thrift::fixtures::types::VirtualStruct& val) {
  StrongRef fbthrift_data(createStructTuple(1));
  StrongRef _fbthrift__MyIntField(
    Constructor<int64_t>{}
    .constructFrom(val.MyIntField_ref()));
  if (!_fbthrift__MyIntField ||
      setStructField(
          *fbthrift_data,
          _fbthrift__VirtualStruct__tuple_pos[0],
          *_fbthrift__MyIntField) == -1) {
    return nullptr;
  }
  return std::move(fbthrift_data).release();
}


ExtractorResult<::apache::thrift::fixtures::types::MyStructWithForwardRefEnum>
Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::MyStructWithForwardRefEnum, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(PyObject* obj) {
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a MyStructWithForwardRefEnum");
      }
      return extractorError<::apache::thrift::fixtures::types::MyStructWithForwardRefEnum>(
          "Marshal error: MyStructWithForwardRefEnum");
  }
  StrongRef fbThriftData(getThriftData(obj));
  return Extractor<::apache::thrift::python::capi::ComposedStruct<
      ::apache::thrift::fixtures::types::MyStructWithForwardRefEnum, ::apache__thrift__fixtures__types__module::NamespaceTag>>{}(*fbThriftData);
}

ExtractorResult<::apache::thrift::fixtures::types::MyStructWithForwardRefEnum>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::apache::thrift::fixtures::types::MyStructWithForwardRefEnum, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(PyObject* fbThriftData) {
  ::apache::thrift::fixtures::types::MyStructWithForwardRefEnum cpp;
  std::optional<std::string_view> error;
  Extractor<::apache::thrift::python::capi::ComposedEnum<::apache::thrift::fixtures::types::MyForwardRefEnum>>{}.extractInto(
      cpp.a_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__MyStructWithForwardRefEnum__tuple_pos[0]),
      error);
  Extractor<::apache::thrift::python::capi::ComposedEnum<::apache::thrift::fixtures::types::MyForwardRefEnum>>{}.extractInto(
      cpp.b_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__MyStructWithForwardRefEnum__tuple_pos[1]),
      error);
  if (error) {
    return folly::makeUnexpected(*error);
  }
  return cpp;
}


int Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::MyStructWithForwardRefEnum, ::apache__thrift__fixtures__types__module::NamespaceTag>>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module apache.thrift.fixtures.types.module import error");
  }
  int result =
      can_extract__apache__thrift__fixtures__types__module__MyStructWithForwardRefEnum(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MyStructWithForwardRefEnum");
  }
  return result;
}


PyObject* Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::MyStructWithForwardRefEnum, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(
    const ::apache::thrift::fixtures::types::MyStructWithForwardRefEnum& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::MyStructWithForwardRefEnum, ::apache__thrift__fixtures__types__module::NamespaceTag>> ctor;
  StrongRef fbthrift_data(ctor(val));
  if (!fbthrift_data) {
    return nullptr;
  }
  return init__apache__thrift__fixtures__types__module__MyStructWithForwardRefEnum(*fbthrift_data);
}

PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::MyStructWithForwardRefEnum, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(
    [[maybe_unused]] const ::apache::thrift::fixtures::types::MyStructWithForwardRefEnum& val) {
  StrongRef fbthrift_data(createStructTuple(2));
  StrongRef _fbthrift__a(
    Constructor<::apache::thrift::python::capi::ComposedEnum<::apache::thrift::fixtures::types::MyForwardRefEnum>>{}
    .constructFrom(val.a_ref()));
  if (!_fbthrift__a ||
      setStructField(
          *fbthrift_data,
          _fbthrift__MyStructWithForwardRefEnum__tuple_pos[0],
          *_fbthrift__a) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__b(
    Constructor<::apache::thrift::python::capi::ComposedEnum<::apache::thrift::fixtures::types::MyForwardRefEnum>>{}
    .constructFrom(val.b_ref()));
  if (!_fbthrift__b ||
      setStructField(
          *fbthrift_data,
          _fbthrift__MyStructWithForwardRefEnum__tuple_pos[1],
          *_fbthrift__b) == -1) {
    return nullptr;
  }
  return std::move(fbthrift_data).release();
}


ExtractorResult<::apache::thrift::fixtures::types::TrivialNumeric>
Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::TrivialNumeric, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(PyObject* obj) {
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a TrivialNumeric");
      }
      return extractorError<::apache::thrift::fixtures::types::TrivialNumeric>(
          "Marshal error: TrivialNumeric");
  }
  StrongRef fbThriftData(getThriftData(obj));
  return Extractor<::apache::thrift::python::capi::ComposedStruct<
      ::apache::thrift::fixtures::types::TrivialNumeric, ::apache__thrift__fixtures__types__module::NamespaceTag>>{}(*fbThriftData);
}

ExtractorResult<::apache::thrift::fixtures::types::TrivialNumeric>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::apache::thrift::fixtures::types::TrivialNumeric, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(PyObject* fbThriftData) {
  ::apache::thrift::fixtures::types::TrivialNumeric cpp;
  std::optional<std::string_view> error;
  Extractor<int32_t>{}.extractInto(
      cpp.a_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__TrivialNumeric__tuple_pos[0]),
      error);
  Extractor<bool>{}.extractInto(
      cpp.b_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__TrivialNumeric__tuple_pos[1]),
      error);
  if (error) {
    return folly::makeUnexpected(*error);
  }
  return cpp;
}


int Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::TrivialNumeric, ::apache__thrift__fixtures__types__module::NamespaceTag>>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module apache.thrift.fixtures.types.module import error");
  }
  int result =
      can_extract__apache__thrift__fixtures__types__module__TrivialNumeric(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: TrivialNumeric");
  }
  return result;
}


PyObject* Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::TrivialNumeric, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(
    const ::apache::thrift::fixtures::types::TrivialNumeric& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::TrivialNumeric, ::apache__thrift__fixtures__types__module::NamespaceTag>> ctor;
  StrongRef fbthrift_data(ctor(val));
  if (!fbthrift_data) {
    return nullptr;
  }
  return init__apache__thrift__fixtures__types__module__TrivialNumeric(*fbthrift_data);
}

PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::TrivialNumeric, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(
    [[maybe_unused]] const ::apache::thrift::fixtures::types::TrivialNumeric& val) {
  StrongRef fbthrift_data(createStructTuple(2));
  StrongRef _fbthrift__a(
    Constructor<int32_t>{}
    .constructFrom(val.a_ref()));
  if (!_fbthrift__a ||
      setStructField(
          *fbthrift_data,
          _fbthrift__TrivialNumeric__tuple_pos[0],
          *_fbthrift__a) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__b(
    Constructor<bool>{}
    .constructFrom(val.b_ref()));
  if (!_fbthrift__b ||
      setStructField(
          *fbthrift_data,
          _fbthrift__TrivialNumeric__tuple_pos[1],
          *_fbthrift__b) == -1) {
    return nullptr;
  }
  return std::move(fbthrift_data).release();
}


ExtractorResult<::apache::thrift::fixtures::types::TrivialNestedWithDefault>
Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::TrivialNestedWithDefault, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(PyObject* obj) {
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a TrivialNestedWithDefault");
      }
      return extractorError<::apache::thrift::fixtures::types::TrivialNestedWithDefault>(
          "Marshal error: TrivialNestedWithDefault");
  }
  StrongRef fbThriftData(getThriftData(obj));
  return Extractor<::apache::thrift::python::capi::ComposedStruct<
      ::apache::thrift::fixtures::types::TrivialNestedWithDefault, ::apache__thrift__fixtures__types__module::NamespaceTag>>{}(*fbThriftData);
}

ExtractorResult<::apache::thrift::fixtures::types::TrivialNestedWithDefault>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::apache::thrift::fixtures::types::TrivialNestedWithDefault, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(PyObject* fbThriftData) {
  ::apache::thrift::fixtures::types::TrivialNestedWithDefault cpp;
  std::optional<std::string_view> error;
  Extractor<int32_t>{}.extractInto(
      cpp.z_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__TrivialNestedWithDefault__tuple_pos[0]),
      error);
  Extractor<::apache::thrift::python::capi::ComposedStruct<::apache::thrift::fixtures::types::TrivialNumeric, ::apache__thrift__fixtures__types__module::NamespaceTag>>{}.extractInto(
      cpp.n_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__TrivialNestedWithDefault__tuple_pos[1]),
      error);
  if (error) {
    return folly::makeUnexpected(*error);
  }
  return cpp;
}


int Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::TrivialNestedWithDefault, ::apache__thrift__fixtures__types__module::NamespaceTag>>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module apache.thrift.fixtures.types.module import error");
  }
  int result =
      can_extract__apache__thrift__fixtures__types__module__TrivialNestedWithDefault(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: TrivialNestedWithDefault");
  }
  return result;
}


PyObject* Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::TrivialNestedWithDefault, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(
    const ::apache::thrift::fixtures::types::TrivialNestedWithDefault& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::TrivialNestedWithDefault, ::apache__thrift__fixtures__types__module::NamespaceTag>> ctor;
  StrongRef fbthrift_data(ctor(val));
  if (!fbthrift_data) {
    return nullptr;
  }
  return init__apache__thrift__fixtures__types__module__TrivialNestedWithDefault(*fbthrift_data);
}

PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::TrivialNestedWithDefault, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(
    [[maybe_unused]] const ::apache::thrift::fixtures::types::TrivialNestedWithDefault& val) {
  StrongRef fbthrift_data(createStructTuple(2));
  StrongRef _fbthrift__z(
    Constructor<int32_t>{}
    .constructFrom(val.z_ref()));
  if (!_fbthrift__z ||
      setStructField(
          *fbthrift_data,
          _fbthrift__TrivialNestedWithDefault__tuple_pos[0],
          *_fbthrift__z) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__n(
    Constructor<::apache::thrift::python::capi::ComposedStruct<::apache::thrift::fixtures::types::TrivialNumeric, ::apache__thrift__fixtures__types__module::NamespaceTag>>{}
    .constructFrom(val.n_ref()));
  if (!_fbthrift__n ||
      setStructField(
          *fbthrift_data,
          _fbthrift__TrivialNestedWithDefault__tuple_pos[1],
          *_fbthrift__n) == -1) {
    return nullptr;
  }
  return std::move(fbthrift_data).release();
}


ExtractorResult<::apache::thrift::fixtures::types::ComplexString>
Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::ComplexString, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(PyObject* obj) {
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a ComplexString");
      }
      return extractorError<::apache::thrift::fixtures::types::ComplexString>(
          "Marshal error: ComplexString");
  }
  StrongRef fbThriftData(getThriftData(obj));
  return Extractor<::apache::thrift::python::capi::ComposedStruct<
      ::apache::thrift::fixtures::types::ComplexString, ::apache__thrift__fixtures__types__module::NamespaceTag>>{}(*fbThriftData);
}

ExtractorResult<::apache::thrift::fixtures::types::ComplexString>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::apache::thrift::fixtures::types::ComplexString, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(PyObject* fbThriftData) {
  ::apache::thrift::fixtures::types::ComplexString cpp;
  std::optional<std::string_view> error;
  Extractor<Bytes>{}.extractInto(
      cpp.a_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__ComplexString__tuple_pos[0]),
      error);
  Extractor<map<Bytes, int32_t>>{}.extractInto(
      cpp.b_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__ComplexString__tuple_pos[1]),
      error);
  if (error) {
    return folly::makeUnexpected(*error);
  }
  return cpp;
}


int Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::ComplexString, ::apache__thrift__fixtures__types__module::NamespaceTag>>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module apache.thrift.fixtures.types.module import error");
  }
  int result =
      can_extract__apache__thrift__fixtures__types__module__ComplexString(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: ComplexString");
  }
  return result;
}


PyObject* Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::ComplexString, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(
    const ::apache::thrift::fixtures::types::ComplexString& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::ComplexString, ::apache__thrift__fixtures__types__module::NamespaceTag>> ctor;
  StrongRef fbthrift_data(ctor(val));
  if (!fbthrift_data) {
    return nullptr;
  }
  return init__apache__thrift__fixtures__types__module__ComplexString(*fbthrift_data);
}

PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::ComplexString, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(
    [[maybe_unused]] const ::apache::thrift::fixtures::types::ComplexString& val) {
  StrongRef fbthrift_data(createStructTuple(2));
  StrongRef _fbthrift__a(
    Constructor<Bytes>{}
    .constructFrom(val.a_ref()));
  if (!_fbthrift__a ||
      setStructField(
          *fbthrift_data,
          _fbthrift__ComplexString__tuple_pos[0],
          *_fbthrift__a) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__b(
    Constructor<map<Bytes, int32_t>>{}
    .constructFrom(val.b_ref()));
  if (!_fbthrift__b ||
      setStructField(
          *fbthrift_data,
          _fbthrift__ComplexString__tuple_pos[1],
          *_fbthrift__b) == -1) {
    return nullptr;
  }
  return std::move(fbthrift_data).release();
}


ExtractorResult<::apache::thrift::fixtures::types::ComplexNestedWithDefault>
Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::ComplexNestedWithDefault, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(PyObject* obj) {
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a ComplexNestedWithDefault");
      }
      return extractorError<::apache::thrift::fixtures::types::ComplexNestedWithDefault>(
          "Marshal error: ComplexNestedWithDefault");
  }
  StrongRef fbThriftData(getThriftData(obj));
  return Extractor<::apache::thrift::python::capi::ComposedStruct<
      ::apache::thrift::fixtures::types::ComplexNestedWithDefault, ::apache__thrift__fixtures__types__module::NamespaceTag>>{}(*fbThriftData);
}

ExtractorResult<::apache::thrift::fixtures::types::ComplexNestedWithDefault>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::apache::thrift::fixtures::types::ComplexNestedWithDefault, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(PyObject* fbThriftData) {
  ::apache::thrift::fixtures::types::ComplexNestedWithDefault cpp;
  std::optional<std::string_view> error;
  Extractor<Bytes>{}.extractInto(
      cpp.z_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__ComplexNestedWithDefault__tuple_pos[0]),
      error);
  Extractor<::apache::thrift::python::capi::ComposedStruct<::apache::thrift::fixtures::types::ComplexString, ::apache__thrift__fixtures__types__module::NamespaceTag>>{}.extractInto(
      cpp.n_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__ComplexNestedWithDefault__tuple_pos[1]),
      error);
  if (error) {
    return folly::makeUnexpected(*error);
  }
  return cpp;
}


int Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::ComplexNestedWithDefault, ::apache__thrift__fixtures__types__module::NamespaceTag>>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module apache.thrift.fixtures.types.module import error");
  }
  int result =
      can_extract__apache__thrift__fixtures__types__module__ComplexNestedWithDefault(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: ComplexNestedWithDefault");
  }
  return result;
}


PyObject* Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::ComplexNestedWithDefault, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(
    const ::apache::thrift::fixtures::types::ComplexNestedWithDefault& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::ComplexNestedWithDefault, ::apache__thrift__fixtures__types__module::NamespaceTag>> ctor;
  StrongRef fbthrift_data(ctor(val));
  if (!fbthrift_data) {
    return nullptr;
  }
  return init__apache__thrift__fixtures__types__module__ComplexNestedWithDefault(*fbthrift_data);
}

PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::ComplexNestedWithDefault, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(
    [[maybe_unused]] const ::apache::thrift::fixtures::types::ComplexNestedWithDefault& val) {
  StrongRef fbthrift_data(createStructTuple(2));
  StrongRef _fbthrift__z(
    Constructor<Bytes>{}
    .constructFrom(val.z_ref()));
  if (!_fbthrift__z ||
      setStructField(
          *fbthrift_data,
          _fbthrift__ComplexNestedWithDefault__tuple_pos[0],
          *_fbthrift__z) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__n(
    Constructor<::apache::thrift::python::capi::ComposedStruct<::apache::thrift::fixtures::types::ComplexString, ::apache__thrift__fixtures__types__module::NamespaceTag>>{}
    .constructFrom(val.n_ref()));
  if (!_fbthrift__n ||
      setStructField(
          *fbthrift_data,
          _fbthrift__ComplexNestedWithDefault__tuple_pos[1],
          *_fbthrift__n) == -1) {
    return nullptr;
  }
  return std::move(fbthrift_data).release();
}


ExtractorResult<::apache::thrift::fixtures::types::MinPadding>
Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::MinPadding, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(PyObject* obj) {
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a MinPadding");
      }
      return extractorError<::apache::thrift::fixtures::types::MinPadding>(
          "Marshal error: MinPadding");
  }
  StrongRef fbThriftData(getThriftData(obj));
  return Extractor<::apache::thrift::python::capi::ComposedStruct<
      ::apache::thrift::fixtures::types::MinPadding, ::apache__thrift__fixtures__types__module::NamespaceTag>>{}(*fbThriftData);
}

ExtractorResult<::apache::thrift::fixtures::types::MinPadding>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::apache::thrift::fixtures::types::MinPadding, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(PyObject* fbThriftData) {
  ::apache::thrift::fixtures::types::MinPadding cpp;
  std::optional<std::string_view> error;
  Extractor<int8_t>{}.extractInto(
      cpp.small_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__MinPadding__tuple_pos[0]),
      error);
  Extractor<int64_t>{}.extractInto(
      cpp.big_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__MinPadding__tuple_pos[1]),
      error);
  Extractor<int16_t>{}.extractInto(
      cpp.medium_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__MinPadding__tuple_pos[2]),
      error);
  Extractor<int32_t>{}.extractInto(
      cpp.biggish_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__MinPadding__tuple_pos[3]),
      error);
  Extractor<int8_t>{}.extractInto(
      cpp.tiny_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__MinPadding__tuple_pos[4]),
      error);
  if (error) {
    return folly::makeUnexpected(*error);
  }
  return cpp;
}


int Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::MinPadding, ::apache__thrift__fixtures__types__module::NamespaceTag>>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module apache.thrift.fixtures.types.module import error");
  }
  int result =
      can_extract__apache__thrift__fixtures__types__module__MinPadding(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MinPadding");
  }
  return result;
}


PyObject* Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::MinPadding, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(
    const ::apache::thrift::fixtures::types::MinPadding& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::MinPadding, ::apache__thrift__fixtures__types__module::NamespaceTag>> ctor;
  StrongRef fbthrift_data(ctor(val));
  if (!fbthrift_data) {
    return nullptr;
  }
  return init__apache__thrift__fixtures__types__module__MinPadding(*fbthrift_data);
}

PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::MinPadding, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(
    [[maybe_unused]] const ::apache::thrift::fixtures::types::MinPadding& val) {
  StrongRef fbthrift_data(createStructTuple(5));
  StrongRef _fbthrift__small(
    Constructor<int8_t>{}
    .constructFrom(val.small_ref()));
  if (!_fbthrift__small ||
      setStructField(
          *fbthrift_data,
          _fbthrift__MinPadding__tuple_pos[0],
          *_fbthrift__small) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__big(
    Constructor<int64_t>{}
    .constructFrom(val.big_ref()));
  if (!_fbthrift__big ||
      setStructField(
          *fbthrift_data,
          _fbthrift__MinPadding__tuple_pos[1],
          *_fbthrift__big) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__medium(
    Constructor<int16_t>{}
    .constructFrom(val.medium_ref()));
  if (!_fbthrift__medium ||
      setStructField(
          *fbthrift_data,
          _fbthrift__MinPadding__tuple_pos[2],
          *_fbthrift__medium) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__biggish(
    Constructor<int32_t>{}
    .constructFrom(val.biggish_ref()));
  if (!_fbthrift__biggish ||
      setStructField(
          *fbthrift_data,
          _fbthrift__MinPadding__tuple_pos[3],
          *_fbthrift__biggish) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__tiny(
    Constructor<int8_t>{}
    .constructFrom(val.tiny_ref()));
  if (!_fbthrift__tiny ||
      setStructField(
          *fbthrift_data,
          _fbthrift__MinPadding__tuple_pos[4],
          *_fbthrift__tiny) == -1) {
    return nullptr;
  }
  return std::move(fbthrift_data).release();
}


ExtractorResult<::apache::thrift::fixtures::types::MinPaddingWithCustomType>
Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::MinPaddingWithCustomType, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::apache::thrift::fixtures::types::MinPaddingWithCustomType>(
      "Module apache.thrift.fixtures.types.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__apache__thrift__fixtures__types__module__MinPaddingWithCustomType(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::apache::thrift::fixtures::types::MinPaddingWithCustomType>(
        "Thrift serialize error: MinPaddingWithCustomType");
  }
  return detail::deserialize_iobuf<::apache::thrift::fixtures::types::MinPaddingWithCustomType>(std::move(val));
}


ExtractorResult<::apache::thrift::fixtures::types::MinPaddingWithCustomType>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::apache::thrift::fixtures::types::MinPaddingWithCustomType, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::apache::thrift::fixtures::types::MinPaddingWithCustomType>(
      "Module apache.thrift.fixtures.types.module import error");
  }
  auto obj = StrongRef(init__apache__thrift__fixtures__types__module__MinPaddingWithCustomType(fbthrift_data));
  if (!obj) {
      return extractorError<::apache::thrift::fixtures::types::MinPaddingWithCustomType>(
          "Init from fbthrift error: MinPaddingWithCustomType");
  }
  return Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::MinPaddingWithCustomType, ::apache__thrift__fixtures__types__module::NamespaceTag>>{}(*obj);
}

int Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::MinPaddingWithCustomType, ::apache__thrift__fixtures__types__module::NamespaceTag>>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module apache.thrift.fixtures.types.module import error");
  }
  int result =
      can_extract__apache__thrift__fixtures__types__module__MinPaddingWithCustomType(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MinPaddingWithCustomType");
  }
  return result;
}


PyObject* Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::MinPaddingWithCustomType, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(
    const ::apache::thrift::fixtures::types::MinPaddingWithCustomType& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  ::std::unique_ptr<::folly::IOBuf> serialized;
  try {
    serialized = detail::serialize_to_iobuf(val);
  } catch (const apache::thrift::TProtocolException& e) {
    detail::handle_protocol_error(e);
    return nullptr;
  }
  DCHECK(serialized);
  auto ptr = construct__apache__thrift__fixtures__types__module__MinPaddingWithCustomType(std::move(serialized));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::MinPaddingWithCustomType, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(
    const ::apache::thrift::fixtures::types::MinPaddingWithCustomType& val) {
  auto obj = StrongRef(Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::MinPaddingWithCustomType, ::apache__thrift__fixtures__types__module::NamespaceTag>>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::apache::thrift::fixtures::types::MyStruct>
Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::MyStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(PyObject* obj) {
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a MyStruct");
      }
      return extractorError<::apache::thrift::fixtures::types::MyStruct>(
          "Marshal error: MyStruct");
  }
  StrongRef fbThriftData(getThriftData(obj));
  return Extractor<::apache::thrift::python::capi::ComposedStruct<
      ::apache::thrift::fixtures::types::MyStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>>{}(*fbThriftData);
}

ExtractorResult<::apache::thrift::fixtures::types::MyStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::apache::thrift::fixtures::types::MyStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(PyObject* fbThriftData) {
  ::apache::thrift::fixtures::types::MyStruct cpp;
  std::optional<std::string_view> error;
  Extractor<int64_t>{}.extractInto(
      cpp.MyIntField_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__MyStruct__tuple_pos[0]),
      error);
  Extractor<Bytes>{}.extractInto(
      cpp.MyStringField_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__MyStruct__tuple_pos[1]),
      error);
  Extractor<int64_t>{}.extractInto(
      cpp.majorVer_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__MyStruct__tuple_pos[2]),
      error);
  Extractor<::apache::thrift::python::capi::ComposedStruct<::apache::thrift::fixtures::types::MyDataItem, ::apache__thrift__fixtures__types__module::NamespaceTag>>{}.extractInto(
      cpp.data_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__MyStruct__tuple_pos[3]),
      error);
  if (error) {
    return folly::makeUnexpected(*error);
  }
  return cpp;
}


int Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::MyStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module apache.thrift.fixtures.types.module import error");
  }
  int result =
      can_extract__apache__thrift__fixtures__types__module__MyStruct(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MyStruct");
  }
  return result;
}


PyObject* Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::MyStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(
    const ::apache::thrift::fixtures::types::MyStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::MyStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>> ctor;
  StrongRef fbthrift_data(ctor(val));
  if (!fbthrift_data) {
    return nullptr;
  }
  return init__apache__thrift__fixtures__types__module__MyStruct(*fbthrift_data);
}

PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::MyStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(
    [[maybe_unused]] const ::apache::thrift::fixtures::types::MyStruct& val) {
  StrongRef fbthrift_data(createStructTuple(4));
  StrongRef _fbthrift__MyIntField(
    Constructor<int64_t>{}
    .constructFrom(val.MyIntField_ref()));
  if (!_fbthrift__MyIntField ||
      setStructField(
          *fbthrift_data,
          _fbthrift__MyStruct__tuple_pos[0],
          *_fbthrift__MyIntField) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__MyStringField(
    Constructor<Bytes>{}
    .constructFrom(val.MyStringField_ref()));
  if (!_fbthrift__MyStringField ||
      setStructField(
          *fbthrift_data,
          _fbthrift__MyStruct__tuple_pos[1],
          *_fbthrift__MyStringField) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__majorVer(
    Constructor<int64_t>{}
    .constructFrom(val.majorVer_ref()));
  if (!_fbthrift__majorVer ||
      setStructField(
          *fbthrift_data,
          _fbthrift__MyStruct__tuple_pos[2],
          *_fbthrift__majorVer) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__data(
    Constructor<::apache::thrift::python::capi::ComposedStruct<::apache::thrift::fixtures::types::MyDataItem, ::apache__thrift__fixtures__types__module::NamespaceTag>>{}
    .constructFrom(val.data_ref()));
  if (!_fbthrift__data ||
      setStructField(
          *fbthrift_data,
          _fbthrift__MyStruct__tuple_pos[3],
          *_fbthrift__data) == -1) {
    return nullptr;
  }
  return std::move(fbthrift_data).release();
}


ExtractorResult<::apache::thrift::fixtures::types::MyDataItem>
Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::MyDataItem, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(PyObject* obj) {
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a MyDataItem");
      }
      return extractorError<::apache::thrift::fixtures::types::MyDataItem>(
          "Marshal error: MyDataItem");
  }
  return ::apache::thrift::fixtures::types::MyDataItem{};
}

ExtractorResult<::apache::thrift::fixtures::types::MyDataItem>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::apache::thrift::fixtures::types::MyDataItem, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(PyObject* fbThriftData) {
  ::apache::thrift::fixtures::types::MyDataItem cpp;
  (void)fbThriftData;
  return cpp;
}


int Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::MyDataItem, ::apache__thrift__fixtures__types__module::NamespaceTag>>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module apache.thrift.fixtures.types.module import error");
  }
  int result =
      can_extract__apache__thrift__fixtures__types__module__MyDataItem(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MyDataItem");
  }
  return result;
}


PyObject* Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::MyDataItem, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(
    const ::apache::thrift::fixtures::types::MyDataItem& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::MyDataItem, ::apache__thrift__fixtures__types__module::NamespaceTag>> ctor;
  StrongRef fbthrift_data(ctor(val));
  if (!fbthrift_data) {
    return nullptr;
  }
  return init__apache__thrift__fixtures__types__module__MyDataItem(*fbthrift_data);
}

PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::MyDataItem, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(
    [[maybe_unused]] const ::apache::thrift::fixtures::types::MyDataItem& val) {
  StrongRef fbthrift_data(createStructTuple(0));
  return std::move(fbthrift_data).release();
}


ExtractorResult<::apache::thrift::fixtures::types::Renamed>
Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::Renamed, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(PyObject* obj) {
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a Renaming");
      }
      return extractorError<::apache::thrift::fixtures::types::Renamed>(
          "Marshal error: Renaming");
  }
  StrongRef fbThriftData(getThriftData(obj));
  return Extractor<::apache::thrift::python::capi::ComposedStruct<
      ::apache::thrift::fixtures::types::Renamed, ::apache__thrift__fixtures__types__module::NamespaceTag>>{}(*fbThriftData);
}

ExtractorResult<::apache::thrift::fixtures::types::Renamed>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::apache::thrift::fixtures::types::Renamed, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(PyObject* fbThriftData) {
  ::apache::thrift::fixtures::types::Renamed cpp;
  std::optional<std::string_view> error;
  Extractor<int64_t>{}.extractInto(
      cpp.bar_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__Renaming__tuple_pos[0]),
      error);
  if (error) {
    return folly::makeUnexpected(*error);
  }
  return cpp;
}


int Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::Renamed, ::apache__thrift__fixtures__types__module::NamespaceTag>>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module apache.thrift.fixtures.types.module import error");
  }
  int result =
      can_extract__apache__thrift__fixtures__types__module__Renaming(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: Renaming");
  }
  return result;
}


PyObject* Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::Renamed, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(
    const ::apache::thrift::fixtures::types::Renamed& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::Renamed, ::apache__thrift__fixtures__types__module::NamespaceTag>> ctor;
  StrongRef fbthrift_data(ctor(val));
  if (!fbthrift_data) {
    return nullptr;
  }
  return init__apache__thrift__fixtures__types__module__Renaming(*fbthrift_data);
}

PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::Renamed, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(
    [[maybe_unused]] const ::apache::thrift::fixtures::types::Renamed& val) {
  StrongRef fbthrift_data(createStructTuple(1));
  StrongRef _fbthrift__foo(
    Constructor<int64_t>{}
    .constructFrom(val.bar_ref()));
  if (!_fbthrift__foo ||
      setStructField(
          *fbthrift_data,
          _fbthrift__Renaming__tuple_pos[0],
          *_fbthrift__foo) == -1) {
    return nullptr;
  }
  return std::move(fbthrift_data).release();
}


ExtractorResult<::apache::thrift::fixtures::types::AnnotatedTypes>
Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::AnnotatedTypes, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(PyObject* obj) {
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a AnnotatedTypes");
      }
      return extractorError<::apache::thrift::fixtures::types::AnnotatedTypes>(
          "Marshal error: AnnotatedTypes");
  }
  StrongRef fbThriftData(getThriftData(obj));
  return Extractor<::apache::thrift::python::capi::ComposedStruct<
      ::apache::thrift::fixtures::types::AnnotatedTypes, ::apache__thrift__fixtures__types__module::NamespaceTag>>{}(*fbThriftData);
}

ExtractorResult<::apache::thrift::fixtures::types::AnnotatedTypes>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::apache::thrift::fixtures::types::AnnotatedTypes, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(PyObject* fbThriftData) {
  ::apache::thrift::fixtures::types::AnnotatedTypes cpp;
  std::optional<std::string_view> error;
  Extractor<Bytes>{}.extractInto(
      cpp.binary_field_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__AnnotatedTypes__tuple_pos[0]),
      error);
  Extractor<list<map<int32_t, Bytes, std::unordered_map<native_t<int32_t>, native_t<Bytes>>>>>{}.extractInto(
      cpp.list_field_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__AnnotatedTypes__tuple_pos[1]),
      error);
  if (error) {
    return folly::makeUnexpected(*error);
  }
  return cpp;
}


int Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::AnnotatedTypes, ::apache__thrift__fixtures__types__module::NamespaceTag>>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module apache.thrift.fixtures.types.module import error");
  }
  int result =
      can_extract__apache__thrift__fixtures__types__module__AnnotatedTypes(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: AnnotatedTypes");
  }
  return result;
}


PyObject* Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::AnnotatedTypes, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(
    const ::apache::thrift::fixtures::types::AnnotatedTypes& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::AnnotatedTypes, ::apache__thrift__fixtures__types__module::NamespaceTag>> ctor;
  StrongRef fbthrift_data(ctor(val));
  if (!fbthrift_data) {
    return nullptr;
  }
  return init__apache__thrift__fixtures__types__module__AnnotatedTypes(*fbthrift_data);
}

PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::AnnotatedTypes, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(
    [[maybe_unused]] const ::apache::thrift::fixtures::types::AnnotatedTypes& val) {
  StrongRef fbthrift_data(createStructTuple(2));
  StrongRef _fbthrift__binary_field(
    Constructor<Bytes>{}
    .constructFrom(val.binary_field_ref()));
  if (!_fbthrift__binary_field ||
      setStructField(
          *fbthrift_data,
          _fbthrift__AnnotatedTypes__tuple_pos[0],
          *_fbthrift__binary_field) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__list_field(
    Constructor<list<map<int32_t, Bytes, std::unordered_map<native_t<int32_t>, native_t<Bytes>>>>>{}
    .constructFrom(val.list_field_ref()));
  if (!_fbthrift__list_field ||
      setStructField(
          *fbthrift_data,
          _fbthrift__AnnotatedTypes__tuple_pos[1],
          *_fbthrift__list_field) == -1) {
    return nullptr;
  }
  return std::move(fbthrift_data).release();
}


ExtractorResult<::apache::thrift::fixtures::types::ForwardUsageRoot>
Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::ForwardUsageRoot, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(PyObject* obj) {
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a ForwardUsageRoot");
      }
      return extractorError<::apache::thrift::fixtures::types::ForwardUsageRoot>(
          "Marshal error: ForwardUsageRoot");
  }
  StrongRef fbThriftData(getThriftData(obj));
  return Extractor<::apache::thrift::python::capi::ComposedStruct<
      ::apache::thrift::fixtures::types::ForwardUsageRoot, ::apache__thrift__fixtures__types__module::NamespaceTag>>{}(*fbThriftData);
}

ExtractorResult<::apache::thrift::fixtures::types::ForwardUsageRoot>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::apache::thrift::fixtures::types::ForwardUsageRoot, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(PyObject* fbThriftData) {
  ::apache::thrift::fixtures::types::ForwardUsageRoot cpp;
  std::optional<std::string_view> error;
  Extractor<::apache::thrift::python::capi::ComposedStruct<::apache::thrift::fixtures::types::ForwardUsageStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>>{}.extractInto(
      cpp.ForwardUsageStruct_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__ForwardUsageRoot__tuple_pos[0]),
      error);
  Extractor<::apache::thrift::python::capi::ComposedStruct<::apache::thrift::fixtures::types::ForwardUsageByRef, ::apache__thrift__fixtures__types__module::NamespaceTag>>{}.extractInto(
      cpp.ForwardUsageByRef_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__ForwardUsageRoot__tuple_pos[1]),
      error);
  if (error) {
    return folly::makeUnexpected(*error);
  }
  return cpp;
}


int Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::ForwardUsageRoot, ::apache__thrift__fixtures__types__module::NamespaceTag>>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module apache.thrift.fixtures.types.module import error");
  }
  int result =
      can_extract__apache__thrift__fixtures__types__module__ForwardUsageRoot(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: ForwardUsageRoot");
  }
  return result;
}


PyObject* Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::ForwardUsageRoot, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(
    const ::apache::thrift::fixtures::types::ForwardUsageRoot& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::ForwardUsageRoot, ::apache__thrift__fixtures__types__module::NamespaceTag>> ctor;
  StrongRef fbthrift_data(ctor(val));
  if (!fbthrift_data) {
    return nullptr;
  }
  return init__apache__thrift__fixtures__types__module__ForwardUsageRoot(*fbthrift_data);
}

PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::ForwardUsageRoot, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(
    [[maybe_unused]] const ::apache::thrift::fixtures::types::ForwardUsageRoot& val) {
  StrongRef fbthrift_data(createStructTuple(2));
  StrongRef _fbthrift__ForwardUsageStruct(
    Constructor<::apache::thrift::python::capi::ComposedStruct<::apache::thrift::fixtures::types::ForwardUsageStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>>{}
    .constructFrom(val.ForwardUsageStruct_ref()));
  if (_fbthrift__ForwardUsageStruct.isNone()) {
    Py_INCREF(Py_None);
    PyTuple_SET_ITEM(
      *fbthrift_data,
      _fbthrift__ForwardUsageRoot__tuple_pos[0],
      Py_None);
  } else
  if (!_fbthrift__ForwardUsageStruct ||
      setStructField(
          *fbthrift_data,
          _fbthrift__ForwardUsageRoot__tuple_pos[0],
          *_fbthrift__ForwardUsageStruct) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__ForwardUsageByRef(
    Constructor<::apache::thrift::python::capi::ComposedStruct<::apache::thrift::fixtures::types::ForwardUsageByRef, ::apache__thrift__fixtures__types__module::NamespaceTag>>{}
    .constructFrom(val.ForwardUsageByRef_ref()));
  if (_fbthrift__ForwardUsageByRef.isNone()) {
    Py_INCREF(Py_None);
    PyTuple_SET_ITEM(
      *fbthrift_data,
      _fbthrift__ForwardUsageRoot__tuple_pos[1],
      Py_None);
  } else
  if (!_fbthrift__ForwardUsageByRef ||
      setStructField(
          *fbthrift_data,
          _fbthrift__ForwardUsageRoot__tuple_pos[1],
          *_fbthrift__ForwardUsageByRef) == -1) {
    return nullptr;
  }
  return std::move(fbthrift_data).release();
}


ExtractorResult<::apache::thrift::fixtures::types::ForwardUsageStruct>
Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::ForwardUsageStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(PyObject* obj) {
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a ForwardUsageStruct");
      }
      return extractorError<::apache::thrift::fixtures::types::ForwardUsageStruct>(
          "Marshal error: ForwardUsageStruct");
  }
  StrongRef fbThriftData(getThriftData(obj));
  return Extractor<::apache::thrift::python::capi::ComposedStruct<
      ::apache::thrift::fixtures::types::ForwardUsageStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>>{}(*fbThriftData);
}

ExtractorResult<::apache::thrift::fixtures::types::ForwardUsageStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::apache::thrift::fixtures::types::ForwardUsageStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(PyObject* fbThriftData) {
  ::apache::thrift::fixtures::types::ForwardUsageStruct cpp;
  std::optional<std::string_view> error;
  Extractor<::apache::thrift::python::capi::ComposedStruct<::apache::thrift::fixtures::types::ForwardUsageRoot, ::apache__thrift__fixtures__types__module::NamespaceTag>>{}.extractInto(
      cpp.foo_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__ForwardUsageStruct__tuple_pos[0]),
      error);
  if (error) {
    return folly::makeUnexpected(*error);
  }
  return cpp;
}


int Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::ForwardUsageStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module apache.thrift.fixtures.types.module import error");
  }
  int result =
      can_extract__apache__thrift__fixtures__types__module__ForwardUsageStruct(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: ForwardUsageStruct");
  }
  return result;
}


PyObject* Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::ForwardUsageStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(
    const ::apache::thrift::fixtures::types::ForwardUsageStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::ForwardUsageStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>> ctor;
  StrongRef fbthrift_data(ctor(val));
  if (!fbthrift_data) {
    return nullptr;
  }
  return init__apache__thrift__fixtures__types__module__ForwardUsageStruct(*fbthrift_data);
}

PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::ForwardUsageStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(
    [[maybe_unused]] const ::apache::thrift::fixtures::types::ForwardUsageStruct& val) {
  StrongRef fbthrift_data(createStructTuple(1));
  StrongRef _fbthrift__foo(
    Constructor<::apache::thrift::python::capi::ComposedStruct<::apache::thrift::fixtures::types::ForwardUsageRoot, ::apache__thrift__fixtures__types__module::NamespaceTag>>{}
    .constructFrom(val.foo_ref()));
  if (_fbthrift__foo.isNone()) {
    Py_INCREF(Py_None);
    PyTuple_SET_ITEM(
      *fbthrift_data,
      _fbthrift__ForwardUsageStruct__tuple_pos[0],
      Py_None);
  } else
  if (!_fbthrift__foo ||
      setStructField(
          *fbthrift_data,
          _fbthrift__ForwardUsageStruct__tuple_pos[0],
          *_fbthrift__foo) == -1) {
    return nullptr;
  }
  return std::move(fbthrift_data).release();
}


ExtractorResult<::apache::thrift::fixtures::types::ForwardUsageByRef>
Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::ForwardUsageByRef, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(PyObject* obj) {
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a ForwardUsageByRef");
      }
      return extractorError<::apache::thrift::fixtures::types::ForwardUsageByRef>(
          "Marshal error: ForwardUsageByRef");
  }
  StrongRef fbThriftData(getThriftData(obj));
  return Extractor<::apache::thrift::python::capi::ComposedStruct<
      ::apache::thrift::fixtures::types::ForwardUsageByRef, ::apache__thrift__fixtures__types__module::NamespaceTag>>{}(*fbThriftData);
}

ExtractorResult<::apache::thrift::fixtures::types::ForwardUsageByRef>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::apache::thrift::fixtures::types::ForwardUsageByRef, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(PyObject* fbThriftData) {
  ::apache::thrift::fixtures::types::ForwardUsageByRef cpp;
  std::optional<std::string_view> error;
  Extractor<::apache::thrift::python::capi::ComposedStruct<::apache::thrift::fixtures::types::ForwardUsageRoot, ::apache__thrift__fixtures__types__module::NamespaceTag>>{}.extractInto(
      cpp.foo_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__ForwardUsageByRef__tuple_pos[0]),
      error);
  if (error) {
    return folly::makeUnexpected(*error);
  }
  return cpp;
}


int Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::ForwardUsageByRef, ::apache__thrift__fixtures__types__module::NamespaceTag>>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module apache.thrift.fixtures.types.module import error");
  }
  int result =
      can_extract__apache__thrift__fixtures__types__module__ForwardUsageByRef(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: ForwardUsageByRef");
  }
  return result;
}


PyObject* Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::ForwardUsageByRef, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(
    const ::apache::thrift::fixtures::types::ForwardUsageByRef& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::ForwardUsageByRef, ::apache__thrift__fixtures__types__module::NamespaceTag>> ctor;
  StrongRef fbthrift_data(ctor(val));
  if (!fbthrift_data) {
    return nullptr;
  }
  return init__apache__thrift__fixtures__types__module__ForwardUsageByRef(*fbthrift_data);
}

PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::ForwardUsageByRef, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(
    [[maybe_unused]] const ::apache::thrift::fixtures::types::ForwardUsageByRef& val) {
  StrongRef fbthrift_data(createStructTuple(1));
  StrongRef _fbthrift__foo(
    Constructor<::apache::thrift::python::capi::ComposedStruct<::apache::thrift::fixtures::types::ForwardUsageRoot, ::apache__thrift__fixtures__types__module::NamespaceTag>>{}
    .constructFrom(val.foo_ref()));
  if (_fbthrift__foo.isNone()) {
    Py_INCREF(Py_None);
    PyTuple_SET_ITEM(
      *fbthrift_data,
      _fbthrift__ForwardUsageByRef__tuple_pos[0],
      Py_None);
  } else
  if (!_fbthrift__foo ||
      setStructField(
          *fbthrift_data,
          _fbthrift__ForwardUsageByRef__tuple_pos[0],
          *_fbthrift__foo) == -1) {
    return nullptr;
  }
  return std::move(fbthrift_data).release();
}


ExtractorResult<::apache::thrift::fixtures::types::IncompleteMap>
Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::IncompleteMap, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(PyObject* obj) {
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a IncompleteMap");
      }
      return extractorError<::apache::thrift::fixtures::types::IncompleteMap>(
          "Marshal error: IncompleteMap");
  }
  StrongRef fbThriftData(getThriftData(obj));
  return Extractor<::apache::thrift::python::capi::ComposedStruct<
      ::apache::thrift::fixtures::types::IncompleteMap, ::apache__thrift__fixtures__types__module::NamespaceTag>>{}(*fbThriftData);
}

ExtractorResult<::apache::thrift::fixtures::types::IncompleteMap>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::apache::thrift::fixtures::types::IncompleteMap, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(PyObject* fbThriftData) {
  ::apache::thrift::fixtures::types::IncompleteMap cpp;
  std::optional<std::string_view> error;
  Extractor<map<int32_t, ::apache::thrift::python::capi::ComposedStruct<::apache::thrift::fixtures::types::IncompleteMapDep, ::apache__thrift__fixtures__types__module::NamespaceTag>>>{}.extractInto(
      cpp.field_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__IncompleteMap__tuple_pos[0]),
      error);
  if (error) {
    return folly::makeUnexpected(*error);
  }
  return cpp;
}


int Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::IncompleteMap, ::apache__thrift__fixtures__types__module::NamespaceTag>>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module apache.thrift.fixtures.types.module import error");
  }
  int result =
      can_extract__apache__thrift__fixtures__types__module__IncompleteMap(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: IncompleteMap");
  }
  return result;
}


PyObject* Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::IncompleteMap, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(
    const ::apache::thrift::fixtures::types::IncompleteMap& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::IncompleteMap, ::apache__thrift__fixtures__types__module::NamespaceTag>> ctor;
  StrongRef fbthrift_data(ctor(val));
  if (!fbthrift_data) {
    return nullptr;
  }
  return init__apache__thrift__fixtures__types__module__IncompleteMap(*fbthrift_data);
}

PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::IncompleteMap, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(
    [[maybe_unused]] const ::apache::thrift::fixtures::types::IncompleteMap& val) {
  StrongRef fbthrift_data(createStructTuple(1));
  StrongRef _fbthrift__field(
    Constructor<map<int32_t, ::apache::thrift::python::capi::ComposedStruct<::apache::thrift::fixtures::types::IncompleteMapDep, ::apache__thrift__fixtures__types__module::NamespaceTag>>>{}
    .constructFrom(val.field_ref()));
  if (_fbthrift__field.isNone()) {
    Py_INCREF(Py_None);
    PyTuple_SET_ITEM(
      *fbthrift_data,
      _fbthrift__IncompleteMap__tuple_pos[0],
      Py_None);
  } else
  if (!_fbthrift__field ||
      setStructField(
          *fbthrift_data,
          _fbthrift__IncompleteMap__tuple_pos[0],
          *_fbthrift__field) == -1) {
    return nullptr;
  }
  return std::move(fbthrift_data).release();
}


ExtractorResult<::apache::thrift::fixtures::types::IncompleteMapDep>
Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::IncompleteMapDep, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(PyObject* obj) {
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a IncompleteMapDep");
      }
      return extractorError<::apache::thrift::fixtures::types::IncompleteMapDep>(
          "Marshal error: IncompleteMapDep");
  }
  return ::apache::thrift::fixtures::types::IncompleteMapDep{};
}

ExtractorResult<::apache::thrift::fixtures::types::IncompleteMapDep>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::apache::thrift::fixtures::types::IncompleteMapDep, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(PyObject* fbThriftData) {
  ::apache::thrift::fixtures::types::IncompleteMapDep cpp;
  (void)fbThriftData;
  return cpp;
}


int Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::IncompleteMapDep, ::apache__thrift__fixtures__types__module::NamespaceTag>>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module apache.thrift.fixtures.types.module import error");
  }
  int result =
      can_extract__apache__thrift__fixtures__types__module__IncompleteMapDep(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: IncompleteMapDep");
  }
  return result;
}


PyObject* Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::IncompleteMapDep, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(
    const ::apache::thrift::fixtures::types::IncompleteMapDep& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::IncompleteMapDep, ::apache__thrift__fixtures__types__module::NamespaceTag>> ctor;
  StrongRef fbthrift_data(ctor(val));
  if (!fbthrift_data) {
    return nullptr;
  }
  return init__apache__thrift__fixtures__types__module__IncompleteMapDep(*fbthrift_data);
}

PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::IncompleteMapDep, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(
    [[maybe_unused]] const ::apache::thrift::fixtures::types::IncompleteMapDep& val) {
  StrongRef fbthrift_data(createStructTuple(0));
  return std::move(fbthrift_data).release();
}


ExtractorResult<::apache::thrift::fixtures::types::CompleteMap>
Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::CompleteMap, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(PyObject* obj) {
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a CompleteMap");
      }
      return extractorError<::apache::thrift::fixtures::types::CompleteMap>(
          "Marshal error: CompleteMap");
  }
  StrongRef fbThriftData(getThriftData(obj));
  return Extractor<::apache::thrift::python::capi::ComposedStruct<
      ::apache::thrift::fixtures::types::CompleteMap, ::apache__thrift__fixtures__types__module::NamespaceTag>>{}(*fbThriftData);
}

ExtractorResult<::apache::thrift::fixtures::types::CompleteMap>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::apache::thrift::fixtures::types::CompleteMap, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(PyObject* fbThriftData) {
  ::apache::thrift::fixtures::types::CompleteMap cpp;
  std::optional<std::string_view> error;
  Extractor<map<int32_t, ::apache::thrift::python::capi::ComposedStruct<::apache::thrift::fixtures::types::CompleteMapDep, ::apache__thrift__fixtures__types__module::NamespaceTag>, std::unordered_map<native_t<int32_t>, native_t<::apache::thrift::python::capi::ComposedStruct<::apache::thrift::fixtures::types::CompleteMapDep, ::apache__thrift__fixtures__types__module::NamespaceTag>>>>>{}.extractInto(
      cpp.field_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__CompleteMap__tuple_pos[0]),
      error);
  if (error) {
    return folly::makeUnexpected(*error);
  }
  return cpp;
}


int Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::CompleteMap, ::apache__thrift__fixtures__types__module::NamespaceTag>>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module apache.thrift.fixtures.types.module import error");
  }
  int result =
      can_extract__apache__thrift__fixtures__types__module__CompleteMap(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: CompleteMap");
  }
  return result;
}


PyObject* Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::CompleteMap, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(
    const ::apache::thrift::fixtures::types::CompleteMap& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::CompleteMap, ::apache__thrift__fixtures__types__module::NamespaceTag>> ctor;
  StrongRef fbthrift_data(ctor(val));
  if (!fbthrift_data) {
    return nullptr;
  }
  return init__apache__thrift__fixtures__types__module__CompleteMap(*fbthrift_data);
}

PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::CompleteMap, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(
    [[maybe_unused]] const ::apache::thrift::fixtures::types::CompleteMap& val) {
  StrongRef fbthrift_data(createStructTuple(1));
  StrongRef _fbthrift__field(
    Constructor<map<int32_t, ::apache::thrift::python::capi::ComposedStruct<::apache::thrift::fixtures::types::CompleteMapDep, ::apache__thrift__fixtures__types__module::NamespaceTag>, std::unordered_map<native_t<int32_t>, native_t<::apache::thrift::python::capi::ComposedStruct<::apache::thrift::fixtures::types::CompleteMapDep, ::apache__thrift__fixtures__types__module::NamespaceTag>>>>>{}
    .constructFrom(val.field_ref()));
  if (_fbthrift__field.isNone()) {
    Py_INCREF(Py_None);
    PyTuple_SET_ITEM(
      *fbthrift_data,
      _fbthrift__CompleteMap__tuple_pos[0],
      Py_None);
  } else
  if (!_fbthrift__field ||
      setStructField(
          *fbthrift_data,
          _fbthrift__CompleteMap__tuple_pos[0],
          *_fbthrift__field) == -1) {
    return nullptr;
  }
  return std::move(fbthrift_data).release();
}


ExtractorResult<::apache::thrift::fixtures::types::CompleteMapDep>
Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::CompleteMapDep, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(PyObject* obj) {
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a CompleteMapDep");
      }
      return extractorError<::apache::thrift::fixtures::types::CompleteMapDep>(
          "Marshal error: CompleteMapDep");
  }
  return ::apache::thrift::fixtures::types::CompleteMapDep{};
}

ExtractorResult<::apache::thrift::fixtures::types::CompleteMapDep>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::apache::thrift::fixtures::types::CompleteMapDep, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(PyObject* fbThriftData) {
  ::apache::thrift::fixtures::types::CompleteMapDep cpp;
  (void)fbThriftData;
  return cpp;
}


int Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::CompleteMapDep, ::apache__thrift__fixtures__types__module::NamespaceTag>>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module apache.thrift.fixtures.types.module import error");
  }
  int result =
      can_extract__apache__thrift__fixtures__types__module__CompleteMapDep(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: CompleteMapDep");
  }
  return result;
}


PyObject* Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::CompleteMapDep, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(
    const ::apache::thrift::fixtures::types::CompleteMapDep& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::CompleteMapDep, ::apache__thrift__fixtures__types__module::NamespaceTag>> ctor;
  StrongRef fbthrift_data(ctor(val));
  if (!fbthrift_data) {
    return nullptr;
  }
  return init__apache__thrift__fixtures__types__module__CompleteMapDep(*fbthrift_data);
}

PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::CompleteMapDep, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(
    [[maybe_unused]] const ::apache::thrift::fixtures::types::CompleteMapDep& val) {
  StrongRef fbthrift_data(createStructTuple(0));
  return std::move(fbthrift_data).release();
}


ExtractorResult<::apache::thrift::fixtures::types::IncompleteList>
Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::IncompleteList, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::apache::thrift::fixtures::types::IncompleteList>(
      "Module apache.thrift.fixtures.types.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__apache__thrift__fixtures__types__module__IncompleteList(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::apache::thrift::fixtures::types::IncompleteList>(
        "Thrift serialize error: IncompleteList");
  }
  return detail::deserialize_iobuf<::apache::thrift::fixtures::types::IncompleteList>(std::move(val));
}


ExtractorResult<::apache::thrift::fixtures::types::IncompleteList>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::apache::thrift::fixtures::types::IncompleteList, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::apache::thrift::fixtures::types::IncompleteList>(
      "Module apache.thrift.fixtures.types.module import error");
  }
  auto obj = StrongRef(init__apache__thrift__fixtures__types__module__IncompleteList(fbthrift_data));
  if (!obj) {
      return extractorError<::apache::thrift::fixtures::types::IncompleteList>(
          "Init from fbthrift error: IncompleteList");
  }
  return Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::IncompleteList, ::apache__thrift__fixtures__types__module::NamespaceTag>>{}(*obj);
}

int Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::IncompleteList, ::apache__thrift__fixtures__types__module::NamespaceTag>>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module apache.thrift.fixtures.types.module import error");
  }
  int result =
      can_extract__apache__thrift__fixtures__types__module__IncompleteList(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: IncompleteList");
  }
  return result;
}


PyObject* Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::IncompleteList, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(
    const ::apache::thrift::fixtures::types::IncompleteList& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  ::std::unique_ptr<::folly::IOBuf> serialized;
  try {
    serialized = detail::serialize_to_iobuf(val);
  } catch (const apache::thrift::TProtocolException& e) {
    detail::handle_protocol_error(e);
    return nullptr;
  }
  DCHECK(serialized);
  auto ptr = construct__apache__thrift__fixtures__types__module__IncompleteList(std::move(serialized));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::IncompleteList, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(
    const ::apache::thrift::fixtures::types::IncompleteList& val) {
  auto obj = StrongRef(Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::IncompleteList, ::apache__thrift__fixtures__types__module::NamespaceTag>>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::apache::thrift::fixtures::types::IncompleteListDep>
Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::IncompleteListDep, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(PyObject* obj) {
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a IncompleteListDep");
      }
      return extractorError<::apache::thrift::fixtures::types::IncompleteListDep>(
          "Marshal error: IncompleteListDep");
  }
  return ::apache::thrift::fixtures::types::IncompleteListDep{};
}

ExtractorResult<::apache::thrift::fixtures::types::IncompleteListDep>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::apache::thrift::fixtures::types::IncompleteListDep, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(PyObject* fbThriftData) {
  ::apache::thrift::fixtures::types::IncompleteListDep cpp;
  (void)fbThriftData;
  return cpp;
}


int Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::IncompleteListDep, ::apache__thrift__fixtures__types__module::NamespaceTag>>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module apache.thrift.fixtures.types.module import error");
  }
  int result =
      can_extract__apache__thrift__fixtures__types__module__IncompleteListDep(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: IncompleteListDep");
  }
  return result;
}


PyObject* Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::IncompleteListDep, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(
    const ::apache::thrift::fixtures::types::IncompleteListDep& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::IncompleteListDep, ::apache__thrift__fixtures__types__module::NamespaceTag>> ctor;
  StrongRef fbthrift_data(ctor(val));
  if (!fbthrift_data) {
    return nullptr;
  }
  return init__apache__thrift__fixtures__types__module__IncompleteListDep(*fbthrift_data);
}

PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::IncompleteListDep, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(
    [[maybe_unused]] const ::apache::thrift::fixtures::types::IncompleteListDep& val) {
  StrongRef fbthrift_data(createStructTuple(0));
  return std::move(fbthrift_data).release();
}


ExtractorResult<::apache::thrift::fixtures::types::CompleteList>
Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::CompleteList, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(PyObject* obj) {
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a CompleteList");
      }
      return extractorError<::apache::thrift::fixtures::types::CompleteList>(
          "Marshal error: CompleteList");
  }
  StrongRef fbThriftData(getThriftData(obj));
  return Extractor<::apache::thrift::python::capi::ComposedStruct<
      ::apache::thrift::fixtures::types::CompleteList, ::apache__thrift__fixtures__types__module::NamespaceTag>>{}(*fbThriftData);
}

ExtractorResult<::apache::thrift::fixtures::types::CompleteList>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::apache::thrift::fixtures::types::CompleteList, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(PyObject* fbThriftData) {
  ::apache::thrift::fixtures::types::CompleteList cpp;
  std::optional<std::string_view> error;
  Extractor<list<::apache::thrift::python::capi::ComposedStruct<::apache::thrift::fixtures::types::CompleteListDep, ::apache__thrift__fixtures__types__module::NamespaceTag>, folly::small_vector<native_t<::apache::thrift::python::capi::ComposedStruct<::apache::thrift::fixtures::types::CompleteListDep, ::apache__thrift__fixtures__types__module::NamespaceTag>>>>>{}.extractInto(
      cpp.field_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__CompleteList__tuple_pos[0]),
      error);
  if (error) {
    return folly::makeUnexpected(*error);
  }
  return cpp;
}


int Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::CompleteList, ::apache__thrift__fixtures__types__module::NamespaceTag>>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module apache.thrift.fixtures.types.module import error");
  }
  int result =
      can_extract__apache__thrift__fixtures__types__module__CompleteList(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: CompleteList");
  }
  return result;
}


PyObject* Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::CompleteList, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(
    const ::apache::thrift::fixtures::types::CompleteList& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::CompleteList, ::apache__thrift__fixtures__types__module::NamespaceTag>> ctor;
  StrongRef fbthrift_data(ctor(val));
  if (!fbthrift_data) {
    return nullptr;
  }
  return init__apache__thrift__fixtures__types__module__CompleteList(*fbthrift_data);
}

PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::CompleteList, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(
    [[maybe_unused]] const ::apache::thrift::fixtures::types::CompleteList& val) {
  StrongRef fbthrift_data(createStructTuple(1));
  StrongRef _fbthrift__field(
    Constructor<list<::apache::thrift::python::capi::ComposedStruct<::apache::thrift::fixtures::types::CompleteListDep, ::apache__thrift__fixtures__types__module::NamespaceTag>, folly::small_vector<native_t<::apache::thrift::python::capi::ComposedStruct<::apache::thrift::fixtures::types::CompleteListDep, ::apache__thrift__fixtures__types__module::NamespaceTag>>>>>{}
    .constructFrom(val.field_ref()));
  if (_fbthrift__field.isNone()) {
    Py_INCREF(Py_None);
    PyTuple_SET_ITEM(
      *fbthrift_data,
      _fbthrift__CompleteList__tuple_pos[0],
      Py_None);
  } else
  if (!_fbthrift__field ||
      setStructField(
          *fbthrift_data,
          _fbthrift__CompleteList__tuple_pos[0],
          *_fbthrift__field) == -1) {
    return nullptr;
  }
  return std::move(fbthrift_data).release();
}


ExtractorResult<::apache::thrift::fixtures::types::CompleteListDep>
Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::CompleteListDep, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(PyObject* obj) {
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a CompleteListDep");
      }
      return extractorError<::apache::thrift::fixtures::types::CompleteListDep>(
          "Marshal error: CompleteListDep");
  }
  return ::apache::thrift::fixtures::types::CompleteListDep{};
}

ExtractorResult<::apache::thrift::fixtures::types::CompleteListDep>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::apache::thrift::fixtures::types::CompleteListDep, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(PyObject* fbThriftData) {
  ::apache::thrift::fixtures::types::CompleteListDep cpp;
  (void)fbThriftData;
  return cpp;
}


int Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::CompleteListDep, ::apache__thrift__fixtures__types__module::NamespaceTag>>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module apache.thrift.fixtures.types.module import error");
  }
  int result =
      can_extract__apache__thrift__fixtures__types__module__CompleteListDep(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: CompleteListDep");
  }
  return result;
}


PyObject* Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::CompleteListDep, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(
    const ::apache::thrift::fixtures::types::CompleteListDep& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::CompleteListDep, ::apache__thrift__fixtures__types__module::NamespaceTag>> ctor;
  StrongRef fbthrift_data(ctor(val));
  if (!fbthrift_data) {
    return nullptr;
  }
  return init__apache__thrift__fixtures__types__module__CompleteListDep(*fbthrift_data);
}

PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::CompleteListDep, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(
    [[maybe_unused]] const ::apache::thrift::fixtures::types::CompleteListDep& val) {
  StrongRef fbthrift_data(createStructTuple(0));
  return std::move(fbthrift_data).release();
}


ExtractorResult<::apache::thrift::fixtures::types::AdaptedList>
Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::AdaptedList, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::apache::thrift::fixtures::types::AdaptedList>(
      "Module apache.thrift.fixtures.types.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__apache__thrift__fixtures__types__module__AdaptedList(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::apache::thrift::fixtures::types::AdaptedList>(
        "Thrift serialize error: AdaptedList");
  }
  return detail::deserialize_iobuf<::apache::thrift::fixtures::types::AdaptedList>(std::move(val));
}


ExtractorResult<::apache::thrift::fixtures::types::AdaptedList>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::apache::thrift::fixtures::types::AdaptedList, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::apache::thrift::fixtures::types::AdaptedList>(
      "Module apache.thrift.fixtures.types.module import error");
  }
  auto obj = StrongRef(init__apache__thrift__fixtures__types__module__AdaptedList(fbthrift_data));
  if (!obj) {
      return extractorError<::apache::thrift::fixtures::types::AdaptedList>(
          "Init from fbthrift error: AdaptedList");
  }
  return Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::AdaptedList, ::apache__thrift__fixtures__types__module::NamespaceTag>>{}(*obj);
}

int Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::AdaptedList, ::apache__thrift__fixtures__types__module::NamespaceTag>>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module apache.thrift.fixtures.types.module import error");
  }
  int result =
      can_extract__apache__thrift__fixtures__types__module__AdaptedList(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: AdaptedList");
  }
  return result;
}


PyObject* Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::AdaptedList, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(
    const ::apache::thrift::fixtures::types::AdaptedList& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  ::std::unique_ptr<::folly::IOBuf> serialized;
  try {
    serialized = detail::serialize_to_iobuf(val);
  } catch (const apache::thrift::TProtocolException& e) {
    detail::handle_protocol_error(e);
    return nullptr;
  }
  DCHECK(serialized);
  auto ptr = construct__apache__thrift__fixtures__types__module__AdaptedList(std::move(serialized));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::AdaptedList, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(
    const ::apache::thrift::fixtures::types::AdaptedList& val) {
  auto obj = StrongRef(Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::AdaptedList, ::apache__thrift__fixtures__types__module::NamespaceTag>>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::apache::thrift::fixtures::types::detail::AdaptedListDep>
Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::detail::AdaptedListDep, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(PyObject* obj) {
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a AdaptedListDep");
      }
      return extractorError<::apache::thrift::fixtures::types::detail::AdaptedListDep>(
          "Marshal error: AdaptedListDep");
  }
  StrongRef fbThriftData(getThriftData(obj));
  return Extractor<::apache::thrift::python::capi::ComposedStruct<
      ::apache::thrift::fixtures::types::detail::AdaptedListDep, ::apache__thrift__fixtures__types__module::NamespaceTag>>{}(*fbThriftData);
}

ExtractorResult<::apache::thrift::fixtures::types::detail::AdaptedListDep>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::apache::thrift::fixtures::types::detail::AdaptedListDep, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(PyObject* fbThriftData) {
  ::apache::thrift::fixtures::types::detail::AdaptedListDep cpp;
  std::optional<std::string_view> error;
  Extractor<::apache::thrift::python::capi::ComposedStruct<::apache::thrift::fixtures::types::AdaptedList, ::apache__thrift__fixtures__types__module::NamespaceTag>>{}.extractInto(
      cpp.field_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__AdaptedListDep__tuple_pos[0]),
      error);
  if (error) {
    return folly::makeUnexpected(*error);
  }
  return cpp;
}


int Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::detail::AdaptedListDep, ::apache__thrift__fixtures__types__module::NamespaceTag>>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module apache.thrift.fixtures.types.module import error");
  }
  int result =
      can_extract__apache__thrift__fixtures__types__module__AdaptedListDep(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: AdaptedListDep");
  }
  return result;
}


PyObject* Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::detail::AdaptedListDep, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(
    const ::apache::thrift::fixtures::types::detail::AdaptedListDep& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::detail::AdaptedListDep, ::apache__thrift__fixtures__types__module::NamespaceTag>> ctor;
  StrongRef fbthrift_data(ctor(val));
  if (!fbthrift_data) {
    return nullptr;
  }
  return init__apache__thrift__fixtures__types__module__AdaptedListDep(*fbthrift_data);
}

PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::detail::AdaptedListDep, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(
    [[maybe_unused]] const ::apache::thrift::fixtures::types::detail::AdaptedListDep& val) {
  StrongRef fbthrift_data(createStructTuple(1));
  StrongRef _fbthrift__field(
    Constructor<::apache::thrift::python::capi::ComposedStruct<::apache::thrift::fixtures::types::AdaptedList, ::apache__thrift__fixtures__types__module::NamespaceTag>>{}
    .constructFrom(val.field_ref()));
  if (!_fbthrift__field ||
      setStructField(
          *fbthrift_data,
          _fbthrift__AdaptedListDep__tuple_pos[0],
          *_fbthrift__field) == -1) {
    return nullptr;
  }
  return std::move(fbthrift_data).release();
}


ExtractorResult<::apache::thrift::fixtures::types::DependentAdaptedList>
Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::DependentAdaptedList, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::apache::thrift::fixtures::types::DependentAdaptedList>(
      "Module apache.thrift.fixtures.types.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__apache__thrift__fixtures__types__module__DependentAdaptedList(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::apache::thrift::fixtures::types::DependentAdaptedList>(
        "Thrift serialize error: DependentAdaptedList");
  }
  return detail::deserialize_iobuf<::apache::thrift::fixtures::types::DependentAdaptedList>(std::move(val));
}


ExtractorResult<::apache::thrift::fixtures::types::DependentAdaptedList>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::apache::thrift::fixtures::types::DependentAdaptedList, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::apache::thrift::fixtures::types::DependentAdaptedList>(
      "Module apache.thrift.fixtures.types.module import error");
  }
  auto obj = StrongRef(init__apache__thrift__fixtures__types__module__DependentAdaptedList(fbthrift_data));
  if (!obj) {
      return extractorError<::apache::thrift::fixtures::types::DependentAdaptedList>(
          "Init from fbthrift error: DependentAdaptedList");
  }
  return Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::DependentAdaptedList, ::apache__thrift__fixtures__types__module::NamespaceTag>>{}(*obj);
}

int Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::DependentAdaptedList, ::apache__thrift__fixtures__types__module::NamespaceTag>>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module apache.thrift.fixtures.types.module import error");
  }
  int result =
      can_extract__apache__thrift__fixtures__types__module__DependentAdaptedList(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: DependentAdaptedList");
  }
  return result;
}


PyObject* Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::DependentAdaptedList, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(
    const ::apache::thrift::fixtures::types::DependentAdaptedList& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  ::std::unique_ptr<::folly::IOBuf> serialized;
  try {
    serialized = detail::serialize_to_iobuf(val);
  } catch (const apache::thrift::TProtocolException& e) {
    detail::handle_protocol_error(e);
    return nullptr;
  }
  DCHECK(serialized);
  auto ptr = construct__apache__thrift__fixtures__types__module__DependentAdaptedList(std::move(serialized));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::DependentAdaptedList, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(
    const ::apache::thrift::fixtures::types::DependentAdaptedList& val) {
  auto obj = StrongRef(Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::DependentAdaptedList, ::apache__thrift__fixtures__types__module::NamespaceTag>>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::apache::thrift::fixtures::types::detail::DependentAdaptedListDep>
Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::detail::DependentAdaptedListDep, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(PyObject* obj) {
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a DependentAdaptedListDep");
      }
      return extractorError<::apache::thrift::fixtures::types::detail::DependentAdaptedListDep>(
          "Marshal error: DependentAdaptedListDep");
  }
  StrongRef fbThriftData(getThriftData(obj));
  return Extractor<::apache::thrift::python::capi::ComposedStruct<
      ::apache::thrift::fixtures::types::detail::DependentAdaptedListDep, ::apache__thrift__fixtures__types__module::NamespaceTag>>{}(*fbThriftData);
}

ExtractorResult<::apache::thrift::fixtures::types::detail::DependentAdaptedListDep>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::apache::thrift::fixtures::types::detail::DependentAdaptedListDep, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(PyObject* fbThriftData) {
  ::apache::thrift::fixtures::types::detail::DependentAdaptedListDep cpp;
  std::optional<std::string_view> error;
  Extractor<int16_t>{}.extractInto(
      cpp.field_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__DependentAdaptedListDep__tuple_pos[0]),
      error);
  if (error) {
    return folly::makeUnexpected(*error);
  }
  return cpp;
}


int Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::detail::DependentAdaptedListDep, ::apache__thrift__fixtures__types__module::NamespaceTag>>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module apache.thrift.fixtures.types.module import error");
  }
  int result =
      can_extract__apache__thrift__fixtures__types__module__DependentAdaptedListDep(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: DependentAdaptedListDep");
  }
  return result;
}


PyObject* Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::detail::DependentAdaptedListDep, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(
    const ::apache::thrift::fixtures::types::detail::DependentAdaptedListDep& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::detail::DependentAdaptedListDep, ::apache__thrift__fixtures__types__module::NamespaceTag>> ctor;
  StrongRef fbthrift_data(ctor(val));
  if (!fbthrift_data) {
    return nullptr;
  }
  return init__apache__thrift__fixtures__types__module__DependentAdaptedListDep(*fbthrift_data);
}

PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::detail::DependentAdaptedListDep, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(
    [[maybe_unused]] const ::apache::thrift::fixtures::types::detail::DependentAdaptedListDep& val) {
  StrongRef fbthrift_data(createStructTuple(1));
  StrongRef _fbthrift__field(
    Constructor<int16_t>{}
    .constructFrom(val.field_ref()));
  if (_fbthrift__field.isNone()) {
    Py_INCREF(Py_None);
    PyTuple_SET_ITEM(
      *fbthrift_data,
      _fbthrift__DependentAdaptedListDep__tuple_pos[0],
      Py_None);
  } else
  if (!_fbthrift__field ||
      setStructField(
          *fbthrift_data,
          _fbthrift__DependentAdaptedListDep__tuple_pos[0],
          *_fbthrift__field) == -1) {
    return nullptr;
  }
  return std::move(fbthrift_data).release();
}


ExtractorResult<::apache::thrift::fixtures::types::AllocatorAware>
Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::AllocatorAware, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(PyObject* obj) {
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a AllocatorAware");
      }
      return extractorError<::apache::thrift::fixtures::types::AllocatorAware>(
          "Marshal error: AllocatorAware");
  }
  StrongRef fbThriftData(getThriftData(obj));
  return Extractor<::apache::thrift::python::capi::ComposedStruct<
      ::apache::thrift::fixtures::types::AllocatorAware, ::apache__thrift__fixtures__types__module::NamespaceTag>>{}(*fbThriftData);
}

ExtractorResult<::apache::thrift::fixtures::types::AllocatorAware>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::apache::thrift::fixtures::types::AllocatorAware, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(PyObject* fbThriftData) {
  ::apache::thrift::fixtures::types::AllocatorAware cpp;
  std::optional<std::string_view> error;
  Extractor<list<int32_t>>{}.extractInto(
      cpp.aa_list_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__AllocatorAware__tuple_pos[0]),
      error);
  Extractor<set<int32_t>>{}.extractInto(
      cpp.aa_set_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__AllocatorAware__tuple_pos[1]),
      error);
  Extractor<map<int32_t, int32_t>>{}.extractInto(
      cpp.aa_map_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__AllocatorAware__tuple_pos[2]),
      error);
  Extractor<Bytes>{}.extractInto(
      cpp.aa_string_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__AllocatorAware__tuple_pos[3]),
      error);
  Extractor<int32_t>{}.extractInto(
      cpp.not_a_container_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__AllocatorAware__tuple_pos[4]),
      error);
  Extractor<int32_t>{}.extractInto(
      cpp.aa_unique_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__AllocatorAware__tuple_pos[5]),
      error);
  Extractor<int32_t>{}.extractInto(
      cpp.aa_shared_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__AllocatorAware__tuple_pos[6]),
      error);
  if (error) {
    return folly::makeUnexpected(*error);
  }
  return cpp;
}


int Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::AllocatorAware, ::apache__thrift__fixtures__types__module::NamespaceTag>>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module apache.thrift.fixtures.types.module import error");
  }
  int result =
      can_extract__apache__thrift__fixtures__types__module__AllocatorAware(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: AllocatorAware");
  }
  return result;
}


PyObject* Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::AllocatorAware, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(
    const ::apache::thrift::fixtures::types::AllocatorAware& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::AllocatorAware, ::apache__thrift__fixtures__types__module::NamespaceTag>> ctor;
  StrongRef fbthrift_data(ctor(val));
  if (!fbthrift_data) {
    return nullptr;
  }
  return init__apache__thrift__fixtures__types__module__AllocatorAware(*fbthrift_data);
}

PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::AllocatorAware, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(
    [[maybe_unused]] const ::apache::thrift::fixtures::types::AllocatorAware& val) {
  StrongRef fbthrift_data(createStructTuple(7));
  StrongRef _fbthrift__aa_list(
    Constructor<list<int32_t>>{}
    .constructFrom(val.aa_list_ref()));
  if (!_fbthrift__aa_list ||
      setStructField(
          *fbthrift_data,
          _fbthrift__AllocatorAware__tuple_pos[0],
          *_fbthrift__aa_list) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__aa_set(
    Constructor<set<int32_t>>{}
    .constructFrom(val.aa_set_ref()));
  if (!_fbthrift__aa_set ||
      setStructField(
          *fbthrift_data,
          _fbthrift__AllocatorAware__tuple_pos[1],
          *_fbthrift__aa_set) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__aa_map(
    Constructor<map<int32_t, int32_t>>{}
    .constructFrom(val.aa_map_ref()));
  if (!_fbthrift__aa_map ||
      setStructField(
          *fbthrift_data,
          _fbthrift__AllocatorAware__tuple_pos[2],
          *_fbthrift__aa_map) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__aa_string(
    Constructor<Bytes>{}
    .constructFrom(val.aa_string_ref()));
  if (!_fbthrift__aa_string ||
      setStructField(
          *fbthrift_data,
          _fbthrift__AllocatorAware__tuple_pos[3],
          *_fbthrift__aa_string) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__not_a_container(
    Constructor<int32_t>{}
    .constructFrom(val.not_a_container_ref()));
  if (!_fbthrift__not_a_container ||
      setStructField(
          *fbthrift_data,
          _fbthrift__AllocatorAware__tuple_pos[4],
          *_fbthrift__not_a_container) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__aa_unique(
    Constructor<int32_t>{}
    .constructFrom(val.aa_unique_ref()));
  if (!_fbthrift__aa_unique ||
      setStructField(
          *fbthrift_data,
          _fbthrift__AllocatorAware__tuple_pos[5],
          *_fbthrift__aa_unique) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__aa_shared(
    Constructor<int32_t>{}
    .constructFrom(val.aa_shared_ref()));
  if (!_fbthrift__aa_shared ||
      setStructField(
          *fbthrift_data,
          _fbthrift__AllocatorAware__tuple_pos[6],
          *_fbthrift__aa_shared) == -1) {
    return nullptr;
  }
  return std::move(fbthrift_data).release();
}


ExtractorResult<::apache::thrift::fixtures::types::AllocatorAware2>
Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::AllocatorAware2, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(PyObject* obj) {
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a AllocatorAware2");
      }
      return extractorError<::apache::thrift::fixtures::types::AllocatorAware2>(
          "Marshal error: AllocatorAware2");
  }
  StrongRef fbThriftData(getThriftData(obj));
  return Extractor<::apache::thrift::python::capi::ComposedStruct<
      ::apache::thrift::fixtures::types::AllocatorAware2, ::apache__thrift__fixtures__types__module::NamespaceTag>>{}(*fbThriftData);
}

ExtractorResult<::apache::thrift::fixtures::types::AllocatorAware2>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::apache::thrift::fixtures::types::AllocatorAware2, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(PyObject* fbThriftData) {
  ::apache::thrift::fixtures::types::AllocatorAware2 cpp;
  std::optional<std::string_view> error;
  Extractor<int32_t>{}.extractInto(
      cpp.not_a_container_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__AllocatorAware2__tuple_pos[0]),
      error);
  Extractor<int32_t>{}.extractInto(
      cpp.box_field_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__AllocatorAware2__tuple_pos[1]),
      error);
  if (error) {
    return folly::makeUnexpected(*error);
  }
  return cpp;
}


int Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::AllocatorAware2, ::apache__thrift__fixtures__types__module::NamespaceTag>>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module apache.thrift.fixtures.types.module import error");
  }
  int result =
      can_extract__apache__thrift__fixtures__types__module__AllocatorAware2(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: AllocatorAware2");
  }
  return result;
}


PyObject* Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::AllocatorAware2, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(
    const ::apache::thrift::fixtures::types::AllocatorAware2& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::AllocatorAware2, ::apache__thrift__fixtures__types__module::NamespaceTag>> ctor;
  StrongRef fbthrift_data(ctor(val));
  if (!fbthrift_data) {
    return nullptr;
  }
  return init__apache__thrift__fixtures__types__module__AllocatorAware2(*fbthrift_data);
}

PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::AllocatorAware2, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(
    [[maybe_unused]] const ::apache::thrift::fixtures::types::AllocatorAware2& val) {
  StrongRef fbthrift_data(createStructTuple(2));
  StrongRef _fbthrift__not_a_container(
    Constructor<int32_t>{}
    .constructFrom(val.not_a_container_ref()));
  if (!_fbthrift__not_a_container ||
      setStructField(
          *fbthrift_data,
          _fbthrift__AllocatorAware2__tuple_pos[0],
          *_fbthrift__not_a_container) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__box_field(
    Constructor<int32_t>{}
    .constructFrom(val.box_field_ref()));
  if (_fbthrift__box_field.isNone()) {
    Py_INCREF(Py_None);
    PyTuple_SET_ITEM(
      *fbthrift_data,
      _fbthrift__AllocatorAware2__tuple_pos[1],
      Py_None);
  } else
  if (!_fbthrift__box_field ||
      setStructField(
          *fbthrift_data,
          _fbthrift__AllocatorAware2__tuple_pos[1],
          *_fbthrift__box_field) == -1) {
    return nullptr;
  }
  return std::move(fbthrift_data).release();
}


ExtractorResult<::apache::thrift::fixtures::types::TypedefStruct>
Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::TypedefStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::apache::thrift::fixtures::types::TypedefStruct>(
      "Module apache.thrift.fixtures.types.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__apache__thrift__fixtures__types__module__TypedefStruct(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::apache::thrift::fixtures::types::TypedefStruct>(
        "Thrift serialize error: TypedefStruct");
  }
  return detail::deserialize_iobuf<::apache::thrift::fixtures::types::TypedefStruct>(std::move(val));
}


ExtractorResult<::apache::thrift::fixtures::types::TypedefStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::apache::thrift::fixtures::types::TypedefStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::apache::thrift::fixtures::types::TypedefStruct>(
      "Module apache.thrift.fixtures.types.module import error");
  }
  auto obj = StrongRef(init__apache__thrift__fixtures__types__module__TypedefStruct(fbthrift_data));
  if (!obj) {
      return extractorError<::apache::thrift::fixtures::types::TypedefStruct>(
          "Init from fbthrift error: TypedefStruct");
  }
  return Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::TypedefStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>>{}(*obj);
}

int Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::TypedefStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module apache.thrift.fixtures.types.module import error");
  }
  int result =
      can_extract__apache__thrift__fixtures__types__module__TypedefStruct(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: TypedefStruct");
  }
  return result;
}


PyObject* Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::TypedefStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(
    const ::apache::thrift::fixtures::types::TypedefStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  ::std::unique_ptr<::folly::IOBuf> serialized;
  try {
    serialized = detail::serialize_to_iobuf(val);
  } catch (const apache::thrift::TProtocolException& e) {
    detail::handle_protocol_error(e);
    return nullptr;
  }
  DCHECK(serialized);
  auto ptr = construct__apache__thrift__fixtures__types__module__TypedefStruct(std::move(serialized));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::TypedefStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(
    const ::apache::thrift::fixtures::types::TypedefStruct& val) {
  auto obj = StrongRef(Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::TypedefStruct, ::apache__thrift__fixtures__types__module::NamespaceTag>>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::apache::thrift::fixtures::types::StructWithDoubleUnderscores>
Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::StructWithDoubleUnderscores, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(PyObject* obj) {
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a StructWithDoubleUnderscores");
      }
      return extractorError<::apache::thrift::fixtures::types::StructWithDoubleUnderscores>(
          "Marshal error: StructWithDoubleUnderscores");
  }
  StrongRef fbThriftData(getThriftData(obj));
  return Extractor<::apache::thrift::python::capi::ComposedStruct<
      ::apache::thrift::fixtures::types::StructWithDoubleUnderscores, ::apache__thrift__fixtures__types__module::NamespaceTag>>{}(*fbThriftData);
}

ExtractorResult<::apache::thrift::fixtures::types::StructWithDoubleUnderscores>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::apache::thrift::fixtures::types::StructWithDoubleUnderscores, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(PyObject* fbThriftData) {
  ::apache::thrift::fixtures::types::StructWithDoubleUnderscores cpp;
  std::optional<std::string_view> error;
  Extractor<int32_t>{}.extractInto(
      cpp.__field_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__StructWithDoubleUnderscores__tuple_pos[0]),
      error);
  if (error) {
    return folly::makeUnexpected(*error);
  }
  return cpp;
}


int Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::StructWithDoubleUnderscores, ::apache__thrift__fixtures__types__module::NamespaceTag>>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module apache.thrift.fixtures.types.module import error");
  }
  int result =
      can_extract__apache__thrift__fixtures__types__module__StructWithDoubleUnderscores(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: StructWithDoubleUnderscores");
  }
  return result;
}


PyObject* Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::StructWithDoubleUnderscores, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(
    const ::apache::thrift::fixtures::types::StructWithDoubleUnderscores& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::StructWithDoubleUnderscores, ::apache__thrift__fixtures__types__module::NamespaceTag>> ctor;
  StrongRef fbthrift_data(ctor(val));
  if (!fbthrift_data) {
    return nullptr;
  }
  return init__apache__thrift__fixtures__types__module__StructWithDoubleUnderscores(*fbthrift_data);
}

PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::StructWithDoubleUnderscores, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(
    [[maybe_unused]] const ::apache::thrift::fixtures::types::StructWithDoubleUnderscores& val) {
  StrongRef fbthrift_data(createStructTuple(1));
  StrongRef _fbthrift____field(
    Constructor<int32_t>{}
    .constructFrom(val.__field_ref()));
  if (!_fbthrift____field ||
      setStructField(
          *fbthrift_data,
          _fbthrift__StructWithDoubleUnderscores__tuple_pos[0],
          *_fbthrift____field) == -1) {
    return nullptr;
  }
  return std::move(fbthrift_data).release();
}


ExtractorResult<::apache::thrift::fixtures::types::has_bitwise_ops>
Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::has_bitwise_ops, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(PyObject* obj) {
  long val = PyLong_AsLong(obj);
  if (val == -1 && PyErr_Occurred()) {
    return extractorError<::apache::thrift::fixtures::types::has_bitwise_ops>(
        "Error getting python int value: has_bitwise_ops");
  }
  return static_cast<::apache::thrift::fixtures::types::has_bitwise_ops>(val);
}

int Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::has_bitwise_ops, ::apache__thrift__fixtures__types__module::NamespaceTag>>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module apache.thrift.fixtures.types.module import error");
  }
  int result =
      can_extract__apache__thrift__fixtures__types__module__has_bitwise_ops(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: has_bitwise_ops");
  }
  return result;
}


PyObject* Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::has_bitwise_ops, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(
    ::apache::thrift::fixtures::types::has_bitwise_ops val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__apache__thrift__fixtures__types__module__has_bitwise_ops(
      static_cast<int64_t>(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}

ExtractorResult<::apache::thrift::fixtures::types::is_unscoped>
Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::is_unscoped, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(PyObject* obj) {
  long val = PyLong_AsLong(obj);
  if (val == -1 && PyErr_Occurred()) {
    return extractorError<::apache::thrift::fixtures::types::is_unscoped>(
        "Error getting python int value: is_unscoped");
  }
  return static_cast<::apache::thrift::fixtures::types::is_unscoped>(val);
}

int Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::is_unscoped, ::apache__thrift__fixtures__types__module::NamespaceTag>>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module apache.thrift.fixtures.types.module import error");
  }
  int result =
      can_extract__apache__thrift__fixtures__types__module__is_unscoped(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: is_unscoped");
  }
  return result;
}


PyObject* Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::is_unscoped, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(
    ::apache::thrift::fixtures::types::is_unscoped val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__apache__thrift__fixtures__types__module__is_unscoped(
      static_cast<int64_t>(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}

ExtractorResult<::apache::thrift::fixtures::types::MyForwardRefEnum>
Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::MyForwardRefEnum, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(PyObject* obj) {
  long val = PyLong_AsLong(obj);
  if (val == -1 && PyErr_Occurred()) {
    return extractorError<::apache::thrift::fixtures::types::MyForwardRefEnum>(
        "Error getting python int value: MyForwardRefEnum");
  }
  return static_cast<::apache::thrift::fixtures::types::MyForwardRefEnum>(val);
}

int Extractor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::MyForwardRefEnum, ::apache__thrift__fixtures__types__module::NamespaceTag>>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module apache.thrift.fixtures.types.module import error");
  }
  int result =
      can_extract__apache__thrift__fixtures__types__module__MyForwardRefEnum(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MyForwardRefEnum");
  }
  return result;
}


PyObject* Constructor<::apache::thrift::python::capi::PythonNamespaced<::apache::thrift::fixtures::types::MyForwardRefEnum, ::apache__thrift__fixtures__types__module::NamespaceTag>>::operator()(
    ::apache::thrift::fixtures::types::MyForwardRefEnum val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__apache__thrift__fixtures__types__module__MyForwardRefEnum(
      static_cast<int64_t>(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}

} // namespace apache::thrift::python::capi
