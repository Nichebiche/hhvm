
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT
 *  @generated
 *
 */

#pragma once

#include <thrift/lib/python/capi/constructor.h>
#include <thrift/lib/python/capi/extractor.h>

#include <thrift/compiler/test/fixtures/adapter/gen-cpp2/module_types.h>

namespace facebook__thrift__test__module {

struct NamespaceTag {};

} // namespace facebook__thrift__test__module

namespace apache::thrift::python::capi {
template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::MyAnnotation, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::MyAnnotation, ::facebook__thrift__test__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::facebook::thrift::test::MyAnnotation> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::MyAnnotation, ::facebook__thrift__test__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::MyAnnotation, ::facebook__thrift__test__module::NamespaceTag>> {
  ExtractorResult<::facebook::thrift::test::MyAnnotation> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::MyAnnotation, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::MyAnnotation, ::facebook__thrift__test__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::facebook::thrift::test::MyAnnotation& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::MyAnnotation, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::MyAnnotation, ::facebook__thrift__test__module::NamespaceTag>> {
  PyObject* operator()(const ::facebook::thrift::test::MyAnnotation& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::Foo, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::Foo, ::facebook__thrift__test__module::NamespaceTag>> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::facebook::thrift::test::Foo> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::Foo, ::facebook__thrift__test__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::Foo, ::facebook__thrift__test__module::NamespaceTag>> {
  ExtractorResult<::facebook::thrift::test::Foo> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::Foo, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::Foo, ::facebook__thrift__test__module::NamespaceTag>> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::facebook::thrift::test::Foo& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::Foo, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::Foo, ::facebook__thrift__test__module::NamespaceTag>> {
  PyObject* operator()(const ::facebook::thrift::test::Foo& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::Baz, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::Baz, ::facebook__thrift__test__module::NamespaceTag>> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::facebook::thrift::test::Baz> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::Baz, ::facebook__thrift__test__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::Baz, ::facebook__thrift__test__module::NamespaceTag>> {
  ExtractorResult<::facebook::thrift::test::Baz> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::Baz, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::Baz, ::facebook__thrift__test__module::NamespaceTag>> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::facebook::thrift::test::Baz& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::Baz, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::Baz, ::facebook__thrift__test__module::NamespaceTag>> {
  PyObject* operator()(const ::facebook::thrift::test::Baz& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::Bar, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::Bar, ::facebook__thrift__test__module::NamespaceTag>> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::facebook::thrift::test::Bar> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::Bar, ::facebook__thrift__test__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::Bar, ::facebook__thrift__test__module::NamespaceTag>> {
  ExtractorResult<::facebook::thrift::test::Bar> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::Bar, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::Bar, ::facebook__thrift__test__module::NamespaceTag>> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::facebook::thrift::test::Bar& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::Bar, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::Bar, ::facebook__thrift__test__module::NamespaceTag>> {
  PyObject* operator()(const ::facebook::thrift::test::Bar& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::detail::DirectlyAdapted, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::detail::DirectlyAdapted, ::facebook__thrift__test__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::facebook::thrift::test::detail::DirectlyAdapted> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::detail::DirectlyAdapted, ::facebook__thrift__test__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::detail::DirectlyAdapted, ::facebook__thrift__test__module::NamespaceTag>> {
  ExtractorResult<::facebook::thrift::test::detail::DirectlyAdapted> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::detail::DirectlyAdapted, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::detail::DirectlyAdapted, ::facebook__thrift__test__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::facebook::thrift::test::detail::DirectlyAdapted& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::detail::DirectlyAdapted, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::detail::DirectlyAdapted, ::facebook__thrift__test__module::NamespaceTag>> {
  PyObject* operator()(const ::facebook::thrift::test::detail::DirectlyAdapted& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::detail::IndependentDirectlyAdapted, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::detail::IndependentDirectlyAdapted, ::facebook__thrift__test__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::facebook::thrift::test::detail::IndependentDirectlyAdapted> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::detail::IndependentDirectlyAdapted, ::facebook__thrift__test__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::detail::IndependentDirectlyAdapted, ::facebook__thrift__test__module::NamespaceTag>> {
  ExtractorResult<::facebook::thrift::test::detail::IndependentDirectlyAdapted> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::detail::IndependentDirectlyAdapted, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::detail::IndependentDirectlyAdapted, ::facebook__thrift__test__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::facebook::thrift::test::detail::IndependentDirectlyAdapted& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::detail::IndependentDirectlyAdapted, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::detail::IndependentDirectlyAdapted, ::facebook__thrift__test__module::NamespaceTag>> {
  PyObject* operator()(const ::facebook::thrift::test::detail::IndependentDirectlyAdapted& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::StructWithFieldAdapter, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::StructWithFieldAdapter, ::facebook__thrift__test__module::NamespaceTag>> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::facebook::thrift::test::StructWithFieldAdapter> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::StructWithFieldAdapter, ::facebook__thrift__test__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::StructWithFieldAdapter, ::facebook__thrift__test__module::NamespaceTag>> {
  ExtractorResult<::facebook::thrift::test::StructWithFieldAdapter> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::StructWithFieldAdapter, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::StructWithFieldAdapter, ::facebook__thrift__test__module::NamespaceTag>> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::facebook::thrift::test::StructWithFieldAdapter& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::StructWithFieldAdapter, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::StructWithFieldAdapter, ::facebook__thrift__test__module::NamespaceTag>> {
  PyObject* operator()(const ::facebook::thrift::test::StructWithFieldAdapter& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::TerseAdaptedFields, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::TerseAdaptedFields, ::facebook__thrift__test__module::NamespaceTag>> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::facebook::thrift::test::TerseAdaptedFields> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::TerseAdaptedFields, ::facebook__thrift__test__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::TerseAdaptedFields, ::facebook__thrift__test__module::NamespaceTag>> {
  ExtractorResult<::facebook::thrift::test::TerseAdaptedFields> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::TerseAdaptedFields, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::TerseAdaptedFields, ::facebook__thrift__test__module::NamespaceTag>> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::facebook::thrift::test::TerseAdaptedFields& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::TerseAdaptedFields, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::TerseAdaptedFields, ::facebook__thrift__test__module::NamespaceTag>> {
  PyObject* operator()(const ::facebook::thrift::test::TerseAdaptedFields& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::B, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::B, ::facebook__thrift__test__module::NamespaceTag>> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::facebook::thrift::test::B> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::B, ::facebook__thrift__test__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::B, ::facebook__thrift__test__module::NamespaceTag>> {
  ExtractorResult<::facebook::thrift::test::B> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::B, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::B, ::facebook__thrift__test__module::NamespaceTag>> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::facebook::thrift::test::B& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::B, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::B, ::facebook__thrift__test__module::NamespaceTag>> {
  PyObject* operator()(const ::facebook::thrift::test::B& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::A, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::A, ::facebook__thrift__test__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::facebook::thrift::test::A> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::A, ::facebook__thrift__test__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::A, ::facebook__thrift__test__module::NamespaceTag>> {
  ExtractorResult<::facebook::thrift::test::A> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::A, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::A, ::facebook__thrift__test__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::facebook::thrift::test::A& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::A, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::A, ::facebook__thrift__test__module::NamespaceTag>> {
  PyObject* operator()(const ::facebook::thrift::test::A& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::Config, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::Config, ::facebook__thrift__test__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::facebook::thrift::test::Config> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::Config, ::facebook__thrift__test__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::Config, ::facebook__thrift__test__module::NamespaceTag>> {
  ExtractorResult<::facebook::thrift::test::Config> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::Config, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::Config, ::facebook__thrift__test__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::facebook::thrift::test::Config& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::Config, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::Config, ::facebook__thrift__test__module::NamespaceTag>> {
  PyObject* operator()(const ::facebook::thrift::test::Config& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::MyStruct, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::MyStruct, ::facebook__thrift__test__module::NamespaceTag>> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::facebook::thrift::test::MyStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::MyStruct, ::facebook__thrift__test__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::MyStruct, ::facebook__thrift__test__module::NamespaceTag>> {
  ExtractorResult<::facebook::thrift::test::MyStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::MyStruct, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::MyStruct, ::facebook__thrift__test__module::NamespaceTag>> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::facebook::thrift::test::MyStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::MyStruct, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::MyStruct, ::facebook__thrift__test__module::NamespaceTag>> {
  PyObject* operator()(const ::facebook::thrift::test::MyStruct& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::AdaptTestStruct, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::AdaptTestStruct, ::facebook__thrift__test__module::NamespaceTag>> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::facebook::thrift::test::AdaptTestStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::AdaptTestStruct, ::facebook__thrift__test__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::AdaptTestStruct, ::facebook__thrift__test__module::NamespaceTag>> {
  ExtractorResult<::facebook::thrift::test::AdaptTestStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::AdaptTestStruct, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::AdaptTestStruct, ::facebook__thrift__test__module::NamespaceTag>> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::facebook::thrift::test::AdaptTestStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::AdaptTestStruct, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::AdaptTestStruct, ::facebook__thrift__test__module::NamespaceTag>> {
  PyObject* operator()(const ::facebook::thrift::test::AdaptTestStruct& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::AdaptTemplatedTestStruct, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::AdaptTemplatedTestStruct, ::facebook__thrift__test__module::NamespaceTag>> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::facebook::thrift::test::AdaptTemplatedTestStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::AdaptTemplatedTestStruct, ::facebook__thrift__test__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::AdaptTemplatedTestStruct, ::facebook__thrift__test__module::NamespaceTag>> {
  ExtractorResult<::facebook::thrift::test::AdaptTemplatedTestStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::AdaptTemplatedTestStruct, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::AdaptTemplatedTestStruct, ::facebook__thrift__test__module::NamespaceTag>> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::facebook::thrift::test::AdaptTemplatedTestStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::AdaptTemplatedTestStruct, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::AdaptTemplatedTestStruct, ::facebook__thrift__test__module::NamespaceTag>> {
  PyObject* operator()(const ::facebook::thrift::test::AdaptTemplatedTestStruct& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::AdaptTemplatedNestedTestStruct, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::AdaptTemplatedNestedTestStruct, ::facebook__thrift__test__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::facebook::thrift::test::AdaptTemplatedNestedTestStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::AdaptTemplatedNestedTestStruct, ::facebook__thrift__test__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::AdaptTemplatedNestedTestStruct, ::facebook__thrift__test__module::NamespaceTag>> {
  ExtractorResult<::facebook::thrift::test::AdaptTemplatedNestedTestStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::AdaptTemplatedNestedTestStruct, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::AdaptTemplatedNestedTestStruct, ::facebook__thrift__test__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::facebook::thrift::test::AdaptTemplatedNestedTestStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::AdaptTemplatedNestedTestStruct, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::AdaptTemplatedNestedTestStruct, ::facebook__thrift__test__module::NamespaceTag>> {
  PyObject* operator()(const ::facebook::thrift::test::AdaptTemplatedNestedTestStruct& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::ThriftAdaptTestUnion, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::ThriftAdaptTestUnion, ::facebook__thrift__test__module::NamespaceTag>> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::facebook::thrift::test::ThriftAdaptTestUnion> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::ThriftAdaptTestUnion, ::facebook__thrift__test__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::ThriftAdaptTestUnion, ::facebook__thrift__test__module::NamespaceTag>> {
  ExtractorResult<::facebook::thrift::test::ThriftAdaptTestUnion> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::ThriftAdaptTestUnion, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::ThriftAdaptTestUnion, ::facebook__thrift__test__module::NamespaceTag>> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::facebook::thrift::test::ThriftAdaptTestUnion& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::ThriftAdaptTestUnion, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::ThriftAdaptTestUnion, ::facebook__thrift__test__module::NamespaceTag>> {
  PyObject* operator()(const ::facebook::thrift::test::ThriftAdaptTestUnion& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::ThriftAdaptedStruct, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::ThriftAdaptedStruct, ::facebook__thrift__test__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::facebook::thrift::test::ThriftAdaptedStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::ThriftAdaptedStruct, ::facebook__thrift__test__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::ThriftAdaptedStruct, ::facebook__thrift__test__module::NamespaceTag>> {
  ExtractorResult<::facebook::thrift::test::ThriftAdaptedStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::ThriftAdaptedStruct, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::ThriftAdaptedStruct, ::facebook__thrift__test__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::facebook::thrift::test::ThriftAdaptedStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::ThriftAdaptedStruct, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::ThriftAdaptedStruct, ::facebook__thrift__test__module::NamespaceTag>> {
  PyObject* operator()(const ::facebook::thrift::test::ThriftAdaptedStruct& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::detail::DirectlyAdaptedStruct, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::detail::DirectlyAdaptedStruct, ::facebook__thrift__test__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::facebook::thrift::test::detail::DirectlyAdaptedStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::detail::DirectlyAdaptedStruct, ::facebook__thrift__test__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::detail::DirectlyAdaptedStruct, ::facebook__thrift__test__module::NamespaceTag>> {
  ExtractorResult<::facebook::thrift::test::detail::DirectlyAdaptedStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::detail::DirectlyAdaptedStruct, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::detail::DirectlyAdaptedStruct, ::facebook__thrift__test__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::facebook::thrift::test::detail::DirectlyAdaptedStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::detail::DirectlyAdaptedStruct, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::detail::DirectlyAdaptedStruct, ::facebook__thrift__test__module::NamespaceTag>> {
  PyObject* operator()(const ::facebook::thrift::test::detail::DirectlyAdaptedStruct& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::StructFieldAdaptedStruct, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::StructFieldAdaptedStruct, ::facebook__thrift__test__module::NamespaceTag>> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::facebook::thrift::test::StructFieldAdaptedStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::StructFieldAdaptedStruct, ::facebook__thrift__test__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::StructFieldAdaptedStruct, ::facebook__thrift__test__module::NamespaceTag>> {
  ExtractorResult<::facebook::thrift::test::StructFieldAdaptedStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::StructFieldAdaptedStruct, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::StructFieldAdaptedStruct, ::facebook__thrift__test__module::NamespaceTag>> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::facebook::thrift::test::StructFieldAdaptedStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::StructFieldAdaptedStruct, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::StructFieldAdaptedStruct, ::facebook__thrift__test__module::NamespaceTag>> {
  PyObject* operator()(const ::facebook::thrift::test::StructFieldAdaptedStruct& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::CircularAdaptee, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::CircularAdaptee, ::facebook__thrift__test__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::facebook::thrift::test::CircularAdaptee> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::CircularAdaptee, ::facebook__thrift__test__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::CircularAdaptee, ::facebook__thrift__test__module::NamespaceTag>> {
  ExtractorResult<::facebook::thrift::test::CircularAdaptee> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::CircularAdaptee, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::CircularAdaptee, ::facebook__thrift__test__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::facebook::thrift::test::CircularAdaptee& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::CircularAdaptee, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::CircularAdaptee, ::facebook__thrift__test__module::NamespaceTag>> {
  PyObject* operator()(const ::facebook::thrift::test::CircularAdaptee& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::CircularStruct, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::CircularStruct, ::facebook__thrift__test__module::NamespaceTag>> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::facebook::thrift::test::CircularStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::CircularStruct, ::facebook__thrift__test__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::CircularStruct, ::facebook__thrift__test__module::NamespaceTag>> {
  ExtractorResult<::facebook::thrift::test::CircularStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::CircularStruct, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::CircularStruct, ::facebook__thrift__test__module::NamespaceTag>> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::facebook::thrift::test::CircularStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::CircularStruct, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::CircularStruct, ::facebook__thrift__test__module::NamespaceTag>> {
  PyObject* operator()(const ::facebook::thrift::test::CircularStruct& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::ReorderedStruct, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::ReorderedStruct, ::facebook__thrift__test__module::NamespaceTag>> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::facebook::thrift::test::ReorderedStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::ReorderedStruct, ::facebook__thrift__test__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::ReorderedStruct, ::facebook__thrift__test__module::NamespaceTag>> {
  ExtractorResult<::facebook::thrift::test::ReorderedStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::ReorderedStruct, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::ReorderedStruct, ::facebook__thrift__test__module::NamespaceTag>> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::facebook::thrift::test::ReorderedStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::ReorderedStruct, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::ReorderedStruct, ::facebook__thrift__test__module::NamespaceTag>> {
  PyObject* operator()(const ::facebook::thrift::test::ReorderedStruct& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::detail::DeclaredAfterStruct, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::detail::DeclaredAfterStruct, ::facebook__thrift__test__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::facebook::thrift::test::detail::DeclaredAfterStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::detail::DeclaredAfterStruct, ::facebook__thrift__test__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::detail::DeclaredAfterStruct, ::facebook__thrift__test__module::NamespaceTag>> {
  ExtractorResult<::facebook::thrift::test::detail::DeclaredAfterStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::detail::DeclaredAfterStruct, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::detail::DeclaredAfterStruct, ::facebook__thrift__test__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::facebook::thrift::test::detail::DeclaredAfterStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::detail::DeclaredAfterStruct, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::detail::DeclaredAfterStruct, ::facebook__thrift__test__module::NamespaceTag>> {
  PyObject* operator()(const ::facebook::thrift::test::detail::DeclaredAfterStruct& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::UnderlyingRenamedStruct, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::UnderlyingRenamedStruct, ::facebook__thrift__test__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::facebook::thrift::test::UnderlyingRenamedStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::UnderlyingRenamedStruct, ::facebook__thrift__test__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::UnderlyingRenamedStruct, ::facebook__thrift__test__module::NamespaceTag>> {
  ExtractorResult<::facebook::thrift::test::UnderlyingRenamedStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::UnderlyingRenamedStruct, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::UnderlyingRenamedStruct, ::facebook__thrift__test__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::facebook::thrift::test::UnderlyingRenamedStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::UnderlyingRenamedStruct, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::UnderlyingRenamedStruct, ::facebook__thrift__test__module::NamespaceTag>> {
  PyObject* operator()(const ::facebook::thrift::test::UnderlyingRenamedStruct& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::UnderlyingSameNamespaceStruct, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::UnderlyingSameNamespaceStruct, ::facebook__thrift__test__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::facebook::thrift::test::UnderlyingSameNamespaceStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::UnderlyingSameNamespaceStruct, ::facebook__thrift__test__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::UnderlyingSameNamespaceStruct, ::facebook__thrift__test__module::NamespaceTag>> {
  ExtractorResult<::facebook::thrift::test::UnderlyingSameNamespaceStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::UnderlyingSameNamespaceStruct, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::UnderlyingSameNamespaceStruct, ::facebook__thrift__test__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::facebook::thrift::test::UnderlyingSameNamespaceStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::UnderlyingSameNamespaceStruct, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::UnderlyingSameNamespaceStruct, ::facebook__thrift__test__module::NamespaceTag>> {
  PyObject* operator()(const ::facebook::thrift::test::UnderlyingSameNamespaceStruct& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::detail::HeapAllocated, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::detail::HeapAllocated, ::facebook__thrift__test__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::facebook::thrift::test::detail::HeapAllocated> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::detail::HeapAllocated, ::facebook__thrift__test__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::detail::HeapAllocated, ::facebook__thrift__test__module::NamespaceTag>> {
  ExtractorResult<::facebook::thrift::test::detail::HeapAllocated> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::detail::HeapAllocated, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::detail::HeapAllocated, ::facebook__thrift__test__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::facebook::thrift::test::detail::HeapAllocated& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::detail::HeapAllocated, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::detail::HeapAllocated, ::facebook__thrift__test__module::NamespaceTag>> {
  PyObject* operator()(const ::facebook::thrift::test::detail::HeapAllocated& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::MoveOnly, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::MoveOnly, ::facebook__thrift__test__module::NamespaceTag>> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::facebook::thrift::test::MoveOnly> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::MoveOnly, ::facebook__thrift__test__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::MoveOnly, ::facebook__thrift__test__module::NamespaceTag>> {
  ExtractorResult<::facebook::thrift::test::MoveOnly> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::MoveOnly, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::MoveOnly, ::facebook__thrift__test__module::NamespaceTag>> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::facebook::thrift::test::MoveOnly& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::MoveOnly, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::MoveOnly, ::facebook__thrift__test__module::NamespaceTag>> {
  PyObject* operator()(const ::facebook::thrift::test::MoveOnly& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::AlsoMoveOnly, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::AlsoMoveOnly, ::facebook__thrift__test__module::NamespaceTag>> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::facebook::thrift::test::AlsoMoveOnly> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::AlsoMoveOnly, ::facebook__thrift__test__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::AlsoMoveOnly, ::facebook__thrift__test__module::NamespaceTag>> {
  ExtractorResult<::facebook::thrift::test::AlsoMoveOnly> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::AlsoMoveOnly, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::AlsoMoveOnly, ::facebook__thrift__test__module::NamespaceTag>> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::facebook::thrift::test::AlsoMoveOnly& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::AlsoMoveOnly, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::AlsoMoveOnly, ::facebook__thrift__test__module::NamespaceTag>> {
  PyObject* operator()(const ::facebook::thrift::test::AlsoMoveOnly& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::ApplyAdapter, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::ApplyAdapter, ::facebook__thrift__test__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::facebook::thrift::test::ApplyAdapter> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::ApplyAdapter, ::facebook__thrift__test__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::ApplyAdapter, ::facebook__thrift__test__module::NamespaceTag>> {
  ExtractorResult<::facebook::thrift::test::ApplyAdapter> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::ApplyAdapter, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::ApplyAdapter, ::facebook__thrift__test__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::facebook::thrift::test::ApplyAdapter& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::ApplyAdapter, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::ApplyAdapter, ::facebook__thrift__test__module::NamespaceTag>> {
  PyObject* operator()(const ::facebook::thrift::test::ApplyAdapter& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::detail::TransitiveAdapted, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::detail::TransitiveAdapted, ::facebook__thrift__test__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::facebook::thrift::test::detail::TransitiveAdapted> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::detail::TransitiveAdapted, ::facebook__thrift__test__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::detail::TransitiveAdapted, ::facebook__thrift__test__module::NamespaceTag>> {
  ExtractorResult<::facebook::thrift::test::detail::TransitiveAdapted> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::detail::TransitiveAdapted, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::detail::TransitiveAdapted, ::facebook__thrift__test__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::facebook::thrift::test::detail::TransitiveAdapted& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::detail::TransitiveAdapted, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::detail::TransitiveAdapted, ::facebook__thrift__test__module::NamespaceTag>> {
  PyObject* operator()(const ::facebook::thrift::test::detail::TransitiveAdapted& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::CountingStruct, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::CountingStruct, ::facebook__thrift__test__module::NamespaceTag>> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::facebook::thrift::test::CountingStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::CountingStruct, ::facebook__thrift__test__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::CountingStruct, ::facebook__thrift__test__module::NamespaceTag>> {
  ExtractorResult<::facebook::thrift::test::CountingStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::CountingStruct, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::CountingStruct, ::facebook__thrift__test__module::NamespaceTag>> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::facebook::thrift::test::CountingStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::CountingStruct, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::CountingStruct, ::facebook__thrift__test__module::NamespaceTag>> {
  PyObject* operator()(const ::facebook::thrift::test::CountingStruct& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::Person, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::Person, ::facebook__thrift__test__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::facebook::thrift::test::Person> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::Person, ::facebook__thrift__test__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::Person, ::facebook__thrift__test__module::NamespaceTag>> {
  ExtractorResult<::facebook::thrift::test::Person> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::Person, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::Person, ::facebook__thrift__test__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::facebook::thrift::test::Person& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::Person, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::Person, ::facebook__thrift__test__module::NamespaceTag>> {
  PyObject* operator()(const ::facebook::thrift::test::Person& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::Person2, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::Person2, ::facebook__thrift__test__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::facebook::thrift::test::Person2> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::Person2, ::facebook__thrift__test__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::Person2, ::facebook__thrift__test__module::NamespaceTag>> {
  ExtractorResult<::facebook::thrift::test::Person2> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::Person2, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::Person2, ::facebook__thrift__test__module::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::facebook::thrift::test::Person2& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::Person2, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::Person2, ::facebook__thrift__test__module::NamespaceTag>> {
  PyObject* operator()(const ::facebook::thrift::test::Person2& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::Renamed, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::Renamed, ::facebook__thrift__test__module::NamespaceTag>> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::facebook::thrift::test::Renamed> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::Renamed, ::facebook__thrift__test__module::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::Renamed, ::facebook__thrift__test__module::NamespaceTag>> {
  ExtractorResult<::facebook::thrift::test::Renamed> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::Renamed, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::Renamed, ::facebook__thrift__test__module::NamespaceTag>> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::facebook::thrift::test::Renamed& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::Renamed, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::facebook::thrift::test::Renamed, ::facebook__thrift__test__module::NamespaceTag>> {
  PyObject* operator()(const ::facebook::thrift::test::Renamed& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::Color, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::Color, ::facebook__thrift__test__module::NamespaceTag>> {
  ExtractorResult<::facebook::thrift::test::Color> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::Color, ::facebook__thrift__test__module::NamespaceTag>> {
  PyObject* operator()(::facebook::thrift::test::Color val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::ThriftAdaptedEnum, ::facebook__thrift__test__module::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::ThriftAdaptedEnum, ::facebook__thrift__test__module::NamespaceTag>> {
  ExtractorResult<::facebook::thrift::test::ThriftAdaptedEnum> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::facebook::thrift::test::ThriftAdaptedEnum, ::facebook__thrift__test__module::NamespaceTag>> {
  PyObject* operator()(::facebook::thrift::test::ThriftAdaptedEnum val);
};

} // namespace apache::thrift::python::capi
