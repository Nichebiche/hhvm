
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT
 *  @generated
 *
 */

#pragma once

#include <thrift/lib/python/capi/constructor.h>
#include <thrift/lib/python/capi/extractor.h>

#include <thrift/compiler/test/fixtures/adapter/gen-cpp2/with_containers_types.h>

namespace with_containers {

struct NamespaceTag {};

} // namespace with_containers

namespace apache::thrift::python::capi {
template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::cpp2::AnnotationWithContainers, ::with_containers::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::cpp2::AnnotationWithContainers, ::with_containers::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::cpp2::AnnotationWithContainers> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::AnnotationWithContainers, ::with_containers::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::AnnotationWithContainers, ::with_containers::NamespaceTag>> {
  ExtractorResult<::cpp2::AnnotationWithContainers> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::cpp2::AnnotationWithContainers, ::with_containers::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::cpp2::AnnotationWithContainers, ::with_containers::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::cpp2::AnnotationWithContainers& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::AnnotationWithContainers, ::with_containers::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::AnnotationWithContainers, ::with_containers::NamespaceTag>> {
  PyObject* operator()(const ::cpp2::AnnotationWithContainers& val);
};

template <>
struct Extractor<::apache::thrift::python::capi::PythonNamespaced<::cpp2::MyStruct, ::with_containers::NamespaceTag>>
    : public BaseExtractor<::apache::thrift::python::capi::PythonNamespaced<::cpp2::MyStruct, ::with_containers::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::cpp2::MyStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::MyStruct, ::with_containers::NamespaceTag >>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::MyStruct, ::with_containers::NamespaceTag>> {
  ExtractorResult<::cpp2::MyStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::python::capi::PythonNamespaced<::cpp2::MyStruct, ::with_containers::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::PythonNamespaced<::cpp2::MyStruct, ::with_containers::NamespaceTag>> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::cpp2::MyStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::MyStruct, ::with_containers::NamespaceTag>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::MyStruct, ::with_containers::NamespaceTag>> {
  PyObject* operator()(const ::cpp2::MyStruct& val);
};

} // namespace apache::thrift::python::capi
