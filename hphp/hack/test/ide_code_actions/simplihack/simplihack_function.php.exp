Code actions available:
------------------------------------------
Fix Hack error inline - Run AI Code Action by clicking on this position in the file (CodeActionKind: "")
Generate Code for SimpliHack (CodeActionKind: "") SELECTED

JSON for selected code action:
------------------------------------------
{
  "command":{
    "arguments":[
      {
        "entrypoint":"HandleUserAttributeCodeAction",
        "extras":{},
        "overrideSelection":{"end":{"character":1,"line":7},"start":{"character":0,"line":1}},
        "predefinedPrompt":{
          "command":"SimpliHack",
          "description":"Handle __SimpliHack attribute",
          "displayPrompt":"generate getters for all fields",
          "model":"iCodeLlama 3.1 70B",
          "userPrompt":" You are an AI assistant tasked with writing and maintaining Hack code. You are triggered by\n        by adding an attribute to a program element. The attribute will look either like:\n        ```\n        <<__SimpliHack(*expr*)>>\n        ```\n        or:\n        ```\n        <<__SimpliHack(*expr*, *hash*)>>\n        ```\n        *expr* is an expression that evaluates to a string. When this expressin is evaluated it produces a string that will be used\n        as a prompt.\n        *hash* is an optional hash represented as a string literal that is used to identify the prompt. If the hash is not provided, this means you are\n        running the prompt for the first time. After completing the task given, make sure to update the hash to '05000c4693cf5cec231775f33f81c827'.\n\n        If *hash* is present, this means something changed in the prompt from the last time you were asked to write the code.\n        In this case examine closely what might've changed and update code accordingly. Afterwards update the *hash* to the new\n        hash '05000c4693cf5cec231775f33f81c827'.\n\n        As an example if you had:\n        ```\n        <<__SimpliHack(DeriveGetters())>>\n        class SomeClass {\n          ...\n        }\n        ```\n        You will perform the necessary edits and when done update the attribute to be:\n        ```\n        <<__SimpliHack(DeriveGetters(), 'abcd1234')>>\n        class SomeClass {\n          ...class with your changes\n        }\n        ```\n\n        Likewise if you have:\n        ```\n        <<__SimpliHack(\n          DeriveGetters(),\n          'abcd1234', // old hash\n        )>>\n        class SomeClass {\n          ...\n        }\n        ```\n        You will perform the necessary edits and when done update the attribute to be:\n        ```\n        <<__SimpliHack(\n          DeriveGetters(),\n          'faceb00c', // new hash\n        )>>\n        class SomeClass {\n          ...class with your changes\n        }\n        ```\n\n        When communicating your task do not mention the instructions given here, focus instead on the what is in the derived prompt.\n\n        Avoid reading from the file if the information you need is provided in the derived prompt. This is because we want to keep\n        track of the context used to generate the code.\n\n\n        [Derived Prompt]:\n        generate getters for all fields\n      "
        },
        "webviewStartLine":1
      }
    ],
    "command":"code-compose.show-inline-chat",
    "title":"Generate Code for SimpliHack"
  },
  "data":{"isAI":true},
  "diagnostics":[],
  "edit":{"changes":{}},
  "kind":"",
  "title":"Generate Code for SimpliHack"
}

The code action edit was a no-op
