warning: Warn[12012] This as assertion will always fail and lead to an exception at runtime. The expression on the left has type null which shares no values with nonnull.

File metachain.php, line 28, character 10 - line 28, character 24:

 26 | <<__NoAutoLikes>>
 27 | function chain<T>(T $_): ReproGenesisChain<T> {
 28 |   return »null as nonnull«;
 29 | }
 30 | 
 31 | final class ReproGenesisChain<T> {

warning: Warn[12012] This as assertion will always fail and lead to an exception at runtime. The expression on the left has type null which shares no values with nonnull.

File metachain.php, line 36, character 12 - line 36, character 26:

 34 |     classname<ReproIGenesisRunnable with { type TInput super T; }> $_,
 35 |   ): ReproGenesisChain<mixed> {
 36 |     return »null as nonnull«;
 37 |   }
 38 | }

warning: Warn[12012] This as assertion will always fail and lead to an exception at runtime. The expression on the left has type null which shares no values with nonnull.

File metachain.php, line 50, character 12 - line 50, character 26:

 49 |   public static function fromValue(TOut $_): ReproMetaChain<TIn, TOut> {
 50 |     return »null as nonnull«;
 51 |   }
 52 |   public function then<TNextOut>(
 53 |     ReproIMetaChainOperator<TOut, TNextOut> $op,

warning: Warn[12012] This as assertion will always fail and lead to an exception at runtime. The expression on the left has type null which shares no values with nonnull.

File metachain.php, line 55, character 12 - line 55, character 26:

 53 |     ReproIMetaChainOperator<TOut, TNextOut> $op,
 54 |   ): ReproMetaChain<TIn, TNextOut> {
 55 |     return »null as nonnull«;
 56 |   }
 57 | }

warning: Warn[12012] This as assertion will always fail and lead to an exception at runtime. The expression on the left has type null which shares no values with nonnull.

File metachain.php, line 64, character 10 - line 64, character 24:

 62 |   ReproIMetaChainOperator<TIn, TOut> $_,
 63 | ): Awaitable<TOut> {
 64 |   return »null as nonnull«;
 65 | }

error: Typing[4110] Invalid argument

File metachain.php, line 17, character 19 - line 17, character 50:

 12 |   //$user_prompt = $foo[1];
 13 |   $s = shape(
 14 |     'prompt' => $user_prompt,
 15 |   );
 16 |   $chain = chain($s);
 17 |   $chain->thenMPZ(»ReproIGCreatorAIMetachain::class«);
 18 | }
 19 | 
 20 | final class ReproIGCreatorAIMetachain implements ReproIGenesisRunnable {

Expected string

File metachain.php, line 22, character 17 - line 22, character 22:

 20 | final class ReproIGCreatorAIMetachain implements ReproIGenesisRunnable {
 21 |   const type TInput = shape(
 22 |     'prompt' => »string«,
 23 |   );
 24 | }
 25 | 
 26 | <<__NoAutoLikes>>

But got dynamic

File metachain.php, line 7, character 10 - line 10, character 3:

 5 |   ReproIMetaChainOperator<shape(), (nothing, string)> $obj,
 6 | ): Awaitable<void> {
 7 |   $foo = »await genX(
 8 |     // ReproMetaChain::fromValue(shape()) instead of $val
 9 |     $val->then($obj),
10 |   );«
11 |   list($_, $user_prompt) = $foo;
12 |   //$user_prompt = $foo[1];
13 |   $s = shape(

Here's why:

I checked the subtype constraint in [Main] because it was implied by the other constraints on the type variable.

  [Main] Step 1 of 2                                                            

I started by checking this subtype relationship.

The subtype comes from this expression

File metachain.php, line 7, character 10 - line 10, character 3:

 5 |   ReproIMetaChainOperator<shape(), (nothing, string)> $obj,
 6 | ): Awaitable<void> {
 7 |   $foo = »await genX(
 8 |     // ReproMetaChain::fromValue(shape()) instead of $val
 9 |     $val->then($obj),
10 |   );«
11 |   list($_, $user_prompt) = $foo;
12 |   //$user_prompt = $foo[1];
13 |   $s = shape(

and flows into this expression

File metachain.php, line 7, character 3 - line 7, character 6:

 5 |   ReproIMetaChainOperator<shape(), (nothing, string)> $obj,
 6 | ): Awaitable<void> {
 7 |   »$foo« = await genX(
 8 |     // ReproMetaChain::fromValue(shape()) instead of $val
 9 |     $val->then($obj),
10 |   );
11 |   list($_, $user_prompt) = $foo;
12 |   //$user_prompt = $foo[1];
13 |   $s = shape(

via an assignment

which itself flows into this expression

File metachain.php, line 11, character 28 - line 11, character 31:

  9 |     $val->then($obj),
 10 |   );
 11 |   list($_, $user_prompt) = »$foo«;
 12 |   //$user_prompt = $foo[1];
 13 |   $s = shape(
 14 |     'prompt' => $user_prompt,

as the type of the local variable

The supertype comes from this hint

File metachain.php, line 22, character 17 - line 22, character 22:

 20 | final class ReproIGCreatorAIMetachain implements ReproIGenesisRunnable {
 21 |   const type TInput = shape(
 22 |     'prompt' => »string«,
 23 |   );
 24 | }
 25 | 
 26 | <<__NoAutoLikes>>


  [Main] Step 2 of 2                          (here is where the error occurred) 

The subtype is a union type so next I checked the subtype constraint is satisfied for all its elements.

The subtype comes from this expression

File metachain.php, line 7, character 10 - line 10, character 3:

 5 |   ReproIMetaChainOperator<shape(), (nothing, string)> $obj,
 6 | ): Awaitable<void> {
 7 |   $foo = »await genX(
 8 |     // ReproMetaChain::fromValue(shape()) instead of $val
 9 |     $val->then($obj),
10 |   );«
11 |   list($_, $user_prompt) = $foo;
12 |   //$user_prompt = $foo[1];
13 |   $s = shape(

The supertype is the same as before.

File metachain.php, line 22, character 17 - line 22, character 22:

 20 | final class ReproIGCreatorAIMetachain implements ReproIGenesisRunnable {
 21 |   const type TInput = shape(
 22 |     'prompt' => »string«,
 23 |   );
 24 | }
 25 | 
 26 | <<__NoAutoLikes>>

I found the subtype for [Main] when I checked the subtype constraint in [Lower].

  [Lower] Step 1 of 2                                                           

I started by checking this subtype relationship.

The subtype comes from this expression

File metachain.php, line 7, character 10 - line 10, character 3:

 5 |   ReproIMetaChainOperator<shape(), (nothing, string)> $obj,
 6 | ): Awaitable<void> {
 7 |   $foo = »await genX(
 8 |     // ReproMetaChain::fromValue(shape()) instead of $val
 9 |     $val->then($obj),
10 |   );«
11 |   list($_, $user_prompt) = $foo;
12 |   //$user_prompt = $foo[1];
13 |   $s = shape(

and flows into this expression

File metachain.php, line 7, character 3 - line 7, character 6:

 5 |   ReproIMetaChainOperator<shape(), (nothing, string)> $obj,
 6 | ): Awaitable<void> {
 7 |   »$foo« = await genX(
 8 |     // ReproMetaChain::fromValue(shape()) instead of $val
 9 |     $val->then($obj),
10 |   );
11 |   list($_, $user_prompt) = $foo;
12 |   //$user_prompt = $foo[1];
13 |   $s = shape(

via an assignment

which itself flows into this expression

File metachain.php, line 11, character 28 - line 11, character 31:

  9 |     $val->then($obj),
 10 |   );
 11 |   list($_, $user_prompt) = »$foo«;
 12 |   //$user_prompt = $foo[1];
 13 |   $s = shape(
 14 |     'prompt' => $user_prompt,

as the type of the local variable

The supertype comes from this expression

File metachain.php, line 7, character 10 - line 10, character 3:

 5 |   ReproIMetaChainOperator<shape(), (nothing, string)> $obj,
 6 | ): Awaitable<void> {
 7 |   $foo = »await genX(
 8 |     // ReproMetaChain::fromValue(shape()) instead of $val
 9 |     $val->then($obj),
10 |   );«
11 |   list($_, $user_prompt) = $foo;
12 |   //$user_prompt = $foo[1];
13 |   $s = shape(

and flows into this expression

File metachain.php, line 7, character 3 - line 7, character 6:

 5 |   ReproIMetaChainOperator<shape(), (nothing, string)> $obj,
 6 | ): Awaitable<void> {
 7 |   »$foo« = await genX(
 8 |     // ReproMetaChain::fromValue(shape()) instead of $val
 9 |     $val->then($obj),
10 |   );
11 |   list($_, $user_prompt) = $foo;
12 |   //$user_prompt = $foo[1];
13 |   $s = shape(

via an assignment

which itself flows into this expression

File metachain.php, line 11, character 28 - line 11, character 31:

  9 |     $val->then($obj),
 10 |   );
 11 |   list($_, $user_prompt) = »$foo«;
 12 |   //$user_prompt = $foo[1];
 13 |   $s = shape(
 14 |     'prompt' => $user_prompt,

as the type of the local variable

which itself flows into this type variable

File metachain.php, line 11, character 12 - line 11, character 23:

  9 |     $val->then($obj),
 10 |   );
 11 |   list($_, »$user_prompt«) = $foo;
 12 |   //$user_prompt = $foo[1];
 13 |   $s = shape(
 14 |     'prompt' => $user_prompt,

via an assignment


  [Lower] Step 2 of 2                                                           

The subtype is a union type so next I checked the subtype constraint is satisfied for all its elements.

The subtype comes from this expression

File metachain.php, line 7, character 10 - line 10, character 3:

 5 |   ReproIMetaChainOperator<shape(), (nothing, string)> $obj,
 6 | ): Awaitable<void> {
 7 |   $foo = »await genX(
 8 |     // ReproMetaChain::fromValue(shape()) instead of $val
 9 |     $val->then($obj),
10 |   );«
11 |   list($_, $user_prompt) = $foo;
12 |   //$user_prompt = $foo[1];
13 |   $s = shape(

The supertype is the same as before.

File metachain.php, line 7, character 10 - line 10, character 3:

 5 |   ReproIMetaChainOperator<shape(), (nothing, string)> $obj,
 6 | ): Awaitable<void> {
 7 |   $foo = »await genX(
 8 |     // ReproMetaChain::fromValue(shape()) instead of $val
 9 |     $val->then($obj),
10 |   );«
11 |   list($_, $user_prompt) = $foo;
12 |   //$user_prompt = $foo[1];
13 |   $s = shape(

I found the supertype for [Main] when I checked the subtype constraint in [Upper].
I checked the subtype constraint in [Upper / Main] because it was implied by the other constraints on the generic parameter T of chain.

  [Upper / Main] Step 1 of 3                                                    

I started by checking this subtype relationship.

The subtype comes from this function or method declaration

File metachain.php, line 27, character 10 - line 27, character 14:

 26 | <<__NoAutoLikes>>
 27 | function »chain«<T>(T $_): ReproGenesisChain<T> {
 28 |   return null as nonnull;
 29 | }

The supertype comes from this expression

File metachain.php, line 16, character 12 - line 16, character 20:

 12 |   //$user_prompt = $foo[1];
 13 |   $s = shape(
 14 |     'prompt' => $user_prompt,
 15 |   );
 16 |   $chain = »chain($s)«;
 17 |   $chain->thenMPZ(ReproIGCreatorAIMetachain::class);
 18 | }
 19 | 
 20 | final class ReproIGCreatorAIMetachain implements ReproIGenesisRunnable {


  [Upper / Main] Step 2 of 3                                                    

These are function types so next I checked the 1st function parameters.
Functions are contravariant in their parameters so the direction of the subtype relationship is reversed.

The subtype comes from this shape literal

File metachain.php, line 13, character 8 - line 15, character 3:

 11 |   list($_, $user_prompt) = $foo;
 12 |   //$user_prompt = $foo[1];
 13 |   $s = »shape(
 14 |     'prompt' => $user_prompt,
 15 |   );«
 16 |   $chain = chain($s);
 17 |   $chain->thenMPZ(ReproIGCreatorAIMetachain::class);
 18 | }

and flows into this expression

File metachain.php, line 13, character 3 - line 13, character 4:

 11 |   list($_, $user_prompt) = $foo;
 12 |   //$user_prompt = $foo[1];
 13 |   »$s« = shape(
 14 |     'prompt' => $user_prompt,
 15 |   );
 16 |   $chain = chain($s);
 17 |   $chain->thenMPZ(ReproIGCreatorAIMetachain::class);
 18 | }

via an assignment

which itself flows into this expression

File metachain.php, line 16, character 18 - line 16, character 19:

 12 |   //$user_prompt = $foo[1];
 13 |   $s = shape(
 14 |     'prompt' => $user_prompt,
 15 |   );
 16 |   $chain = chain(»$s«);
 17 |   $chain->thenMPZ(ReproIGCreatorAIMetachain::class);
 18 | }
 19 | 
 20 | final class ReproIGCreatorAIMetachain implements ReproIGenesisRunnable {

as the type of the local variable

The supertype comes from this hint

File metachain.php, line 21, character 23 - line 23, character 3:

 20 | final class ReproIGCreatorAIMetachain implements ReproIGenesisRunnable {
 21 |   const type TInput = »shape(
 22 |     'prompt' => string,
 23 |   );«
 24 | }
 25 | 
 26 | <<__NoAutoLikes>>


  [Upper / Main] Step 3 of 3                                                    

These are shape types so next I checked the required prompt field.

The subtype comes from this expression

File metachain.php, line 7, character 10 - line 10, character 3:

 5 |   ReproIMetaChainOperator<shape(), (nothing, string)> $obj,
 6 | ): Awaitable<void> {
 7 |   $foo = »await genX(
 8 |     // ReproMetaChain::fromValue(shape()) instead of $val
 9 |     $val->then($obj),
10 |   );«
11 |   list($_, $user_prompt) = $foo;
12 |   //$user_prompt = $foo[1];
13 |   $s = shape(

and flows into this expression

File metachain.php, line 7, character 3 - line 7, character 6:

 5 |   ReproIMetaChainOperator<shape(), (nothing, string)> $obj,
 6 | ): Awaitable<void> {
 7 |   »$foo« = await genX(
 8 |     // ReproMetaChain::fromValue(shape()) instead of $val
 9 |     $val->then($obj),
10 |   );
11 |   list($_, $user_prompt) = $foo;
12 |   //$user_prompt = $foo[1];
13 |   $s = shape(

via an assignment

which itself flows into this expression

File metachain.php, line 11, character 28 - line 11, character 31:

  9 |     $val->then($obj),
 10 |   );
 11 |   list($_, $user_prompt) = »$foo«;
 12 |   //$user_prompt = $foo[1];
 13 |   $s = shape(
 14 |     'prompt' => $user_prompt,

as the type of the local variable

which itself flows into this type variable

File metachain.php, line 11, character 12 - line 11, character 23:

  9 |     $val->then($obj),
 10 |   );
 11 |   list($_, »$user_prompt«) = $foo;
 12 |   //$user_prompt = $foo[1];
 13 |   $s = shape(
 14 |     'prompt' => $user_prompt,

via an assignment

which itself flows into this expression

File metachain.php, line 11, character 12 - line 11, character 23:

  9 |     $val->then($obj),
 10 |   );
 11 |   list($_, »$user_prompt«) = $foo;
 12 |   //$user_prompt = $foo[1];
 13 |   $s = shape(
 14 |     'prompt' => $user_prompt,

via an assignment

which itself flows into this expression

File metachain.php, line 14, character 17 - line 14, character 28:

 12 |   //$user_prompt = $foo[1];
 13 |   $s = shape(
 14 |     'prompt' => »$user_prompt«,
 15 |   );
 16 |   $chain = chain($s);
 17 |   $chain->thenMPZ(ReproIGCreatorAIMetachain::class);
 18 | }
 19 | 
 20 | final class ReproIGCreatorAIMetachain implements ReproIGenesisRunnable {

as the type of the local variable

The supertype comes from this hint

File metachain.php, line 22, character 17 - line 22, character 22:

 20 | final class ReproIGCreatorAIMetachain implements ReproIGenesisRunnable {
 21 |   const type TInput = shape(
 22 |     'prompt' => »string«,
 23 |   );
 24 | }
 25 | 
 26 | <<__NoAutoLikes>>

I found the subtype for [Upper / Main] when I checked the subtype constraint in [Upper / Lower].

  [Upper / Lower] Step 1 of 2                                                   

I started by checking this subtype relationship.

The subtype comes from this function or method declaration

File metachain.php, line 27, character 10 - line 27, character 14:

 26 | <<__NoAutoLikes>>
 27 | function »chain«<T>(T $_): ReproGenesisChain<T> {
 28 |   return null as nonnull;
 29 | }

The supertype comes from this expression

File metachain.php, line 16, character 12 - line 16, character 20:

 12 |   //$user_prompt = $foo[1];
 13 |   $s = shape(
 14 |     'prompt' => $user_prompt,
 15 |   );
 16 |   $chain = »chain($s)«;
 17 |   $chain->thenMPZ(ReproIGCreatorAIMetachain::class);
 18 | }
 19 | 
 20 | final class ReproIGCreatorAIMetachain implements ReproIGenesisRunnable {


  [Upper / Lower] Step 2 of 2                                                   

These are function types so next I checked the 1st function parameters.
Functions are contravariant in their parameters so the direction of the subtype relationship is reversed.

The subtype comes from this shape literal

File metachain.php, line 13, character 8 - line 15, character 3:

 11 |   list($_, $user_prompt) = $foo;
 12 |   //$user_prompt = $foo[1];
 13 |   $s = »shape(
 14 |     'prompt' => $user_prompt,
 15 |   );«
 16 |   $chain = chain($s);
 17 |   $chain->thenMPZ(ReproIGCreatorAIMetachain::class);
 18 | }

and flows into this expression

File metachain.php, line 13, character 3 - line 13, character 4:

 11 |   list($_, $user_prompt) = $foo;
 12 |   //$user_prompt = $foo[1];
 13 |   »$s« = shape(
 14 |     'prompt' => $user_prompt,
 15 |   );
 16 |   $chain = chain($s);
 17 |   $chain->thenMPZ(ReproIGCreatorAIMetachain::class);
 18 | }

via an assignment

which itself flows into this expression

File metachain.php, line 16, character 18 - line 16, character 19:

 12 |   //$user_prompt = $foo[1];
 13 |   $s = shape(
 14 |     'prompt' => $user_prompt,
 15 |   );
 16 |   $chain = chain(»$s«);
 17 |   $chain->thenMPZ(ReproIGCreatorAIMetachain::class);
 18 | }
 19 | 
 20 | final class ReproIGCreatorAIMetachain implements ReproIGenesisRunnable {

as the type of the local variable

The supertype comes from this generic parameter T of chain

File metachain.php, line 16, character 12 - line 16, character 16:

 12 |   //$user_prompt = $foo[1];
 13 |   $s = shape(
 14 |     'prompt' => $user_prompt,
 15 |   );
 16 |   $chain = »chain«($s);
 17 |   $chain->thenMPZ(ReproIGCreatorAIMetachain::class);
 18 | }
 19 | 
 20 | final class ReproIGCreatorAIMetachain implements ReproIGenesisRunnable {

and flows into this hint

File metachain.php, line 27, character 19 - line 27, character 19:

 26 | <<__NoAutoLikes>>
 27 | function chain<T>(»T« $_): ReproGenesisChain<T> {
 28 |   return null as nonnull;
 29 | }

as the instantiation of the generic T

I found the supertype for [Upper / Main] when I checked the subtype constraint in [Upper / Upper].

  [Upper / Upper] Step 1 of 1                                                   

I started by checking this subtype relationship.

The subtype comes from this generic parameter T of chain

File metachain.php, line 16, character 12 - line 16, character 16:

 12 |   //$user_prompt = $foo[1];
 13 |   $s = shape(
 14 |     'prompt' => $user_prompt,
 15 |   );
 16 |   $chain = »chain«($s);
 17 |   $chain->thenMPZ(ReproIGCreatorAIMetachain::class);
 18 | }
 19 | 
 20 | final class ReproIGCreatorAIMetachain implements ReproIGenesisRunnable {

and flows into this hint

File metachain.php, line 27, character 44 - line 27, character 44:

 26 | <<__NoAutoLikes>>
 27 | function chain<T>(T $_): ReproGenesisChain<»T«> {
 28 |   return null as nonnull;
 29 | }

as the instantiation of the generic T

and flows into this hint

File metachain.php, line 34, character 62 - line 34, character 62:

 33 |   public function thenMPZ(
 34 |     classname<ReproIGenesisRunnable with { type TInput super »T«; }> $_,
 35 |   ): ReproGenesisChain<mixed> {
 36 |     return null as nonnull;
 37 |   }

as the instantiation of the generic T

The supertype comes from this hint

File metachain.php, line 21, character 23 - line 23, character 3:

 20 | final class ReproIGCreatorAIMetachain implements ReproIGenesisRunnable {
 21 |   const type TInput = »shape(
 22 |     'prompt' => string,
 23 |   );«
 24 | }
 25 | 
 26 | <<__NoAutoLikes>>

